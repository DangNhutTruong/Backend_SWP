// Test script ƒë·ªÉ ki·ªÉm tra flow API
const API_BASE = 'http://localhost:5000';

// Test data
const testCheckinData = {
    date: new Date().toISOString().split('T')[0],
    targetCigarettes: 10,
    actualCigarettes: 5,
    cigarettesAvoided: 5,
    moneySaved: 25000,
    healthScore: 50,
    notes: 'Test t·ª´ script'
};

async function testApiFlow() {
    try {
        console.log('üß™ B·∫Øt ƒë·∫ßu test API flow...\n');

        // 1. Test endpoint create checkin tr·ª±c ti·∫øp (kh√¥ng auth)
        console.log('1Ô∏è‚É£ Test create checkin endpoint...');
        try {
            const response = await fetch(`${API_BASE}/api/progress/checkin`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(testCheckinData)
            });
            
            console.log('Response status:', response.status);
            const data = await response.json();
            console.log('Response data:', data);
            
            if (response.status === 401) {
                console.log('‚ùå C·∫ßn authentication - ƒë√¢y l√† l√Ω do kh√¥ng l∆∞u ƒë∆∞·ª£c!');
            } else if (response.status === 200 || response.status === 201) {
                console.log('‚úÖ API ho·∫°t ƒë·ªông t·ªët!');
            }
            
        } catch (error) {
            console.log('‚ùå L·ªói k·∫øt n·ªëi:', error.message);
        }

        // 2. Test pattern :userId v·ªõi userId th·ª±c t·∫ø
        console.log('\n2Ô∏è‚É£ Test pattern :userId v·ªõi userId 13...');
        try {
            const response = await fetch(`${API_BASE}/api/progress/13`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(testCheckinData)
            });
            
            console.log('UserID pattern status:', response.status);
            const data = await response.json();
            console.log('UserID pattern response:', data);
            
            if (response.status === 200 || response.status === 201) {
                console.log('‚úÖ Flow m·ªõi ho·∫°t ƒë·ªông! D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o database!');
            } else if (response.status === 404) {
                console.log('‚ùå User ID 13 kh√¥ng t·ªìn t·∫°i trong database');
            }
            
        } catch (error) {
            console.log('‚ùå Pattern :userId l·ªói:', error.message);
        }

        // 3. Test server c√≥ ch·∫°y kh√¥ng
        console.log('\n3Ô∏è‚É£ Test server status...');
        try {
            const response = await fetch(`${API_BASE}/`);
            console.log('Server status:', response.status);
        } catch (error) {
            console.log('‚ùå Server kh√¥ng ch·∫°y ho·∫∑c kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c');
        }

    } catch (error) {
        console.error('üí• Test failed:', error.message);
    }
}

// Ch·∫°y test
testApiFlow();
