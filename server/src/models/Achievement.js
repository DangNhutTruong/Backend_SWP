import { pool } from '../config/database.js';

class Achievement {
    /**
     * B·∫£ng ƒë√£ t·ªìn t·∫°i trong database (achievement v√† user_achievement)
     * Kh√¥ng c·∫ßn t·∫°o m·ªõi
     */
    static async ensureTables() {
        try {
            // B·∫£ng ƒë√£ t·ªìn t·∫°i, ch·ªâ log th√¥ng b√°o
            console.log('‚úÖ S·ª≠ d·ª•ng b·∫£ng achievement v√† user_achievement hi·ªán c√≥');
            
            console.log('‚úÖ Achievement tables ensured');
        } catch (error) {
            console.error('‚ùå Error ensuring achievement tables:', error);
            throw error;
        }
    }

    /**
     * Get all achievements
     */
    static async findAll() {
        try {
            const [rows] = await pool.query('SELECT * FROM achievement ORDER BY id ASC');
            return rows;
        } catch (error) {
            console.error('Error fetching all achievements:', error);
            throw error;
        }
    }

    /**
     * Get achievement by ID
     */
    static async findById(id) {
        try {
            const [rows] = await pool.query('SELECT * FROM achievement WHERE id = ?', [id]);
            return rows[0] || null;
        } catch (error) {
            console.error('Error fetching achievement by id:', error);
            throw error;
        }
    }

    /**
     * Get all achievements for a user
     */
    static async findByUserId(userId) {
        try {
            const [rows] = await pool.query(`
                SELECT a.*, ua.achieved_at
                FROM achievement a
                JOIN user_achievement ua ON a.id = ua.achievement_id
                WHERE ua.smoker_id = ?
                ORDER BY ua.achieved_at DESC
            `, [userId]);
            
            return rows;
        } catch (error) {
            console.error('Error fetching achievements for user:', error);
            throw error;
        }
    }

    /**
     * Add an achievement to a user
     */
    static async awardToUser(userId, achievementId) {
        try {
            // Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ c√≥ huy hi·ªáu n√†y ch∆∞a
            const [existing] = await pool.query(
                'SELECT id FROM user_achievement WHERE smoker_id = ? AND achievement_id = ?',
                [userId, achievementId]
            );
            
            // N·∫øu ƒë√£ c√≥, tr·∫£ v·ªÅ th√¥ng tin huy hi·ªáu
            if (existing.length > 0) {
                return await this.findById(achievementId);
            }
            
            // N·∫øu ch∆∞a c√≥, th√™m m·ªõi
            await pool.query(
                'INSERT INTO user_achievement (smoker_id, achievement_id) VALUES (?, ?)',
                [userId, achievementId]
            );
            
            return await this.findById(achievementId);
        } catch (error) {
            console.error('Error awarding achievement to user:', error);
            throw error;
        }
    }

    /**
     * Check if a user has a specific achievement
     */
    static async userHasAchievement(userId, achievementId) {
        try {
            const [rows] = await pool.query(
                'SELECT id FROM user_achievement WHERE smoker_id = ? AND achievement_id = ?',
                [userId, achievementId]
            );
            
            return rows.length > 0;
        } catch (error) {
            console.error('Error checking if user has achievement:', error);
            throw error;
        }
    }
    
    /**
     * Create default achievements if they don't exist
     */
    static async ensureDefaultAchievements() {
        try {
            const [existingRows] = await pool.query('SELECT COUNT(*) as count FROM achievement');
            
            if (existingRows[0].count === 0) {
                console.log('üèÜ Creating default achievements...');
                
                // M·∫£ng c√°c th√†nh t·ª±u m·∫∑c ƒë·ªãnh
                const defaultAchievements = [
                    // Th√†nh t·ª±u theo th·ªùi gian
                    {
                        name: '24 gi·ªù kh√¥ng h√∫t thu·ªëc',
                        description: 'ƒê√£ v∆∞·ª£t qua 24 gi·ªù ƒë·∫ßu ti√™n kh√¥ng h√∫t thu·ªëc. C∆° th·ªÉ b·∫°n ƒëang b·∫Øt ƒë·∫ßu qu√° tr√¨nh h·ªìi ph·ª•c!',
                        icon_url: '/achievements/24-hours.png'
                    },
                    {
                        name: '3 ng√†y kh√¥ng h√∫t thu·ªëc',
                        description: 'ƒê√£ v∆∞·ª£t qua 3 ng√†y kh√¥ng h√∫t thu·ªëc. Nicotine ƒë√£ r·ªùi kh·ªèi c∆° th·ªÉ b·∫°n ho√†n to√†n!',
                        icon_url: '/achievements/3-days.png'
                    },
                    {
                        name: '1 tu·∫ßn kh√¥ng h√∫t thu·ªëc',
                        description: 'ƒê√£ v∆∞·ª£t qua 1 tu·∫ßn kh√¥ng h√∫t thu·ªëc. H∆°i th·ªü c·ªßa b·∫°n ƒë√£ b·∫Øt ƒë·∫ßu t∆∞∆°i m√°t h∆°n!',
                        icon_url: '/achievements/1-week.png'
                    },
                    {
                        name: '1 th√°ng kh√¥ng h√∫t thu·ªëc',
                        description: 'ƒê√£ v∆∞·ª£t qua 1 th√°ng kh√¥ng h√∫t thu·ªëc. Ph·ªïi c·ªßa b·∫°n ƒëang h·ªìi ph·ª•c ƒë√°ng k·ªÉ!',
                        icon_url: '/achievements/1-month.png'
                    },
                    
                    // Th√†nh t·ª±u theo ti·∫øn ƒë·ªô
                    {
                        name: 'Gi·∫£m 25% l∆∞·ª£ng thu·ªëc',
                        description: 'ƒê√£ gi·∫£m ƒë∆∞·ª£c 25% l∆∞·ª£ng thu·ªëc l√° h√∫t h√†ng ng√†y. B∆∞·ªõc ƒë·∫ßu ti√™n quan tr·ªçng!',
                        icon_url: '/achievements/reduce-25.png'
                    },
                    {
                        name: 'Gi·∫£m 50% l∆∞·ª£ng thu·ªëc',
                        description: 'ƒê√£ gi·∫£m ƒë∆∞·ª£c 50% l∆∞·ª£ng thu·ªëc l√° h√∫t h√†ng ng√†y. Ti·∫øp t·ª•c c·ªë g·∫Øng!',
                        icon_url: '/achievements/reduce-50.png'
                    },
                    {
                        name: 'Gi·∫£m 75% l∆∞·ª£ng thu·ªëc',
                        description: 'ƒê√£ gi·∫£m ƒë∆∞·ª£c 75% l∆∞·ª£ng thu·ªëc l√° h√∫t h√†ng ng√†y. B·∫°n g·∫ßn ƒë·∫°t ƒë∆∞·ª£c m·ª•c ti√™u!',
                        icon_url: '/achievements/reduce-75.png'
                    },
                    {
                        name: 'Ho√†n to√†n cai thu·ªëc',
                        description: 'Ch√∫c m·ª´ng! B·∫°n ƒë√£ ho√†n to√†n cai thu·ªëc l√° th√†nh c√¥ng!',
                        icon_url: '/achievements/quit-smoking.png'
                    }
                ];
                
                // Th√™m t·ª´ng th√†nh t·ª±u v√†o database
                for (const achievement of defaultAchievements) {
                    await pool.query(
                        'INSERT INTO achievement (name, description, icon_url) VALUES (?, ?, ?)',
                        [achievement.name, achievement.description, achievement.icon_url]
                    );
                }
                
                console.log('‚úÖ Default achievements created successfully');
            } else {
                console.log('‚ÑπÔ∏è Achievements already exist, skipping creation');
            }
        } catch (error) {
            console.error('‚ùå Error ensuring default achievements:', error);
            throw error;
        }
    }
}

export default Achievement;
