import RssParser from 'rss-parser';
import axios from 'axios';
import { decode } from 'html-entities';
import newsCache from '../services/newsCache.js';

/**
 * News Controller - Handles real news fetching from RSS feeds and APIs with caching
 */
class NewsController {
    constructor() {
        // Parser cho RSS th√¥ng th∆∞·ªùng (VnExpress, Tu·ªïi Tr·∫ª...)
        this.parser = new RssParser({
            customFields: {
                item: ['media:content', 'enclosure']
            },
            defaultRSS: 2.0,
            xml2js: {
                normalize: true,
                normalizeTags: false,
                explicitArray: false
            }
        });
        
        // Parser ƒë∆°n gi·∫£n cho Google News RSS
        this.googleNewsParser = new RssParser();
    }

    /**
     * Get smoking-related news from RSS feeds with caching fallback
     */
    async getSmokingNews(req, res) {
        try {
            const limit = parseInt(req.query.limit) || 10;
            const actualLimit = Math.min(6, limit); // ƒê·∫£m b·∫£o t·ªëi ƒëa 6 b√†i

            console.log('üîç ƒêang l·∫•y tin t·ª©c v·ªÅ thu·ªëc l√° t·ª´ Google News...');
            
            // Th·ª≠ l·∫•y tin m·ªõi t·ª´ Google News tr·ª±c ti·∫øp
            console.log('üì° ƒêang crawl tin m·ªõi t·ª´ Google News...');
            const freshArticles = await this.crawlSmokingNews();
            
            if (freshArticles.length > 0) {
                // L∆∞u v√†o cache ƒë·ªÉ backup
                newsCache.saveToCache('smoking', freshArticles);
                console.log(`‚úÖ L·∫•y ƒë∆∞·ª£c ${freshArticles.length} b√†i m·ªõi t·ª´ Google News`);
                
                return res.json({
                    success: true,
                    data: freshArticles.slice(0, actualLimit),
                    total: freshArticles.length,
                    source: 'Google News (Fresh)'
                });
            }

            // N·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c t·ª´ Google News, d√πng cache
            console.log('‚ö†Ô∏è Kh√¥ng l·∫•y ƒë∆∞·ª£c tin t·ª´ Google News, d√πng cache...');
            const cachedArticles = newsCache.getSmokingNewsFromCache(actualLimit);
            
            if (cachedArticles.length > 0) {
                console.log(`‚úÖ Tr·∫£ v·ªÅ ${cachedArticles.length} b√†i t·ª´ cache`);
                return res.json({
                    success: true,
                    data: cachedArticles,
                    total: cachedArticles.length,
                    source: 'Cache (fallback)'
                });
            }

            // Cu·ªëi c√πng m·ªõi th√¥ng b√°o kh√¥ng c√≥ tin
            console.log('‚ùå Kh√¥ng c√≥ tin t·ª©c kh·∫£ d·ª•ng');
            return res.json({
                success: false,
                data: [],
                total: 0,
                message: 'Hi·ªán t·∫°i kh√¥ng c√≥ tin t·ª©c v·ªÅ thu·ªëc l√° kh·∫£ d·ª•ng. Vui l√≤ng th·ª≠ l·∫°i sau.'
            });

        } catch (error) {
            console.error('‚ùå L·ªói khi l·∫•y tin t·ª©c thu·ªëc l√°:', error);
            
            // Th·ª≠ l·∫•y t·ª´ cache nh∆∞ fallback cu·ªëi c√πng
            const cachedArticles = newsCache.getSmokingNewsFromCache(actualLimit);
            if (cachedArticles.length > 0) {
                return res.json({
                    success: true,
                    data: cachedArticles,
                    total: cachedArticles.length,
                    source: 'Cache (error fallback)'
                });
            }
            
            // Cu·ªëi c√πng th√¥ng b√°o kh√¥ng c√≥ tin kh·∫£ d·ª•ng
            return res.json({
                success: false,
                data: [],
                total: 0,
                message: 'Hi·ªán t·∫°i kh√¥ng c√≥ tin t·ª©c v·ªÅ thu·ªëc l√° kh·∫£ d·ª•ng. Vui l√≤ng th·ª≠ l·∫°i sau.'
            });
        }
    }

    /**
     * Crawl smoking news from RSS feeds
     * @returns {Array} Array of smoking-related articles
     */
    /**
     * Crawl smoking news from RSS feeds
     * @returns {Array} Array of smoking-related articles
     */
    async crawlSmokingNews() {
        try {
            // Ch·ªâ l·∫•y t·ª´ Google News RSS v·ªõi t·ª´ kh√≥a thu·ªëc l√° c·ª• th·ªÉ
            const rssFeeds = [
                // Google News RSS feeds v·ªõi t·ª´ kh√≥a thu·ªëc l√° ti·∫øng Vi·ªát (URL encoded)
                'https://news.google.com/rss/search?q=thu%E1%BB%91c%20l%C3%A1&hl=vi&gl=VN&ceid=VN:vi',
                'https://news.google.com/rss/search?q=h%C3%BAt%20thu%E1%BB%91c&hl=vi&gl=VN&ceid=VN:vi',
                'https://news.google.com/rss/search?q=cai%20thu%E1%BB%91c%20l%C3%A1&hl=vi&gl=VN&ceid=VN:vi',
                'https://news.google.com/rss/search?q=thu%E1%BB%91c%20l%C3%A1%20%C4%91i%E1%BB%87n%20t%E1%BB%AD&hl=vi&gl=VN&ceid=VN:vi'
            ];

            const allArticles = [];

            // L·∫•y tin t·ª©c t·ª´ Google News RSS feeds
            for (const feedUrl of rssFeeds) {
                try {
                    console.log(`üì° Parsing Google News RSS: ${feedUrl}`);
                    
                    // D√πng Google News parser
                    const feed = await this.googleNewsParser.parseURL(feedUrl);
                    
                    if (!feed || !feed.items || !Array.isArray(feed.items) || feed.items.length === 0) {
                        console.warn(`üì≠ Feed ${feedUrl} kh√¥ng c√≥ items`);
                        continue;
                    }
                    
                    console.log(`‚úÖ L·∫•y ƒë∆∞·ª£c ${feed.items.length} b√†i t·ª´ Google News`);
                    
                    // L·∫•y t·∫•t c·∫£ b√†i t·ª´ Google News (ƒë√£ ƒë∆∞·ª£c filter theo t·ª´ kh√≥a)
                    const articlesToAdd = feed.items.map(item => this.formatArticle(item, 'smoking'));
                    allArticles.push(...articlesToAdd);
                    
                } catch (feedError) {
                    console.warn(`‚ùå Kh√¥ng th·ªÉ l·∫•y tin t·ª´ ${feedUrl}:`, feedError.message);
                }
            }

            // Lo·∫°i b·ªè duplicate v√† s·∫Øp x·∫øp theo ng√†y m·ªõi nh·∫•t, ch·ªâ l·∫•y 6 b√†i
            const uniqueArticles = allArticles.filter((article, index, self) => 
                index === self.findIndex((a) => a.url === article.url || a.title === article.title)
            );
            
            const sortedArticles = uniqueArticles
                .sort((a, b) => new Date(b.publishedAt) - new Date(a.publishedAt))
                .slice(0, 6); // Ch·ªâ l·∫•y 6 b√†i m·ªõi nh·∫•t

            console.log(`‚úÖ T·ªïng c·ªông l·∫•y ƒë∆∞·ª£c ${sortedArticles.length} b√†i v·ªÅ thu·ªëc l√° t·ª´ Google News`);
            return sortedArticles;

        } catch (error) {
            console.error('‚ùå L·ªói khi crawl tin t·ª©c thu·ªëc l√° t·ª´ Google News:', error);
            return [];
        }
    }

    /**
     * Get health-related news from RSS feeds
     */
    async getHealthNews(req, res) {
        try {
            const limit = parseInt(req.query.limit) || 10;

            const rssFeeds = [
                // RSS s·ª©c kh·ªèe t·ªïng qu√°t ƒë√°ng tin c·∫≠y
                'https://vnexpress.net/rss/suc-khoe.rss',
                'https://tuoitre.vn/rss/suc-khoe.rss',
                'https://thanhnien.vn/rss/suc-khoe.rss',
                'https://vietnamnet.vn/rss/suc-khoe.rss',
                'https://dantri.com.vn/rss/suc-khoe.rss'
            ];

            const allArticles = [];

            for (const feedUrl of rssFeeds) {
                try {
                    // Khai b√°o bi·∫øn feed ·ªü ƒë·∫ßu ƒë·ªÉ c√≥ th·ªÉ truy c·∫≠p t·ª´ b·∫•t k·ª≥ ƒë√¢u trong block
                    let feed;
                    
                    // Th·ª≠ t·∫£i feed v·ªõi Axios tr∆∞·ªõc ƒë·ªÉ x·ª≠ l√Ω tr·ª±c ti·∫øp XML
                    try {
                        const feedResponse = await axios.get(feedUrl, {
                            headers: {
                                'Accept': 'application/rss+xml, application/xml, text/xml',
                                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
                            },
                            responseType: 'text',
                            timeout: 5000 // Timeout 5 gi√¢y
                        });
                        
                        // ƒê·∫£m b·∫£o XML ƒë∆∞·ª£c encode ƒë√∫ng c√°ch
                        const xmlContent = feedResponse.data
                            .replace(/[\u00A0-\u9999<>&]/gim, function(i) {
                                return '&#'+i.charCodeAt(0)+';';
                            })
                            .replace(/&#60;/g, '<')
                            .replace(/&#62;/g, '>');
                            
                        // Parse XML ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω
                        feed = await this.parser.parseString(xmlContent);
                    } catch (xmlError) {
                        console.warn(`Kh√¥ng th·ªÉ x·ª≠ l√Ω XML tr·ª±c ti·∫øp, d√πng parseURL: ${xmlError.message}`);
                        // Fallback to standard parsing
                        feed = await this.parser.parseURL(feedUrl);
                    }
                    
                    const healthArticles = feed.items
                        .slice(0, 5) // L·∫•y 5 b√†i m·ªõi nh·∫•t t·ª´ m·ªói ngu·ªìn
                        .map(item => this.formatArticle(item, 'health'));

                    allArticles.push(...healthArticles);
                } catch (feedError) {
                    console.warn(`Kh√¥ng th·ªÉ l·∫•y tin t·ª´ ${feedUrl}:`, feedError.message);
                }
            }

            const sortedArticles = allArticles
                .sort((a, b) => new Date(b.publishedAt) - new Date(a.publishedAt))
                .slice(0, limit);

            if (sortedArticles.length === 0) {
                return res.json({
                    success: false,
                    data: [],
                    total: 0,
                    message: 'Hi·ªán t·∫°i kh√¥ng c√≥ tin t·ª©c s·ª©c kh·ªèe kh·∫£ d·ª•ng. Vui l√≤ng th·ª≠ l·∫°i sau.'
                });
            }

            res.json({
                success: true,
                data: sortedArticles,
                total: sortedArticles.length,
                source: 'RSS feeds'
            });

        } catch (error) {
            console.error('L·ªói khi l·∫•y tin t·ª©c s·ª©c kh·ªèe:', error);
            res.json({
                success: false,
                data: [],
                total: 0,
                message: 'L·ªói server khi l·∫•y tin t·ª©c s·ª©c kh·ªèe. Vui l√≤ng th·ª≠ l·∫°i sau.'
            });
        }
    }

    /**
     * Search news by keyword
     */
    async searchNews(req, res) {
        try {
            const keyword = req.query.q;
            const limit = parseInt(req.query.limit) || 10;

            if (!keyword) {
                return res.status(400).json({
                    success: false,
                    message: 'T·ª´ kh√≥a t√¨m ki·∫øm kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng'
                });
            }

            // T√¨m ki·∫øm trong c√°c RSS feeds s·ª©c kh·ªèe
            const rssFeeds = [
                'https://vnexpress.net/rss/suc-khoe.rss',
                'https://tuoitre.vn/rss/suc-khoe.rss',
                'https://thanhnien.vn/rss/suc-khoe.rss',
                'https://vietnamnet.vn/rss/suc-khoe.rss',
                'https://dantri.com.vn/rss/suc-khoe.rss'
            ];

            const allArticles = [];

            for (const feedUrl of rssFeeds) {
                try {
                    // Khai b√°o bi·∫øn feed ·ªü ƒë·∫ßu ƒë·ªÉ c√≥ th·ªÉ truy c·∫≠p t·ª´ b·∫•t k·ª≥ ƒë√¢u trong block
                    let feed;
                    
                    // Th·ª≠ t·∫£i feed v·ªõi Axios tr∆∞·ªõc ƒë·ªÉ x·ª≠ l√Ω tr·ª±c ti·∫øp XML
                    try {
                        const feedResponse = await axios.get(feedUrl, {
                            headers: {
                                'Accept': 'application/rss+xml, application/xml, text/xml',
                                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
                            },
                            responseType: 'text',
                            timeout: 5000 // Timeout 5 gi√¢y
                        });
                        
                        // ƒê·∫£m b·∫£o XML ƒë∆∞·ª£c encode ƒë√∫ng c√°ch
                        const xmlContent = feedResponse.data
                            .replace(/[\u00A0-\u9999<>&]/gim, function(i) {
                                return '&#'+i.charCodeAt(0)+';';
                            })
                            .replace(/&#60;/g, '<')
                            .replace(/&#62;/g, '>');
                            
                        // Parse XML ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω
                        feed = await this.parser.parseString(xmlContent);
                    } catch (xmlError) {
                        console.warn(`Kh√¥ng th·ªÉ x·ª≠ l√Ω XML tr·ª±c ti·∫øp, d√πng parseURL: ${xmlError.message}`);
                        // Fallback to standard parsing
                        feed = await this.parser.parseURL(feedUrl);
                    }
                    
                    const matchingArticles = feed.items.filter(item => {
                        // Gi·∫£i m√£ HTML entities tr∆∞·ªõc khi t√¨m ki·∫øm
                        const title = decode(item.title?.toLowerCase() || '');
                        const description = decode(item.contentSnippet?.toLowerCase() || '');
                        const searchKeyword = keyword.toLowerCase();
                        
                        return title.includes(searchKeyword) || description.includes(searchKeyword);
                    }).map(item => this.formatArticle(item, 'search'));

                    allArticles.push(...matchingArticles);
                } catch (feedError) {
                    console.warn(`Kh√¥ng th·ªÉ t√¨m ki·∫øm trong ${feedUrl}:`, feedError.message);
                }
            }

            const sortedArticles = allArticles
                .sort((a, b) => new Date(b.publishedAt) - new Date(a.publishedAt))
                .slice(0, limit);

            res.json({
                success: true,
                data: sortedArticles,
                total: sortedArticles.length,
                keyword: keyword,
                source: 'RSS search'
            });

        } catch (error) {
            console.error('L·ªói khi t√¨m ki·∫øm tin t·ª©c:', error);
            res.status(500).json({
                success: false,
                message: 'L·ªói server khi t√¨m ki·∫øm tin t·ª©c'
            });
        }
    }

    /**
     * Format RSS item to standardized article format
     */
    formatArticle(item, category = 'general') {
        // L·∫•y h√¨nh ·∫£nh t·ª´ RSS item v·ªõi fallback t·ªët h∆°n
        let imageUrl = null;
        
        // Th·ª≠ c√°c ngu·ªìn h√¨nh ·∫£nh kh√°c nhau
        if (item['media:content'] && item['media:content'].$?.url) {
            imageUrl = item['media:content'].$.url;
        } else if (item.enclosure && item.enclosure.url) {
            imageUrl = item.enclosure.url;
        } else if (item.content && item.content.includes('<img')) {
            // T√¨m URL h√¨nh ·∫£nh trong content HTML
            const imgMatch = item.content.match(/<img[^>]+src="([^">]+)"/);
            if (imgMatch) {
                imageUrl = imgMatch[1];
            }
        } else if (item.description && item.description.includes('<img')) {
            // T√¨m URL h√¨nh ·∫£nh trong description HTML
            const imgMatch = item.description.match(/<img[^>]+src="([^">]+)"/);
            if (imgMatch) {
                imageUrl = imgMatch[1];
            }
        }
        
        // S·ª≠ d·ª•ng h√¨nh m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng t√¨m ƒë∆∞·ª£c h√¨nh
        if (!imageUrl) {
            // Random h√¨nh ·∫£nh m·∫∑c ƒë·ªãnh li√™n quan ƒë·∫øn thu·ªëc l√°
            const defaultImages = [
                '/image/articles/e.jpg',
                '/image/articles/r.jpg',
                '/image/articles/th.jpg',
                '/image/articles/c.jpg',
                '/image/articles/d.jpg',
                '/image/articles/nm.png'
            ];
            imageUrl = defaultImages[Math.floor(Math.random() * defaultImages.length)];
        }

        // H√†m gi·∫£i m√£ c√°c HTML entities trong vƒÉn b·∫£n
        const decodeHtmlEntities = (text) => {
            if (!text) return '';
            try {
                // S·ª≠ d·ª•ng th∆∞ vi·ªán html-entities ƒë·ªÉ decode
                return decode(text, { level: 'html5' });
            } catch (e) {
                console.error('L·ªói khi gi·∫£i m√£ HTML entities:', e);
                return text; // Tr·∫£ v·ªÅ vƒÉn b·∫£n g·ªëc n·∫øu c√≥ l·ªói
            }
        };

        // H√†m lo·∫°i b·ªè c√°c th·∫ª HTML
        const stripHtml = (html) => {
            if (!html) return '';
            return html
                .replace(/<\/?[^>]+(>|$)/g, ' ') // Lo·∫°i b·ªè c√°c th·∫ª HTML
                .replace(/\s+/g, ' ')            // Gi·∫£m kho·∫£ng tr·∫Øng li√™n ti·∫øp th√†nh m·ªôt
                .trim();                          // Lo·∫°i b·ªè kho·∫£ng tr·∫Øng ƒë·∫ßu v√† cu·ªëi
        };

        // √Åp d·ª•ng gi·∫£i m√£ v√† l√†m s·∫°ch cho title v√† description
        const title = decodeHtmlEntities(item.title) || 'Ti√™u ƒë·ªÅ kh√¥ng c√≥';
        
        // ∆Øu ti√™n contentSnippet v√¨ n√≥ th∆∞·ªùng ƒë√£ ƒë∆∞·ª£c t√°ch kh·ªèi HTML
        let cleanDescription = item.contentSnippet || stripHtml(item.content) || stripHtml(item.description) || '';
        const description = decodeHtmlEntities(cleanDescription) || 'M√¥ t·∫£ kh√¥ng c√≥';
        
        // T·∫°o ƒëo·∫°n tr√≠ch ng·∫Øn g·ªçn
        const excerpt = description.length > 200 ? 
            description.substring(0, 200).trim() + '...' : 
            description;

        return {
            id: `rss-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
            title: title,
            description: description,
            excerpt: excerpt,
            url: item.link || '#',
            urlToImage: imageUrl,
            publishedAt: item.pubDate || new Date().toISOString(),
            source: {
                name: this.extractSourceName(item.link || '')
            },
            author: item.creator || item.author || 'T√°c gi·∫£ kh√¥ng r√µ',
            category: category,
            views: Math.floor(Math.random() * 10000) + 1000,
            likes: Math.floor(Math.random() * 500) + 50,
            comments: Math.floor(Math.random() * 100) + 10
        };
    }

    /**
     * Extract source name from URL
     */
    extractSourceName(url) {
        try {
            const hostname = new URL(url).hostname;
            if (hostname.includes('vnexpress')) return 'VnExpress';
            if (hostname.includes('tuoitre')) return 'Tu·ªïi Tr·∫ª';
            if (hostname.includes('thanhnien')) return 'Thanh Ni√™n';
            if (hostname.includes('vietnamnet')) return 'VietNamNet';
            if (hostname.includes('dantri')) return 'D√¢n Tr√≠';
            if (hostname.includes('suckhoedoisong')) return 'S·ª©c kh·ªèe & ƒê·ªùi s·ªëng';
            if (hostname.includes('news.google.com')) return 'Google News';
            if (hostname.includes('laodong')) return 'Lao ƒê·ªông';
            if (hostname.includes('baomoi')) return 'B√°o M·ªõi';
            if (hostname.includes('zing')) return 'Zing News';
            return hostname;
        } catch {
            return 'Ngu·ªìn kh√¥ng r√µ';
        }
    }

    /**
     * Get cache statistics
     */
    async getCacheStats(req, res) {
        try {
            const stats = newsCache.getCacheStats();
            res.json({
                success: true,
                data: stats
            });
        } catch (error) {
            console.error('L·ªói khi l·∫•y th·ªëng k√™ cache:', error);
            res.status(500).json({
                success: false,
                message: 'L·ªói server khi l·∫•y th·ªëng k√™ cache'
            });
        }
    }

    /**
     * Force refresh cache
     */
    async refreshCache(req, res) {
        try {
            console.log('üîÑ ƒêang l√†m m·ªõi cache...');
            
            // Crawl tin m·ªõi v·ªÅ thu·ªëc l√°
            const smokingArticles = await this.crawlSmokingNews();
            if (smokingArticles.length > 0) {
                newsCache.saveToCache('smoking', smokingArticles);
                console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t ${smokingArticles.length} b√†i v·ªÅ thu·ªëc l√° v√†o cache`);
            }

            // L·∫•y th·ªëng k√™ m·ªõi
            const stats = newsCache.getCacheStats();
            
            res.json({
                success: true,
                message: 'Cache ƒë√£ ƒë∆∞·ª£c l√†m m·ªõi',
                data: {
                    crawled: smokingArticles.length,
                    stats: stats
                }
            });
        } catch (error) {
            console.error('L·ªói khi l√†m m·ªõi cache:', error);
            res.status(500).json({
                success: false,
                message: 'L·ªói server khi l√†m m·ªõi cache'
            });
        }
    }

    /**
     * Seed cache with sample articles (for testing)
     */
    async seedCache(req, res) {
        try {
            console.log('üå± ƒêang seed cache v·ªõi tin m·∫´u...');
            
            // T·∫°o tin m·∫´u gi·ªëng nh∆∞ tin th·∫≠t t·ª´ RSS
            const sampleArticles = [
                {
                    id: 'rss-sample-1',
                    title: 'VnExpress: Thu·ªëc l√° ƒëi·ªán t·ª≠ g√¢y t·ªïn h·∫°i ph·ªïi nghi√™m tr·ªçng h∆°n thu·ªëc l√° th∆∞·ªùng',
                    description: 'Nghi√™n c·ª©u m·ªõi t·ª´ ƒê·∫°i h·ªçc Stanford cho th·∫•y thu·ªëc l√° ƒëi·ªán t·ª≠ c√≥ th·ªÉ g√¢y vi√™m ph·ªïi c·∫•p t√≠nh v√† t·ªïn th∆∞∆°ng ni√™m m·∫°c ƒë∆∞·ªùng h√¥ h·∫•p nhanh h∆°n thu·ªëc l√° truy·ªÅn th·ªëng.',
                    excerpt: 'Nghi√™n c·ª©u m·ªõi t·ª´ ƒê·∫°i h·ªçc Stanford cho th·∫•y thu·ªëc l√° ƒëi·ªán t·ª≠ c√≥ th·ªÉ g√¢y vi√™m ph·ªïi c·∫•p t√≠nh...',
                    url: 'https://vnexpress.net/thuoc-la-dien-tu-gay-ton-hai-phoi-nghiem-trong-4520123.html',
                    urlToImage: '/image/articles/e.jpg',
                    publishedAt: new Date(Date.now() - 3600000).toISOString(), // 1 gi·ªù tr∆∞·ªõc
                    source: { name: 'VnExpress' },
                    author: 'BS. Nguy·ªÖn Minh H·∫°nh',
                    category: 'smoking',
                    views: 15234,
                    likes: 987,
                    comments: 156
                },
                {
                    id: 'rss-sample-2',
                    title: 'Tu·ªïi Tr·∫ª: Cai thu·ªëc l√° th√†nh c√¥ng nh·ªù li·ªáu ph√°p t√¢m l√Ω nh·∫≠n th·ª©c',
                    description: 'B·ªánh vi·ªán B·∫°ch Mai √°p d·ª•ng li·ªáu ph√°p t√¢m l√Ω nh·∫≠n th·ª©c gi√∫p 85% b·ªánh nh√¢n cai thu·ªëc l√° th√†nh c√¥ng trong v√≤ng 6 th√°ng.',
                    excerpt: 'B·ªánh vi·ªán B·∫°ch Mai √°p d·ª•ng li·ªáu ph√°p t√¢m l√Ω nh·∫≠n th·ª©c gi√∫p 85% b·ªánh nh√¢n cai thu·ªëc l√° th√†nh c√¥ng...',
                    url: 'https://tuoitre.vn/cai-thuoc-la-thanh-cong-nho-lieu-phap-tam-ly-nhan-thuc-2024080412345.htm',
                    urlToImage: '/image/articles/r.jpg',
                    publishedAt: new Date(Date.now() - 7200000).toISOString(), // 2 gi·ªù tr∆∞·ªõc
                    source: { name: 'Tu·ªïi Tr·∫ª' },
                    author: 'PGS.TS. V≈© Th√†nh C√¥ng',
                    category: 'smoking',
                    views: 12876,
                    likes: 654,
                    comments: 89
                },
                {
                    id: 'rss-sample-3',
                    title: 'Thanh Ni√™n: Ch√≠nh ph·ªß tƒÉng thu·∫ø thu·ªëc l√° l√™n 75% ƒë·ªÉ gi·∫£m t·ª∑ l·ªá h√∫t thu·ªëc',
                    description: 'Qu·ªëc h·ªôi th√¥ng qua ƒë·ªÅ xu·∫•t tƒÉng thu·∫ø thu·ªëc l√° t·ª´ 65% l√™n 75%, d·ª± ki·∫øn gi·∫£m 20% ng∆∞·ªùi h√∫t thu·ªëc trong 2 nƒÉm t·ªõi.',
                    excerpt: 'Qu·ªëc h·ªôi th√¥ng qua ƒë·ªÅ xu·∫•t tƒÉng thu·∫ø thu·ªëc l√° t·ª´ 65% l√™n 75%, d·ª± ki·∫øn gi·∫£m 20% ng∆∞·ªùi h√∫t thu·ªëc...',
                    url: 'https://thanhnien.vn/chinh-phu-tang-thue-thuoc-la-len-75-de-giam-ty-le-hut-thuoc-185240804.html',
                    urlToImage: '/image/articles/th.jpg',
                    publishedAt: new Date(Date.now() - 10800000).toISOString(), // 3 gi·ªù tr∆∞·ªõc
                    source: { name: 'Thanh Ni√™n' },
                    author: 'Ph√≥ng vi√™n H·ªìng Loan',
                    category: 'smoking',
                    views: 18956,
                    likes: 1205,
                    comments: 234
                },
                {
                    id: 'rss-sample-4',
                    title: 'VnExpress: Nghi√™n c·ª©u v·ªÅ t√°c h·∫°i c·ªßa kh√≥i thu·ªëc th·ª• ƒë·ªông ƒë·ªëi v·ªõi tr·∫ª em',
                    description: 'Vi·ªán S·ª©c kh·ªèe Tr·∫ª em c√¥ng b·ªë nghi√™n c·ª©u cho th·∫•y kh√≥i thu·ªëc th·ª• ƒë·ªông l√†m tƒÉng 40% nguy c∆° hen suy·ªÖn ·ªü tr·∫ª d∆∞·ªõi 5 tu·ªïi.',
                    excerpt: 'Vi·ªán S·ª©c kh·ªèe Tr·∫ª em c√¥ng b·ªë nghi√™n c·ª©u cho th·∫•y kh√≥i thu·ªëc th·ª• ƒë·ªông l√†m tƒÉng 40% nguy c∆° hen suy·ªÖn...',
                    url: 'https://vnexpress.net/nghien-cuu-ve-tac-hai-cua-khoi-thuoc-thu-dong-4520987.html',
                    urlToImage: '/image/articles/c.jpg',
                    publishedAt: new Date(Date.now() - 14400000).toISOString(), // 4 gi·ªù tr∆∞·ªõc
                    source: { name: 'VnExpress' },
                    author: 'BS. CKI Ph·∫°m Th·ªã Lan',
                    category: 'smoking',
                    views: 9876,
                    likes: 543,
                    comments: 67
                },
                {
                    id: 'rss-sample-5',
                    title: 'S·ª©c kh·ªèe & ƒê·ªùi s·ªëng: B·ªô Y t·∫ø khuy·∫øn c√°o v·ªÅ t√°c h·∫°i c·ªßa thu·ªëc l√° ƒëi·ªán t·ª≠',
                    description: 'B·ªô Y t·∫ø ph√°t h√†nh khuy·∫øn c√°o m·ªõi v·ªÅ thu·ªëc l√° ƒëi·ªán t·ª≠, c·∫£nh b√°o nguy c∆° nghi·ªán nicotine cao v√† t√°c ƒë·ªông x·∫•u ƒë·∫øn n√£o b·ªô thanh thi·∫øu ni√™n.',
                    excerpt: 'B·ªô Y t·∫ø ph√°t h√†nh khuy·∫øn c√°o m·ªõi v·ªÅ thu·ªëc l√° ƒëi·ªán t·ª≠, c·∫£nh b√°o nguy c∆° nghi·ªán nicotine cao...',
                    url: 'https://suckhoedoisong.vn/bo-y-te-khuyen-cao-ve-tac-hai-cua-thuoc-la-dien-tu-n234567.htm',
                    urlToImage: '/image/articles/d.jpg',
                    publishedAt: new Date(Date.now() - 18000000).toISOString(), // 5 gi·ªù tr∆∞·ªõc
                    source: { name: 'S·ª©c kh·ªèe & ƒê·ªùi s·ªëng' },
                    author: 'B√°c sƒ© Nguy·ªÖn VƒÉn Minh',
                    category: 'smoking',
                    views: 11234,
                    likes: 789,
                    comments: 112
                },
                {
                    id: 'rss-sample-6',
                    title: 'Tu·ªïi Tr·∫ª: ·ª®ng d·ª•ng AI gi√∫p theo d√µi qu√° tr√¨nh cai thu·ªëc l√°',
                    description: 'Startup Vi·ªát Nam ph√°t tri·ªÉn ·ª©ng d·ª•ng s·ª≠ d·ª•ng AI ƒë·ªÉ theo d√µi v√† h·ªó tr·ª£ ng∆∞·ªùi d√πng trong qu√° tr√¨nh cai thu·ªëc l√° v·ªõi t·ª∑ l·ªá th√†nh c√¥ng 70%.',
                    excerpt: 'Startup Vi·ªát Nam ph√°t tri·ªÉn ·ª©ng d·ª•ng s·ª≠ d·ª•ng AI ƒë·ªÉ theo d√µi v√† h·ªó tr·ª£ ng∆∞·ªùi d√πng trong qu√° tr√¨nh cai thu·ªëc l√°...',
                    url: 'https://tuoitre.vn/ung-dung-ai-giup-theo-doi-qua-trinh-cai-thuoc-la-2024080413456.htm',
                    urlToImage: '/image/articles/OIP.jpg',
                    publishedAt: new Date(Date.now() - 21600000).toISOString(), // 6 gi·ªù tr∆∞·ªõc
                    source: { name: 'Tu·ªïi Tr·∫ª' },
                    author: 'K·ªπ s∆∞ L√™ Ho√†ng Nam',
                    category: 'smoking',
                    views: 8765,
                    likes: 432,
                    comments: 78
                }
            ];

            // L∆∞u v√†o cache
            newsCache.saveToCache('smoking', sampleArticles);
            
            // L·∫•y th·ªëng k√™ m·ªõi
            const stats = newsCache.getCacheStats();
            
            res.json({
                success: true,
                message: 'Cache ƒë√£ ƒë∆∞·ª£c seed v·ªõi tin m·∫´u',
                data: {
                    seeded: sampleArticles.length,
                    stats: stats
                }
            });
        } catch (error) {
            console.error('L·ªói khi seed cache:', error);
            res.status(500).json({
                success: false,
                message: 'L·ªói server khi seed cache'
            });
        }
    }
}

export default new NewsController();
