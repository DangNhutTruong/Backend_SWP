import Achievement from '../models/Achievement.js';
import AchievementProgressService from '../services/achievementProgressService.js';
import { sendSuccess, sendError } from '../utils/response.js';

/**
 * Controller x·ª≠ l√Ω c√°c ch·ª©c nƒÉng li√™n quan ƒë·∫øn huy hi·ªáu
 */
export const getAchievements = async (req, res) => {
    try {
        const achievements = await Achievement.findAll();
        sendSuccess(res, 'L·∫•y danh s√°ch huy hi·ªáu th√†nh c√¥ng', achievements);
    } catch (error) {
        console.error('Error getting achievements:', error);
        sendError(res, 'Kh√¥ng th·ªÉ l·∫•y danh s√°ch huy hi·ªáu', 500);
    }
};

/**
 * L·∫•y huy hi·ªáu c·ªßa ng∆∞·ªùi d√πng ƒëang ƒëƒÉng nh·∫≠p
 */
export const getUserAchievements = async (req, res) => {
    try {
        console.log('üèÜ getUserAchievements called');
        console.log('- req.user:', req.user);
        console.log('- req.user.id:', req.user?.id);
        
        const userId = req.user.id;
        const achievements = await Achievement.findByUserId(userId);
        
        console.log('- Found achievements:', achievements.length);
        
        sendSuccess(res, 'L·∫•y huy hi·ªáu c·ªßa ng∆∞·ªùi d√πng th√†nh c√¥ng', achievements);
    } catch (error) {
        console.error('Error getting user achievements:', error);
        sendError(res, 'Kh√¥ng th·ªÉ l·∫•y huy hi·ªáu c·ªßa ng∆∞·ªùi d√πng', 500);
    }
};

/**
 * L·∫•y huy hi·ªáu c·ªßa m·ªôt ng∆∞·ªùi d√πng c·ª• th·ªÉ (theo ID)
 */
export const getSmokerAchievements = async (req, res) => {
    try {
        const { id } = req.params;
        const achievements = await Achievement.findByUserId(id);
        
        sendSuccess(res, 'L·∫•y huy hi·ªáu th√†nh c√¥ng', achievements);
    } catch (error) {
        console.error('Error getting smoker achievements:', error);
        sendError(res, 'Kh√¥ng th·ªÉ l·∫•y huy hi·ªáu c·ªßa ng∆∞·ªùi d√πng', 500);
    }
};

/**
 * C·∫•p huy hi·ªáu cho ng∆∞·ªùi d√πng ƒëang ƒëƒÉng nh·∫≠p
 */
export const awardAchievement = async (req, res) => {
    try {
        const { achievementId } = req.body;
        const userId = req.user.id;
        
        if (!achievementId) {
            return sendError(res, 'ID huy hi·ªáu kh√¥ng h·ª£p l·ªá', 400);
        }
        
        // Ki·ªÉm tra xem huy hi·ªáu c√≥ t·ªìn t·∫°i kh√¥ng
        const achievement = await Achievement.findById(achievementId);
        if (!achievement) {
            return sendError(res, 'Huy hi·ªáu kh√¥ng t·ªìn t·∫°i', 404);
        }
        
        // C·∫•p huy hi·ªáu cho ng∆∞·ªùi d√πng
        const awardedAchievement = await Achievement.awardToUser(userId, achievementId);
        
        sendSuccess(res, 'C·∫•p huy hi·ªáu th√†nh c√¥ng', awardedAchievement);
    } catch (error) {
        console.error('Error awarding achievement:', error);
        sendError(res, 'Kh√¥ng th·ªÉ c·∫•p huy hi·ªáu', 500);
    }
};

/**
 * Admin c·∫•p huy hi·ªáu cho ng∆∞·ªùi d√πng kh√°c
 */
export const adminAwardAchievement = async (req, res) => {
    try {
        // Ch·ªâ admin m·ªõi c√≥ quy·ªÅn th·ª±c hi·ªán
        if (req.user.role !== 'admin') {
            return sendError(res, 'Kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán', 403);
        }
        
        const { userId, achievementId } = req.body;
        
        if (!userId || !achievementId) {
            return sendError(res, 'Thi·∫øu th√¥ng tin ng∆∞·ªùi d√πng ho·∫∑c huy hi·ªáu', 400);
        }
        
        // Ki·ªÉm tra xem huy hi·ªáu c√≥ t·ªìn t·∫°i kh√¥ng
        const achievement = await Achievement.findById(achievementId);
        if (!achievement) {
            return sendError(res, 'Huy hi·ªáu kh√¥ng t·ªìn t·∫°i', 404);
        }
        
        // C·∫•p huy hi·ªáu cho ng∆∞·ªùi d√πng
        const awardedAchievement = await Achievement.awardToUser(userId, achievementId);
        
        sendSuccess(res, 'C·∫•p huy hi·ªáu th√†nh c√¥ng', awardedAchievement);
    } catch (error) {
        console.error('Error admin awarding achievement:', error);
        sendError(res, 'Kh√¥ng th·ªÉ c·∫•p huy hi·ªáu', 500);
    }
};

/**
 * Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ ƒë·∫°t ƒë∆∞·ª£c huy hi·ªáu hay ch∆∞a
 */
export const checkUserAchievement = async (req, res) => {
    try {
        const { achievementId } = req.params;
        const userId = req.user.id;
        
        if (!achievementId) {
            return sendError(res, 'ID huy hi·ªáu kh√¥ng h·ª£p l·ªá', 400);
        }
        
        const hasAchievement = await Achievement.userHasAchievement(userId, achievementId);
        
        sendSuccess(res, 'Ki·ªÉm tra huy hi·ªáu th√†nh c√¥ng', { hasAchievement });
    } catch (error) {
        console.error('Error checking achievement:', error);
        sendError(res, 'Kh√¥ng th·ªÉ ki·ªÉm tra huy hi·ªáu', 500);
    }
};

/**
 * Ki·ªÉm tra v√† award huy hi·ªáu d·ª±a tr√™n ti·∫øn tr√¨nh cai thu·ªëc
 */
export const checkProgressAchievements = async (req, res) => {
    try {
        const userId = req.user.id;
        
        const result = await AchievementProgressService.checkAndAwardAchievements(userId);
        
        sendSuccess(res, result.message, {
            awarded: result.awarded,
            count: result.awarded.length
        });
    } catch (error) {
        console.error('Error checking progress achievements:', error);
        sendError(res, 'Kh√¥ng th·ªÉ ki·ªÉm tra huy hi·ªáu ti·∫øn tr√¨nh', 500);
    }
};

/**
 * T·∫°o d·ªØ li·ªáu test ƒë·ªÉ c√≥ th·ªÉ nh·∫≠n achievement (ch·ªâ cho testing)
 */
export const createTestProgress = async (req, res) => {
    try {
        const userId = req.user.id;
        const { daysClean = 1 } = req.body;
        
        // T·∫°o d·ªØ li·ªáu test
        const progressData = await AchievementProgressService.createTestProgressData(userId, parseInt(daysClean));
        
        // Sau ƒë√≥ ki·ªÉm tra v√† award achievement
        const result = await AchievementProgressService.checkAndAwardAchievements(userId);
        
        sendSuccess(res, `ƒê√£ t·∫°o d·ªØ li·ªáu test ${daysClean} ng√†y clean`, {
            progressData,
            achievements: result.awarded,
            message: result.message
        });
    } catch (error) {
        console.error('Error creating test progress:', error);
        sendError(res, 'Kh√¥ng th·ªÉ t·∫°o d·ªØ li·ªáu test', 500);
    }
};

/**
 * Award achievement th·ªß c√¥ng (cho admin ho·∫∑c testing)
 */
export const manualAwardAchievement = async (req, res) => {
    try {
        const userId = req.user.id;
        const { achievementId } = req.body;
        
        if (!achievementId) {
            return sendError(res, 'Achievement ID l√† b·∫Øt bu·ªôc', 400);
        }
        
        const achievement = await AchievementProgressService.manualAwardAchievement(userId, achievementId);
        
        sendSuccess(res, 'ƒê√£ award huy hi·ªáu th√†nh c√¥ng', achievement);
    } catch (error) {
        console.error('Error manually awarding achievement:', error);
        sendError(res, 'Kh√¥ng th·ªÉ award huy hi·ªáu', 500);
    }
};
