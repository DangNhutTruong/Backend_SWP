import { pool } from '../config/database.js';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

// Get current file and directory
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

/**
 * T·∫°o b·∫£ng messages v·ªõi r√†ng bu·ªôc kh√≥a ngo·∫°i ƒë√∫ng
 */
async function createMessagesTableFixed() {
    try {
        console.log('üìù T·∫°o b·∫£ng messages v·ªõi r√†ng bu·ªôc kh√≥a ngo·∫°i ƒë√∫ng...');
        
        // B∆∞·ªõc 1: X√≥a b·∫£ng messages n·∫øu t·ªìn t·∫°i
        console.log('1Ô∏è‚É£ X√≥a b·∫£ng messages n·∫øu t·ªìn t·∫°i...');
        try {
            await pool.query('DROP TABLE IF EXISTS messages');
            console.log('‚úÖ ƒê√£ x√≥a b·∫£ng messages');
        } catch (error) {
            console.error('‚ùå L·ªói khi x√≥a b·∫£ng messages:', error);
        }
        
        // B∆∞·ªõc 2: T·∫°o b·∫£ng messages m·ªõi v·ªõi r√†ng bu·ªôc kh√≥a ngo·∫°i ƒë√∫ng
        console.log('2Ô∏è‚É£ T·∫°o b·∫£ng messages m·ªõi...');
        await pool.query(`
            CREATE TABLE messages (
                id INT PRIMARY KEY AUTO_INCREMENT,
                appointment_id INT NOT NULL,
                sender_type ENUM('user', 'coach') NOT NULL,
                text TEXT NOT NULL,
                read_by_coach BOOLEAN DEFAULT FALSE,
                read_by_user BOOLEAN DEFAULT FALSE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (appointment_id) REFERENCES appointments(id) ON DELETE CASCADE
            )
        `);
        console.log('‚úÖ ƒê√£ t·∫°o b·∫£ng messages m·ªõi v·ªõi kh√≥a ngo·∫°i li√™n k·∫øt ƒë·∫øn b·∫£ng appointments');
        
        // B∆∞·ªõc 3: Th√™m c√°c ch·ªâ m·ª•c (index)
        console.log('3Ô∏è‚É£ Th√™m c√°c ch·ªâ m·ª•c...');
        try {
            await pool.query('ALTER TABLE messages ADD INDEX idx_messages_appointment_id (appointment_id)');
            console.log('‚úÖ ƒê√£ th√™m ch·ªâ m·ª•c cho appointment_id');
        } catch (error) {
            if (error.code === 'ER_DUP_KEYNAME') {
                console.log('‚ÑπÔ∏è Ch·ªâ m·ª•c cho appointment_id ƒë√£ t·ªìn t·∫°i');
            } else {
                throw error;
            }
        }
        
        try {
            await pool.query('ALTER TABLE messages ADD INDEX idx_messages_read_sender (sender_type, read_by_coach, read_by_user)');
            console.log('‚úÖ ƒê√£ th√™m ch·ªâ m·ª•c cho read status');
        } catch (error) {
            if (error.code === 'ER_DUP_KEYNAME') {
                console.log('‚ÑπÔ∏è Ch·ªâ m·ª•c cho read status ƒë√£ t·ªìn t·∫°i');
            } else {
                throw error;
            }
        }
        
        console.log('üéâ ƒê√£ t·∫°o b·∫£ng messages th√†nh c√¥ng v·ªõi r√†ng bu·ªôc kh√≥a ngo·∫°i ƒë√∫ng!');
    } catch (error) {
        console.error('‚ùå L·ªói khi t·∫°o b·∫£ng messages:', error);
        throw error;
    }
}

// Th·ª±c thi n·∫øu ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
if (process.argv[1] === new URL(import.meta.url).pathname) {
    createMessagesTableFixed()
        .then(() => {
            console.log('‚ú® Qu√° tr√¨nh t·∫°o b·∫£ng messages ho√†n t·∫•t');
            process.exit(0);
        })
        .catch(error => {
            console.error('‚ùå L·ªói:', error);
            process.exit(1);
        });
}

export default createMessagesTableFixed;
