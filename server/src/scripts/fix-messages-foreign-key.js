import mysql from 'mysql2/promise';
import dotenv from 'dotenv';

dotenv.config();

/**
 * C·∫≠p nh·∫≠t r√†ng bu·ªôc kh√≥a ngo·∫°i c·ªßa b·∫£ng messages
 */
async function fixMessagesForeignKey() {
    // T·∫°o pool connection ri√™ng cho script n√†y
    const pool = mysql.createPool({
        uri: process.env.DATABASE_URL || process.env.DB_URL,
        waitForConnections: true,
        connectionLimit: 5,
        queueLimit: 0,
        charset: 'utf8mb4',
        timezone: '+00:00',
        ssl: {
            rejectUnauthorized: false
        }
    });
    
    const connection = await pool.getConnection();
    
    try {
        console.log('üîß B·∫Øt ƒë·∫ßu s·ª≠a r√†ng bu·ªôc kh√≥a ngo·∫°i cho b·∫£ng messages...');
        
        // B·∫Øt ƒë·∫ßu giao d·ªãch ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh nh·∫•t qu√°n
        await connection.beginTransaction();
        
        // 1. X√≥a r√†ng bu·ªôc kh√≥a ngo·∫°i hi·ªán t·∫°i
        console.log('1Ô∏è‚É£ X√≥a r√†ng bu·ªôc kh√≥a ngo·∫°i hi·ªán t·∫°i...');
        await connection.query(`
            ALTER TABLE messages
            DROP FOREIGN KEY messages_ibfk_1
        `);
        console.log('‚úÖ ƒê√£ x√≥a r√†ng bu·ªôc kh√≥a ngo·∫°i c≈©');
        
        // 2. Th√™m r√†ng bu·ªôc kh√≥a ngo·∫°i m·ªõi li√™n k·∫øt v·ªõi b·∫£ng appointments
        console.log('2Ô∏è‚É£ Th√™m r√†ng bu·ªôc kh√≥a ngo·∫°i m·ªõi...');
        await connection.query(`
            ALTER TABLE messages
            ADD CONSTRAINT messages_appointment_fk
            FOREIGN KEY (appointment_id)
            REFERENCES appointments(id)
            ON DELETE CASCADE
        `);
        console.log('‚úÖ ƒê√£ th√™m r√†ng bu·ªôc kh√≥a ngo·∫°i m·ªõi li√™n k·∫øt ƒë·∫øn b·∫£ng appointments');
        
        // Commit giao d·ªãch
        await connection.commit();
        console.log('üéâ C·∫≠p nh·∫≠t r√†ng bu·ªôc kh√≥a ngo·∫°i th√†nh c√¥ng!');
        
    } catch (error) {
        // Rollback n·∫øu c√≥ l·ªói
        await connection.rollback();
        console.error('‚ùå L·ªói khi s·ª≠a r√†ng bu·ªôc kh√≥a ngo·∫°i:', error);
        throw error;
    } finally {
        // Tr·∫£ k·∫øt n·ªëi v·ªÅ pool
        connection.release();
        await pool.end();
    }
}

// Th·ª±c thi n·∫øu ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
if (process.argv[1] === new URL(import.meta.url).pathname) {
    fixMessagesForeignKey()
        .then(() => {
            console.log('‚ú® Qu√° tr√¨nh s·ª≠a kh√≥a ngo·∫°i ho√†n t·∫•t');
            process.exit(0);
        })
        .catch(error => {
            console.error('‚ùå L·ªói:', error);
            process.exit(1);
        });
}

export default fixMessagesForeignKey;
