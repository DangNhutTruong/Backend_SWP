import mysql from 'mysql2/promise';
import dotenv from 'dotenv';

dotenv.config();

async function fixMessagesForeignKey() {
    console.log('üîß B·∫Øt ƒë·∫ßu s·ª≠a r√†ng bu·ªôc kh√≥a ngo·∫°i cho b·∫£ng messages...');
    
    // T·∫°o connection
    const connection = await mysql.createConnection({
        uri: process.env.DATABASE_URL || process.env.DB_URL,
        ssl: {
            rejectUnauthorized: false
        }
    });
    
    try {
        console.log('‚úÖ K·∫øt n·ªëi database th√†nh c√¥ng');
        
        // Ki·ªÉm tra constraint hi·ªán t·∫°i
        console.log('1Ô∏è‚É£ Ki·ªÉm tra constraint hi·ªán t·∫°i...');
        const [constraints] = await connection.execute(`
            SELECT CONSTRAINT_NAME, REFERENCED_TABLE_NAME
            FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE
            WHERE TABLE_NAME = 'messages' AND REFERENCED_TABLE_NAME IS NOT NULL
        `);
        
        console.log('Constraints hi·ªán t·∫°i:', constraints);
        
        if (constraints.length > 0) {
            for (const constraint of constraints) {
                console.log(`2Ô∏è‚É£ X√≥a constraint c≈©: ${constraint.CONSTRAINT_NAME}`);
                await connection.execute(`
                    ALTER TABLE messages
                    DROP FOREIGN KEY ${constraint.CONSTRAINT_NAME}
                `);
                console.log(`‚úÖ ƒê√£ x√≥a constraint: ${constraint.CONSTRAINT_NAME}`);
            }
        }
        
        // Ki·ªÉm tra xem b·∫£ng appointments c√≥ t·ªìn t·∫°i kh√¥ng
        console.log('3Ô∏è‚É£ Ki·ªÉm tra b·∫£ng appointments...');
        const [tables] = await connection.execute(`
            SHOW TABLES LIKE 'appointments'
        `);
        
        if (tables.length === 0) {
            console.log('‚ùå B·∫£ng appointments kh√¥ng t·ªìn t·∫°i!');
            return;
        }
        
        console.log('‚úÖ B·∫£ng appointments t·ªìn t·∫°i');
        
        // Th√™m constraint m·ªõi
        console.log('4Ô∏è‚É£ Th√™m constraint m·ªõi...');
        await connection.execute(`
            ALTER TABLE messages
            ADD CONSTRAINT messages_appointment_fk
            FOREIGN KEY (appointment_id)
            REFERENCES appointments(id)
            ON DELETE CASCADE
        `);
        
        console.log('‚úÖ ƒê√£ th√™m constraint m·ªõi li√™n k·∫øt ƒë·∫øn b·∫£ng appointments');
        console.log('üéâ S·ª≠a l·ªói foreign key th√†nh c√¥ng!');
        
    } catch (error) {
        console.error('‚ùå L·ªói:', error.message);
        console.error('Th√¥ng tin chi ti·∫øt:', error);
    } finally {
        await connection.end();
    }
}

// Ch·∫°y script
fixMessagesForeignKey()
    .then(() => {
        console.log('‚ú® Ho√†n t·∫•t!');
        process.exit(0);
    })
    .catch(error => {
        console.error('‚ùå L·ªói t·ªïng th·ªÉ:', error);
        process.exit(1);
    });
