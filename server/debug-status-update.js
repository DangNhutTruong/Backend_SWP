/**
 * Script test tr·ª±c ti·∫øp endpoint c·∫≠p nh·∫≠t tr·∫°ng th√°i
 * Script n√†y s·∫Ω ki·ªÉm tra chi ti·∫øt request v√† response
 */

// Nh·∫≠p th∆∞ vi·ªán http/https
import http from 'http';

// C√†i ƒë·∫∑t th√¥ng tin request
const appointmentId = 147; // Thay ƒë·ªïi ID n·∫øu c·∫ßn
const status = 'confirmed'; // C√≥ th·ªÉ thay ƒë·ªïi: 'pending', 'confirmed', 'completed', 'cancelled'
const token = 'Bearer YOUR_TOKEN_HERE'; // Thay YOUR_TOKEN_HERE b·∫±ng token th·∫≠t

// T·∫°o payload cho request
const data = JSON.stringify({
  status: status
});

// Log chi ti·∫øt request s·∫Øp g·ª≠i
console.log('üîÑ Chu·∫©n b·ªã g·ª≠i request...');
console.log(`üì¶ Payload: ${data}`);

// T·∫°o options cho request
const options = {
  hostname: 'localhost',
  port: 5000,
  path: `/api/appointment-update/${appointmentId}/status`,
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
    'Content-Length': data.length,
    'Authorization': token
  }
};

// Log th√¥ng tin request
console.log('üì° Request details:');
console.log(`URL: http://${options.hostname}:${options.port}${options.path}`);
console.log('Method:', options.method);
console.log('Headers:', JSON.stringify(options.headers, null, 2));

// T·∫°o request v√† x·ª≠ l√Ω response
const req = http.request(options, (res) => {
  console.log(`üîÑ Status Code: ${res.statusCode}`);
  console.log('üìÑ Headers:', res.headers);
  
  // Collect data chunks
  let responseData = '';
  res.on('data', (chunk) => {
    responseData += chunk;
  });
  
  // Process complete response
  res.on('end', () => {
    console.log('üìã Response body:');
    try {
      // Try to parse as JSON
      const parsedData = JSON.parse(responseData);
      console.log(JSON.stringify(parsedData, null, 2));
      
      // Log chi ti·∫øt n·∫øu c√≥ l·ªói
      if (!parsedData.success) {
        console.error('‚ùå Response indicates an error:', parsedData.message);
        
        // Log g·ª£i √Ω debug
        console.log('\nüîç G·ª£i √Ω debug:');
        console.log('1. Ki·ªÉm tra gi√° tr·ªã status ƒë√£ ƒë√∫ng ƒë·ªãnh d·∫°ng ch∆∞a (ch·ªØ hoa/th∆∞·ªùng)')
        console.log('2. Ki·ªÉm tra token c√≥ ƒë√∫ng v√† c√≤n h·∫°n kh√¥ng')
        console.log('3. Ki·ªÉm tra appointmentId c√≥ t·ªìn t·∫°i kh√¥ng')
        console.log('4. Ki·ªÉm tra user t·ª´ token c√≥ quy·ªÅn c·∫≠p nh·∫≠t kh√¥ng (c√≥ ph·∫£i coach kh√¥ng)')
      } else {
        console.log('‚úÖ Request successful!');
      }
    } catch (error) {
      // Non-JSON response
      console.log(responseData);
      console.error('‚ùå Failed to parse response as JSON:', error.message);
    }
  });
});

// Handle request errors
req.on('error', (error) => {
  console.error('‚ùå Request error:', error);
});

// Write data and end request
req.write(data);
req.end();

console.log('‚è≥ Waiting for response...');
