// Test script ƒë·ªÉ ki·ªÉm tra c√°c API ZaloPay
const axios = require('axios');

const BASE_URL = 'http://localhost:5000';

// Test data
const testData = {
  // Thay ƒë·ªïi transaction ID n√†y v·ªõi ID t·ª´ database c·ªßa b·∫°n
  transactionId: '250711_1000045624', // L·∫•y t·ª´ b·∫£ng payments ho·∫∑c payment_transactions
  userToken: 'YOUR_JWT_TOKEN_HERE' // L·∫•y t·ª´ localStorage sau khi login
};

async function testZaloPayAPIs() {
  console.log('=== Testing ZaloPay APIs ===\n');

  try {
    // Test 1: Query ZaloPay status
    console.log('1. Testing ZaloPay status query...');
    const statusResponse = await axios.get(
      `${BASE_URL}/api/payments/zalopay/status/${testData.transactionId}`,
      {
        headers: {
          'Authorization': `Bearer ${testData.userToken}`
        }
      }
    );
    console.log('‚úÖ Status Response:', statusResponse.data);
    console.log('');

    // Test 2: Manual update
    console.log('2. Testing manual update...');
    const updateResponse = await axios.post(
      `${BASE_URL}/api/payments/zalopay/manual-update/${testData.transactionId}`,
      {},
      {
        headers: {
          'Authorization': `Bearer ${testData.userToken}`
        }
      }
    );
    console.log('‚úÖ Update Response:', updateResponse.data);
    console.log('');

    // Test 3: Get payment by transaction ID
    console.log('3. Testing get payment by transaction ID...');
    const paymentResponse = await axios.get(
      `${BASE_URL}/api/payments/transaction/${testData.transactionId}`,
      {
        headers: {
          'Authorization': `Bearer ${testData.userToken}`
        }
      }
    );
    console.log('‚úÖ Payment Response:', paymentResponse.data);

  } catch (error) {
    if (error.response) {
      console.error('‚ùå API Error:', error.response.status, error.response.data);
    } else {
      console.error('‚ùå Request Error:', error.message);
    }
  }
}

// Instructions for running this test
console.log(`
üöÄ ZaloPay API Test Script

ƒê·ªÉ ch·∫°y test n√†y:
1. ƒê·∫£m b·∫£o server ƒëang ch·∫°y tr√™n port 5000
2. C·∫≠p nh·∫≠t transactionId v·ªõi ID th·ª±c t·ª´ database c·ªßa b·∫°n
3. L·∫•y JWT token t·ª´ localStorage sau khi login v√† c·∫≠p nh·∫≠t userToken
4. Ch·∫°y: node test-zalopay-apis.js

C√°c transaction IDs hi·ªán c√≥ trong database:
- Ki·ªÉm tra b·∫£ng payments ho·∫∑c payment_transactions ƒë·ªÉ l·∫•y transaction_id
- V√≠ d·ª•: 250711_1000045624, 250711_1000045625, v.v.

ƒê·ªÉ l·∫•y JWT token:
1. M·ªü browser, ƒëƒÉng nh·∫≠p v√†o ·ª©ng d·ª•ng
2. M·ªü Developer Tools (F12)
3. V√†o tab Application/Storage -> Local Storage
4. T√¨m key 'nosmoke_token' v√† copy value
`);

// Uncomment d√≤ng n√†y v√† c·∫≠p nh·∫≠t testData ƒë·ªÉ ch·∫°y test
// testZaloPayAPIs();
