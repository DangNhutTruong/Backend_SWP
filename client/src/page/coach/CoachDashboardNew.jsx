import React, { useState, useEffect } from 'react';
import { useAuth } from '../../context/AuthContext';
import { FaCalendarAlt, FaUsers, FaCheckCircle, FaClock, FaEye } from 'react-icons/fa';
import { getCoachAppointments, updateAppointmentStatus } from '../../utils/coachApiIntegration';
import '../../styles/CoachDashboardNew.css';

function CoachDashboardNew() {
  const { user } = useAuth();
  const [appointments, setAppointments] = useState([]);
  const [stats, setStats] = useState({
    total: 0,
    pending: 0,
    confirmed: 0,
    completed: 0
  });
  const [loading, setLoading] = useState(true);
  const [selectedAppointment, setSelectedAppointment] = useState(null);

  useEffect(() => {
    if (user && user.role === 'coach') {
      loadAppointments();
    }
  }, [user]);

  const loadAppointments = async () => {
    try {
      setLoading(true);
      console.log('üìã Loading coach appointments...');
      
      const response = await getCoachAppointments();
      console.log('üìã Response:', response);
      
      // Handle different response structures
      let appointmentsData = [];
      if (response) {
        if (response.data && Array.isArray(response.data)) {
          appointmentsData = response.data;
        } else if (Array.isArray(response)) {
          appointmentsData = response;
        } else if (response.success && response.data) {
          appointmentsData = Array.isArray(response.data) ? response.data : [];
        }
      }
      
      setAppointments(appointmentsData);
      
      // Calculate stats
      const stats = appointmentsData.reduce((acc, apt) => {
        acc.total += 1;
        if (apt.status === 'pending') acc.pending += 1;
        else if (apt.status === 'confirmed') acc.confirmed += 1;
        else if (apt.status === 'completed') acc.completed += 1;
        return acc;
      }, { total: 0, pending: 0, confirmed: 0, completed: 0 });
      
      setStats(stats);
      console.log('üìä Stats:', stats);
      
    } catch (error) {
      console.error('‚ùå Error loading appointments:', error);
      // Use fallback empty data
      setAppointments([]);
      setStats({ total: 0, pending: 0, confirmed: 0, completed: 0 });
    } finally {
      setLoading(false);
    }
  };

  const handleStatusUpdate = async (appointmentId, newStatus) => {
    try {
      console.log(`üîÑ Updating appointment ${appointmentId} to ${newStatus}`);
      
      await updateAppointmentStatus(appointmentId, newStatus);
      
      // Update local state
      setAppointments(prev => prev.map(apt => 
        apt.id === appointmentId ? { ...apt, status: newStatus } : apt
      ));
      
      // Reload to get fresh data
      loadAppointments();
      
      console.log('‚úÖ Status updated successfully');
    } catch (error) {
      console.error('‚ùå Error updating status:', error);
    }
  };

  const formatDate = (dateString) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('vi-VN', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit'
    });
  };

  const formatTime = (dateString) => {
    const date = new Date(dateString);
    return date.toLocaleTimeString('vi-VN', {
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'pending': return '#ffa726';
      case 'confirmed': return '#42a5f5';
      case 'completed': return '#66bb6a';
      case 'cancelled': return '#ef5350';
      default: return '#757575';
    }
  };

  const getStatusText = (status) => {
    switch (status) {
      case 'pending': return 'Ch·ªù x√°c nh·∫≠n';
      case 'confirmed': return 'ƒê√£ x√°c nh·∫≠n';
      case 'completed': return 'Ho√†n th√†nh';
      case 'cancelled': return 'ƒê√£ h·ªßy';
      default: return status;
    }
  };

  if (!user || user.role !== 'coach') {
    return (
      <div className="coach-dashboard-new">
        <div className="access-denied">
          <h2>Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p</h2>
          <p>B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p v·ªõi t√†i kho·∫£n coach ƒë·ªÉ truy c·∫≠p trang n√†y.</p>
        </div>
      </div>
    );
  }

  return (
    <div className="coach-dashboard-new">
      <div className="dashboard-header">
        <h1>Dashboard Coach</h1>
        <p>Ch√†o m·ª´ng, {user.full_name || user.username}!</p>
      </div>

      {/* Stats Cards */}
      <div className="stats-grid">
        <div className="stat-card">
          <div className="stat-icon">
            <FaCalendarAlt />
          </div>
          <div className="stat-info">
            <h3>{stats.total}</h3>
            <p>T·ªïng l·ªãch h·∫πn</p>
          </div>
        </div>
        
        <div className="stat-card">
          <div className="stat-icon">
            <FaClock />
          </div>
          <div className="stat-info">
            <h3>{stats.pending}</h3>
            <p>Ch·ªù x√°c nh·∫≠n</p>
          </div>
        </div>
        
        <div className="stat-card">
          <div className="stat-icon">
            <FaCheckCircle />
          </div>
          <div className="stat-info">
            <h3>{stats.confirmed}</h3>
            <p>ƒê√£ x√°c nh·∫≠n</p>
          </div>
        </div>
        
        <div className="stat-card">
          <div className="stat-icon">
            <FaUsers />
          </div>
          <div className="stat-info">
            <h3>{stats.completed}</h3>
            <p>Ho√†n th√†nh</p>
          </div>
        </div>
      </div>

      {/* Recent Appointments */}
      <div className="appointments-section">
        <h2>L·ªãch h·∫πn g·∫ßn ƒë√¢y</h2>
        
        {loading ? (
          <div className="loading">
            <p>ƒêang t·∫£i...</p>
          </div>
        ) : appointments.length === 0 ? (
          <div className="no-appointments">
            <p>Ch∆∞a c√≥ l·ªãch h·∫πn n√†o</p>
            <small>Khi c√≥ ng∆∞·ªùi ƒë·∫∑t l·ªãch v·ªõi b·∫°n, n√≥ s·∫Ω hi·ªÉn th·ªã ·ªü ƒë√¢y</small>
          </div>
        ) : (
          <div className="appointments-list">
            {appointments.slice(0, 10).map((appointment) => (
              <div key={appointment.id} className="appointment-card">
                <div className="appointment-info">
                  <div className="client-info">
                    <h4>{appointment.user_name || 'Unknown User'}</h4>
                    <p>{appointment.user_email}</p>
                  </div>
                  
                  <div className="appointment-details">
                    <p><strong>Ng√†y:</strong> {formatDate(appointment.appointment_time)}</p>
                    <p><strong>Gi·ªù:</strong> {formatTime(appointment.appointment_time)}</p>
                    <p><strong>Th·ªùi l∆∞·ª£ng:</strong> {appointment.duration_minutes || 120} ph√∫t</p>
                    {appointment.notes && (
                      <p><strong>Ghi ch√∫:</strong> {appointment.notes}</p>
                    )}
                  </div>
                  
                  <div className="appointment-status">
                    <span 
                      className="status-badge" 
                      style={{ backgroundColor: getStatusColor(appointment.status) }}
                    >
                      {getStatusText(appointment.status)}
                    </span>
                  </div>
                </div>
                
                <div className="appointment-actions">
                  {appointment.status === 'pending' && (
                    <div className="action-buttons">
                      <button 
                        className="btn-confirm"
                        onClick={() => handleStatusUpdate(appointment.id, 'confirmed')}
                      >
                        X√°c nh·∫≠n
                      </button>
                      <button 
                        className="btn-cancel"
                        onClick={() => handleStatusUpdate(appointment.id, 'cancelled')}
                      >
                        H·ªßy
                      </button>
                    </div>
                  )}
                  
                  {appointment.status === 'confirmed' && (
                    <div className="action-buttons">
                      <button 
                        className="btn-complete"
                        onClick={() => handleStatusUpdate(appointment.id, 'completed')}
                      >
                        Ho√†n th√†nh
                      </button>
                    </div>
                  )}
                  
                  <button 
                    className="btn-view"
                    onClick={() => setSelectedAppointment(appointment)}
                  >
                    <FaEye /> Chi ti·∫øt
                  </button>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>

      {/* Appointment Detail Modal */}
      {selectedAppointment && (
        <div className="modal-overlay" onClick={() => setSelectedAppointment(null)}>
          <div className="modal-content" onClick={(e) => e.stopPropagation()}>
            <div className="modal-header">
              <h3>Chi ti·∫øt l·ªãch h·∫πn</h3>
              <button 
                className="modal-close"
                onClick={() => setSelectedAppointment(null)}
              >
                √ó
              </button>
            </div>
            
            <div className="modal-body">
              <div className="detail-row">
                <strong>Kh√°ch h√†ng:</strong> {selectedAppointment.user_name}
              </div>
              <div className="detail-row">
                <strong>Email:</strong> {selectedAppointment.user_email}
              </div>
              <div className="detail-row">
                <strong>ƒêi·ªán tho·∫°i:</strong> {selectedAppointment.user_phone || 'Ch∆∞a c√≥'}
              </div>
              <div className="detail-row">
                <strong>Ng√†y gi·ªù:</strong> {formatDate(selectedAppointment.appointment_time)} l√∫c {formatTime(selectedAppointment.appointment_time)}
              </div>
              <div className="detail-row">
                <strong>Th·ªùi l∆∞·ª£ng:</strong> {selectedAppointment.duration_minutes || 120} ph√∫t
              </div>
              <div className="detail-row">
                <strong>Tr·∫°ng th√°i:</strong> 
                <span 
                  className="status-badge" 
                  style={{ backgroundColor: getStatusColor(selectedAppointment.status) }}
                >
                  {getStatusText(selectedAppointment.status)}
                </span>
              </div>
              {selectedAppointment.notes && (
                <div className="detail-row">
                  <strong>Ghi ch√∫:</strong> {selectedAppointment.notes}
                </div>
              )}
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

export default CoachDashboardNew;
