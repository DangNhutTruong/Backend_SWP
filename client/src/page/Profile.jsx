import React, { useState, useEffect } from "react";
import {
  FaUserAlt,
  FaChartLine,
  FaCalendarAlt,
  FaHeartbeat,
  FaTrophy,
  FaComment,
  FaHeart,
  FaCheckCircle,
  FaExclamationCircle,
  FaCog,
  FaBell,
  FaCrown,
  FaTimes,
  FaSignOutAlt,
  FaEnvelope,
  FaPhone,
  FaMapMarkerAlt,
  FaTransgender,
  FaLock,
  FaEdit,  FaSave,
  FaImage,
  FaCheck,
  FaClipboardList,
  FaArrowRight,
} from "react-icons/fa";

import "./Profile.css";
import "./membership.css";
import { useAuth } from "../context/AuthContext";
import { Link, useNavigate } from "react-router-dom";
import AppointmentList from "../components/AppointmentList";
import QuitPlanDisplay from "../components/QuitPlanDisplay";
import DailyCheckin from "../components/DailyCheckin";
import UserProfile from "./User.jsx";
import Achievement from "../components/Achievement.jsx";
import CollapsibleSection from "../components/CollapsibleSection.jsx";
import HealthProfile from "../components/HealthProfile.jsx";
import ProfilePlan from "../components/ProfilePlan.jsx";
import "../styles/CollapsibleSection.css";
import "../styles/HealthProfile.css";
import "../styles/ProfilePlan.css";
import "../styles/ModalStyles.css";
import "../styles/JournalEntry.css";
import "../styles/ProgressTracker.css";
import CoachMessaging from "./coach/CoachMessaging.jsx";
import { getUserActivePlan } from "../services/quitPlanService";
import achievementAwardService from "../services/achievementAwardService";

// Component Modal ch·ªânh s·ª≠a k·∫ø ho·∫°ch
function PlanEditModal({ isOpen, onClose, currentPlan, activePlan, onSave }) {
  // Khi modal m·ªü, th√™m class v√†o body
  useEffect(() => {
    if (isOpen) {
      document.body.classList.add('modal-open');
    } else {
      document.body.classList.remove('modal-open');
    }
    
    // Cleanup khi component unmount
    return () => {
      document.body.classList.remove('modal-open');
    };
  }, [isOpen]);
    const [planData, setPlanData] = useState({
    name: activePlan?.name || currentPlan.name || "K·∫ø ho·∫°ch cai thu·ªëc c√° nh√¢n",
    strategy: activePlan?.strategy || currentPlan.strategy || "Cai thu·ªëc ho√†n to√†n v√† duy tr√¨ l√¢u d√†i",
    startDate: (() => {
      try {
        if (activePlan?.start_date) {
          const date = new Date(activePlan.start_date);
          if (!isNaN(date.getTime())) {
            return date.toISOString().split("T")[0];
          }
        }
        
        if (currentPlan?.startDate) {
          // Ki·ªÉm tra n·∫øu startDate l√† ƒë·ªãnh d·∫°ng DD/MM/YYYY
          if (typeof currentPlan.startDate === 'string' && currentPlan.startDate.includes('/')) {
            const parts = currentPlan.startDate.split('/');
            if (parts.length === 3) {
              // N·∫øu ƒë·ªãnh d·∫°ng l√† DD/MM/YYYY
              const day = parseInt(parts[0], 10);
              const month = parseInt(parts[1], 10) - 1; // Tr·ª´ 1 v√¨ th√°ng trong JS b·∫Øt ƒë·∫ßu t·ª´ 0
              const year = parseInt(parts[2], 10);
              const formattedDate = new Date(year, month, day);
              if (!isNaN(formattedDate.getTime())) {
                return formattedDate.toISOString().split("T")[0];
              }
            }
          }
        }
        
        // M·∫∑c ƒë·ªãnh tr·∫£ v·ªÅ ng√†y hi·ªán t·∫°i n·∫øu kh√¥ng c√≥ ng√†y h·ª£p l·ªá kh√°c
        return new Date().toISOString().split("T")[0];
      } catch (error) {
        console.error("L·ªói khi x·ª≠ l√Ω ng√†y:", error);
        return new Date().toISOString().split("T")[0];
      }
    })(),
    goal: activePlan?.goal || currentPlan.goal || "Cai thu·ªëc ho√†n to√†n v√† duy tr√¨ l√¢u d√†i",
  });

  const handleChange = (e) => {
    const { name, value } = e.target;
    setPlanData((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    onSave(planData);
    onClose();
  };
  if (!isOpen) return null;
  // B·∫Øt s·ª± ki·ªán click tr√™n overlay ƒë·ªÉ ƒë√≥ng modal
  const handleOverlayClick = (e) => {
    // Check if the click was directly on the overlay (not on its children)
    if (e.target === e.currentTarget) {
      onClose();
    }
  };

  return (
    <div className="modal-overlay" onClick={handleOverlayClick}>
      <div className="modal-content">
        <div className="modal-header">
          <h2>ƒêi·ªÅu ch·ªânh k·∫ø ho·∫°ch cai thu·ªëc</h2>
          <button className="close-button" onClick={onClose}>
            <FaTimes />
          </button>
        </div>        <form onSubmit={handleSubmit}>
          <div className="form-group">
            <label>T√™n k·∫ø ho·∫°ch</label>
            <input
              type="text"
              name="name"
              value={planData.name}
              onChange={handleChange}
              className="form-control"
            />
          </div>
          
          <div className="form-group">
            <label>Ph∆∞∆°ng ph√°p cai thu·ªëc</label>
            <select
              name="strategy"
              value={planData.strategy}
              onChange={handleChange}
              className="form-control"
            >
              <option value="Cai thu·ªëc ho√†n to√†n v√† duy tr√¨ l√¢u d√†i">
                Cai thu·ªëc ho√†n to√†n
              </option>
              <option value="Gi·∫£m d·∫ßn s·ªë ƒëi·∫øu thu·ªëc">Gi·∫£m d·∫ßn s·ªë ƒëi·∫øu thu·ªëc</option>
              <option value="S·ª≠ d·ª•ng s·∫£n ph·∫©m thay th·∫ø nicotine">
                S·ª≠ d·ª•ng s·∫£n ph·∫©m thay th·∫ø nicotine
              </option>
            </select>
          </div>

          <div className="form-group">
            <label>Ng√†y b·∫Øt ƒë·∫ßu</label>
            <input
              type="date"
              name="startDate"
              value={planData.startDate}
              onChange={handleChange}
              className="form-control"
            />
          </div>

          <div className="form-group">
            <label>M·ª•c ti√™u</label>
            <textarea
              name="goal"
              value={planData.goal}
              onChange={handleChange}
              rows="3"
              className="form-control"
            ></textarea>
          </div>

          <div className="form-actions">
            <button type="button" className="cancel-btn" onClick={onClose}>
              H·ªßy
            </button>
            <button type="submit" className="save-btn">
              L∆∞u thay ƒë·ªïi
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}

// Component c·∫≠p nh·∫≠t h√†ng ng√†y
export default function ProfilePage() {
  const [activeTab, setActiveTab] = useState("profile");
  const [isPlanEditOpen, setIsPlanEditOpen] = useState(false);
  const { user, logout } = useAuth();
  const navigate = useNavigate();
  const notificationCount = 0; // n·∫øu b·∫°n c√≥ bi·∫øn n√†y th√¨ replace theo ƒë√∫ng gi√° tr·ªã  
  
  // Handle logout with navigation
  const handleLogout = () => {
    logout();
    navigate('/login');
  };// Check if redirected from appointment booking
  useEffect(() => {
    const savedTab = localStorage.getItem('activeProfileTab');
    if (savedTab) {
      setActiveTab(savedTab);
      // Clear the saved tab after using it
      localStorage.removeItem('activeProfileTab');
      
      // Scroll to the top of the content area
      const profileContent = document.querySelector('.profile-content');
      if (profileContent) {
        window.scrollTo({ top: profileContent.offsetTop, behavior: 'smooth' });
      }
    }
    
    // Check for hash in URL to navigate to specific section
    if (window.location.hash) {
      const hash = window.location.hash.substring(1); // remove the # symbol
      if (hash === 'achievements' || hash === 'profile' || hash === 'appointments' || hash === 'journal' || hash === 'membership' || hash === 'health') {
        setActiveTab(hash === 'health' ? 'profile' : hash);
        
        // Scroll to the top of the content area
        window.scrollTo({ top: 0, behavior: 'auto' });
        
        // Use setTimeout to ensure the DOM has updated after the tab change
        setTimeout(() => {
          const profileContent = document.querySelector('.profile-content');
          if (profileContent) {
            window.scrollTo({ top: profileContent.offsetTop, behavior: 'auto' });
          }
          
          // If it's the health section, scroll to that section
          if (hash === 'health') {
            setTimeout(() => {
              const healthSection = document.querySelector('.health-section');
              if (healthSection) {
                healthSection.scrollIntoView({ behavior: 'smooth' });
              }
            }, 100);
          }
        }, 100);
      }
    }  }, []);
  
  const [activePlan, setActivePlan] = useState(null);

  // Load active plan from database with fallback to localStorage
  const loadActivePlanFromDatabase = async () => {
    try {
      console.log("üîç PROFILE: ƒêang load activePlan t·ª´ database...");
      const response = await getUserActivePlan();
      
      if (response.success && response.data) {
        console.log("‚úÖ PROFILE: Load th√†nh c√¥ng t·ª´ database:", response.data);
        setActivePlan(response.data);
        return;
      } else {
        console.warn("üî∂ PROFILE: API kh√¥ng th√†nh c√¥ng, fallback v·ªÅ localStorage");
        loadFromLocalStorage();
      }
    } catch (error) {
      console.error("‚ùå PROFILE: L·ªói khi load t·ª´ database:", error);
      loadFromLocalStorage();
    }
  };

  // Fallback function to load from localStorage
  const loadFromLocalStorage = () => {
    try {
      // Ki·ªÉm tra k·∫ø ho·∫°ch ƒë√£ ho√†n th√†nh
      const completionData = localStorage.getItem('quitPlanCompletion');
      if (completionData) {
        const parsedData = JSON.parse(completionData);
        setActivePlan(parsedData.userPlan);
        return;
      }

      // N·∫øu ch∆∞a ho√†n th√†nh, t·∫£i k·∫ø ho·∫°ch ƒëang th·ª±c hi·ªán
      const savedPlan = localStorage.getItem('activePlan');
      if (savedPlan) {
        const parsedPlan = JSON.parse(savedPlan);
        setActivePlan(parsedPlan);
      }
    } catch (error) {
      console.error('‚ùå PROFILE: L·ªói khi ƒë·ªçc localStorage:', error);
    }
  };

  useEffect(() => {
    loadActivePlanFromDatabase();
  }, []);

  // T√≠nh to√°n c√°c gi√° tr·ªã t·ª´ activePlan database
  const calculateSavings = () => {
    if (!user) return { days: 0, money: 0, cigarettes: 0 };
    if (!activePlan?.start_date) return { days: 0, money: 0, cigarettes: 0 };

    let startDate;
    try {
      startDate = new Date(activePlan.start_date);
      if (isNaN(startDate.getTime())) {
        console.warn("üî∂ PROFILE: Ng√†y b·∫Øt ƒë·∫ßu t·ª´ database kh√¥ng h·ª£p l·ªá:", activePlan.start_date);
        return { days: 0, money: 0, cigarettes: 0 };
      }
    } catch (error) {
      console.error("‚ùå PROFILE: L·ªói parse ng√†y b·∫Øt ƒë·∫ßu:", error);
      return { days: 0, money: 0, cigarettes: 0 };
    }

    const currentDate = new Date();
    const timeDiff = currentDate.getTime() - startDate.getTime();
    const daysDiff = Math.max(0, Math.ceil(timeDiff / (1000 * 3600 * 24)));

    // L·∫•y d·ªØ li·ªáu t·ª´ localStorage (c√πng ngu·ªìn v·ªõi Progress page) 
    let savedMoney = 0;
    let savedCigarettes = 0;

    try {
      // ∆Øu ti√™n l·∫•y t·ª´ dashboardStats (c√πng ngu·ªìn v·ªõi Progress)
      const dashboardStats = localStorage.getItem('dashboardStats');
      if (dashboardStats) {
        const stats = JSON.parse(dashboardStats);
        savedMoney = stats.savedMoney || 0;
        savedCigarettes = stats.savedCigarettes || 0;
        console.log("üí∞ PROFILE: S·ª≠ d·ª•ng d·ªØ li·ªáu t·ª´ dashboardStats:", { savedMoney, savedCigarettes });
      } else {
        // Fallback: t√≠nh to√°n ƒë∆°n gi·∫£n
        const cigarettesPerDay = activePlan.initial_cigarettes || 30;
        const pricePerPack = 50000;
        const pricePerCigarette = pricePerPack / 20; // 2500ƒë/ƒëi·∫øu
        savedCigarettes = daysDiff * cigarettesPerDay;
        savedMoney = savedCigarettes * pricePerCigarette;
        console.log("üí∞ PROFILE: Fallback calculation:", { daysDiff, cigarettesPerDay, savedCigarettes, savedMoney });
      }
    } catch (error) {
      console.error("‚ùå PROFILE: L·ªói khi ƒë·ªçc dashboardStats:", error);
      // Fallback calculation
      const cigarettesPerDay = activePlan.initial_cigarettes || 30;
      savedCigarettes = daysDiff * cigarettesPerDay;
      savedMoney = savedCigarettes * 2500; // 2500ƒë/ƒëi·∫øu
    }

    console.log("üí∞ PROFILE: Final calculation:", {
      daysDiff,
      savedMoney,
      savedCigarettes,
      source: 'dashboardStats or fallback'
    });

    return {
      days: daysDiff,
      money: savedMoney,
      cigarettes: savedCigarettes
    };
  };
  // ƒê·∫£m b·∫£o gi√° tr·ªã savings ƒë∆∞·ª£c t√≠nh sau khi activePlan ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t
  const savings = calculateSavings();
  
  // Check v√† award huy hi·ªáu khi savings thay ƒë·ªïi
  useEffect(() => {
    const checkAchievementsForProgress = async () => {
      if (user && user.id && savings.days > 0) {
        try {
          console.log('üèÜ PROFILE: Checking achievements for progress:', savings);
          const awardResult = await achievementAwardService.checkAndAwardAchievements(savings);
          
          if (awardResult.success && awardResult.newAchievements.length > 0) {
            console.log('üéâ PROFILE: New achievements awarded:', awardResult.newAchievements);
            achievementAwardService.showAchievementNotification(awardResult.newAchievements);
          }
        } catch (error) {
          console.error('‚ùå PROFILE: Error checking achievements:', error);
        }
      }
    };

    checkAchievementsForProgress();
  }, [savings.days, savings.money, user?.id]); // Trigger khi savings thay ƒë·ªïi
  
  // Debug: Ki·ªÉm tra gi√° tr·ªã savings ƒë·ªÉ t√≠nh huy hi·ªáu
  console.log('üèÜ ACHIEVEMENT DEBUG - savings.days:', savings.days);
  console.log('üèÜ ACHIEVEMENT DEBUG - savings.money:', savings.money);
  console.log('üèÜ ACHIEVEMENT DEBUG - activePlan?.start_date:', activePlan?.start_date);
  console.log('üîç FULL activePlan DEBUG:', activePlan);
  // H√†m ƒë·ªãnh d·∫°ng ng√†y th√°ng
  const formatDate = (dateString) => {
    try {
      if (!dateString) return "01/05/2023"; // Default date
      
      // X·ª≠ l√Ω ƒë·ªãnh d·∫°ng DD/MM/YYYY
      if (typeof dateString === 'string' && dateString.includes('/')) {
        const parts = dateString.split('/');
        if (parts.length === 3) {
          // ∆Øu ti√™n ƒë·ªÉ ƒë·ªãnh d·∫°ng hi·ªÉn th·ªã VN
          return dateString;
        }
      }
      
      const date = new Date(dateString);
      if (isNaN(date.getTime())) {
        console.warn("Ng√†y kh√¥ng h·ª£p l·ªá:", dateString);
        return "01/05/2023";
      }
      
      return date.toLocaleDateString("vi-VN");
    } catch (error) {
      console.error("L·ªói khi ƒë·ªãnh d·∫°ng ng√†y:", error);
      return "01/05/2023";
    }
  };
    // D·ªØ li·ªáu ng∆∞·ªùi d√πng m·∫´u - ch·ªâ s·ª≠ d·ª•ng cho c√°c gi√° tr·ªã kh√¥ng c√≥ trong user
  const userData = {
    ...user,
    avatar: user?.avatar || "/image/hero/quit-smoking-2.png",
    daysWithoutSmoking: savings.days,
    moneySaved: savings.money,
    pointsEarned: savings.cigarettes,
    startDate: activePlan?.start_date ? formatDate(activePlan.start_date) : formatDate(user?.startDate),
    cigarettesPerDay: activePlan?.initial_cigarettes || user?.cigarettesPerDay || 20,
    costPerDay:
      (user?.costPerPack / user?.cigarettesPerPack) * (activePlan?.initial_cigarettes || user?.cigarettesPerDay || 20) ||
      30000,    yearsOfSmoking: 8,
    fagerstromScore: "8/10",
    // Kh√¥ng s·ª≠ d·ª•ng healthImprovements c·ª©ng ·ªü ƒë√¢y n·ªØa,
    // HealthProfile s·∫Ω t·ª± t·∫°o t·ª´ activePlan
    milestones: activePlan?.start_date ? [
      {
        id: 1,
        name: "Chu·∫©n b·ªã cai thu·ªëc",
        date: new Date(
          new Date(activePlan.start_date).getTime() - 86400000
        ).toLocaleDateString("vi-VN"),
        completed: true,
      },
      {
        id: 2,
        name: "Ng√†y ƒë·∫ßu ti√™n kh√¥ng h√∫t thu·ªëc",
        date: new Date(activePlan.start_date).toLocaleDateString("vi-VN"),
        completed: savings.days >= 1,
      },
      {
        id: 3,
        name: "Tu·∫ßn ƒë·∫ßu ti√™n kh√¥ng h√∫t",
        date: new Date(
          new Date(activePlan.start_date).getTime() + 7 * 86400000
        ).toLocaleDateString("vi-VN"),
        completed: savings.days >= 7,
      },
      {
        id: 4,
        name: "Duy tr√¨ 3 th√°ng kh√¥ng h√∫t thu·ªëc",
        progress: `${Math.min(savings.days, 90)}/90 ng√†y`,
        completed: savings.days >= 90,
      },
    ] : [ // Tr∆∞·ªùng h·ª£p kh√¥ng c√≥ k·∫ø ho·∫°ch cai thu·ªëc
      {
        id: 1,
        name: "Chu·∫©n b·ªã cai thu·ªëc",
        date: "Ch∆∞a b·∫Øt ƒë·∫ßu",
        completed: false,
      },
      {
        id: 2, 
        name: "Ng√†y ƒë·∫ßu ti√™n kh√¥ng h√∫t thu·ªëc",
        date: "Ch∆∞a b·∫Øt ƒë·∫ßu",
        completed: false,
      },
      {
        id: 3,
        name: "Tu·∫ßn ƒë·∫ßu ti√™n kh√¥ng h√∫t thu·ªëc",
        date: "Ch∆∞a b·∫Øt ƒë·∫ßu",
        completed: false,
      },
      {
        id: 4,
        name: "Duy tr√¨ 3 th√°ng kh√¥ng h√∫t thu·ªëc",
        progress: "0/90 ng√†y",
        completed: false,
      },
    ],
    achievements: [
      // === HUY HI·ªÜU TH·ªúI GIAN ===
      {
        id: 1,
        name: "24 gi·ªù ƒë·∫ßu ti√™n",
        description: "Kh√¥ng h√∫t thu·ªëc trong 24 gi·ªù ƒë·∫ßu ti√™n",
        icon: "‚≠ê",
        category: "time",
        targetDays: 1,
        completed: savings.days >= 1,
        progress: Math.min(savings.days, 1),
        progressText: savings.days >= 1 ? "Ho√†n th√†nh" : `${savings.days}/1 ng√†y`,
        reward: "Oxy trong m√°u b·∫Øt ƒë·∫ßu tƒÉng",
        unlocked: true // Lu√¥n true v√¨ ch·ªâ c√≥ 2 tr·∫°ng th√°i: completed ho·∫∑c locked
      },
      {
        id: 2,
        name: "1 tu·∫ßn kh√¥ng h√∫t",
        description: "Ho√†n th√†nh 1 tu·∫ßn kh√¥ng h√∫t thu·ªëc",
        icon: "üèÖ", 
        category: "time",
        targetDays: 7,
        completed: savings.days >= 7,
        progress: Math.min(savings.days, 7),
        progressText: savings.days >= 7 ? "Ho√†n th√†nh" : `${savings.days}/7 ng√†y`,
        reward: "V·ªã gi√°c v√† kh·ª©u gi√°c c·∫£i thi·ªán",
        unlocked: true
      },
      {
        id: 3,
        name: "2 tu·∫ßn kh√¥ng h√∫t",
        description: "Ho√†n th√†nh 2 tu·∫ßn kh√¥ng h√∫t thu·ªëc", 
        icon: "üèÜ",
        category: "time",
        targetDays: 14,
        completed: savings.days >= 14,
        progress: Math.min(savings.days, 14),
        progressText: savings.days >= 14 ? "Ho√†n th√†nh" : `${savings.days}/14 ng√†y`,
        reward: "L∆∞u th√¥ng m√°u c·∫£i thi·ªán ƒë√°ng k·ªÉ",
        unlocked: true
      },
      {
        id: 4,
        name: "1 th√°ng kh√¥ng h√∫t",
        description: "Ho√†n th√†nh 1 th√°ng kh√¥ng h√∫t thu·ªëc",
        icon: "üëë",
        category: "time", 
        targetDays: 30,
        completed: savings.days >= 30,
        progress: Math.min(savings.days, 30),
        progressText: savings.days >= 30 ? "Ho√†n th√†nh" : `${savings.days}/30 ng√†y`,
        reward: "Ch·ª©c nƒÉng ph·ªïi c·∫£i thi·ªán 30%",
        unlocked: true
      },
      {
        id: 5,
        name: "3 th√°ng kh√¥ng h√∫t",
        description: "Ho√†n th√†nh 3 th√°ng kh√¥ng h√∫t thu·ªëc",
        icon: "üíé",
        category: "time",
        targetDays: 90,
        completed: savings.days >= 90,
        progress: Math.min(savings.days, 90),
        progressText: savings.days >= 90 ? "Ho√†n th√†nh" : `${savings.days}/90 ng√†y`,
        reward: "Nguy c∆° ƒëau tim gi·∫£m ƒë√°ng k·ªÉ",
        unlocked: true
      },
      {
        id: 6,
        name: "6 th√°ng kh√¥ng h√∫t",
        description: "Ho√†n th√†nh 6 th√°ng kh√¥ng h√∫t thu·ªëc",
        icon: "üíç",
        category: "time",
        targetDays: 180,
        completed: savings.days >= 180,
        progress: Math.min(savings.days, 180),
        progressText: savings.days >= 180 ? "Ho√†n th√†nh" : `${savings.days}/180 ng√†y`,
        reward: "Ch·ª©c nƒÉng ph·ªïi ph·ª•c h·ªìi 50%",
        unlocked: true
      },
      {
        id: 7,
        name: "1 nƒÉm kh√¥ng h√∫t",
        description: "Ho√†n th√†nh 1 nƒÉm kh√¥ng h√∫t thu·ªëc",
        icon: "üéØ",
        category: "time",
        targetDays: 365,
        completed: savings.days >= 365,
        progress: Math.min(savings.days, 365),
        progressText: savings.days >= 365 ? "Ho√†n th√†nh" : `${savings.days}/365 ng√†y`,
        reward: "Nguy c∆° b·ªánh tim gi·∫£m 50%",
        unlocked: true
      },

      // === HUY HI·ªÜU S·ª®C KH·ªéE ===
      {
        id: 8,
        name: "Huy·∫øt √°p ·ªïn ƒë·ªãnh",
        description: "Huy·∫øt √°p tr·ªü v·ªÅ b√¨nh th∆∞·ªùng sau 20 ph√∫t",
        icon: "‚ù§Ô∏è",
        category: "health",
        completed: savings.days >= 1,
        progressText: savings.days >= 1 ? "Ho√†n th√†nh" : "Ch∆∞a ƒë·∫°t",
        reward: "Huy·∫øt √°p v√† nh·ªãp tim b√¨nh th∆∞·ªùng",
        unlocked: true
      },
      {
        id: 9,
        name: "Ph·ªïi kh·ªèe m·∫°nh",
        description: "Ch·ª©c nƒÉng ph·ªïi c·∫£i thi·ªán ƒë√°ng k·ªÉ",
        icon: "ü´Å",
        category: "health", 
        completed: savings.days >= 14,
        progressText: savings.days >= 14 ? "Ho√†n th√†nh" : "Ch∆∞a ƒë·∫°t",
        reward: "Kh·∫£ nƒÉng th·ªÉ thao tƒÉng l√™n",
        unlocked: true
      },
      {
        id: 10,
        name: "N√£o b·ªô t·ªânh t√°o",
        description: "N√£o b·ªô nh·∫≠n ƒë·ªß oxy, t∆∞ duy r√µ r√†ng",
        icon: "üß†",
        category: "health",
        completed: savings.days >= 30,
        progressText: savings.days >= 30 ? "Ho√†n th√†nh" : "Ch∆∞a ƒë·∫°t", 
        reward: "Tr√≠ nh·ªõ v√† t·∫≠p trung t·ªët h∆°n",
        unlocked: true
      },

      // === HUY HI·ªÜU TI·∫æT KI·ªÜM ===
      {
        id: 11,
        name: "Ti·∫øt ki·ªám ƒë·∫ßu ti√™n",
        description: "Ti·∫øt ki·ªám ƒë∆∞·ª£c 50.000 VND",
        icon: "ÔøΩ",
        category: "money",
        completed: savings.money >= 50000,
        progressText: savings.money >= 50000 ? "Ho√†n th√†nh" : `${(savings.money).toLocaleString('vi-VN')}/50.000 VND`,
        reward: "C√≥ th·ªÉ mua m·ªôt b·ªØa ƒÉn ngon",
        unlocked: true
      },
      {
        id: 12,
        name: "Nh√† ƒë·∫ßu t∆∞ nh·ªè",
        description: "Ti·∫øt ki·ªám ƒë∆∞·ª£c 500.000 VND",
        icon: "üíµ",
        category: "money",
        completed: savings.money >= 500000,
        progressText: savings.money >= 500000 ? "Ho√†n th√†nh" : `${(savings.money).toLocaleString('vi-VN')}/500.000 VND`,
        reward: "C√≥ th·ªÉ mua qu·∫ßn √°o m·ªõi",
        unlocked: true
      },
      {
        id: 13,
        name: "Tri·ªáu ph√∫ nh·ªè",
        description: "Ti·∫øt ki·ªám ƒë∆∞·ª£c 1.000.000 VND",
        icon: "üíé",
        category: "money",
        completed: savings.money >= 1000000,
        progressText: savings.money >= 1000000 ? "Ho√†n th√†nh" : `${(savings.money).toLocaleString('vi-VN')}/1.000.000 VND`,
        reward: "C√≥ th·ªÉ ƒëi du l·ªãch ng·∫Øn ng√†y",
        unlocked: true
      }
    ],
    journalEntries: [
      {
        id: 1,
        day: savings.days,
        date: "H√¥m nay",
        mood: "B√¨nh th∆∞·ªùng",
        symptoms: "Kh√¥ng c√≥ tri·ªáu ch·ª©ng",
        notes: '"H√¥m nay l√† m·ªôt ng√†y b√¨nh th∆∞·ªùng, kh√¥ng c√≥ c·∫£m gi√°c th√®m thu·ªëc."',
      },
      {
        id: 2,
        day: savings.days - 1,
        date: "H√¥m qua",
        mood: "T·ªët",
        symptoms: "Kh√¥ng c√≥ tri·ªáu ch·ª©ng",
        notes:
          '"C·∫£m th·∫•y r·∫•t t·ª± h√†o v·ªÅ b·∫£n th√¢n, h√¥m nay t√¥i ƒë√£ t·ª´ ch·ªëi m·ªôt ƒëi·∫øu thu·ªëc t·ª´ ƒë·ªìng nghi·ªáp."',
      },
    ],
  };
  // X·ª≠ l√Ω c·∫≠p nh·∫≠t h√¥m nay
  const handleUpdateToday = (updateData) => {
    console.log("C·∫≠p nh·∫≠t m·ªõi:", updateData);
    alert("ƒê√£ l∆∞u c·∫≠p nh·∫≠t c·ªßa b·∫°n!");
  };  // X·ª≠ l√Ω l∆∞u k·∫ø ho·∫°ch
  const handleSavePlan = (planData) => {
    try {
      console.log("üéØ PROFILE: ƒêang l∆∞u k·∫ø ho·∫°ch cai thu·ªëc...", planData);
      // L·∫•y k·∫ø ho·∫°ch c√†i ƒë·∫∑t hi·ªán t·∫°i t·ª´ localStorage
      let currentPlanData;
      const completionData = localStorage.getItem('quitPlanCompletion');
      if (completionData) {
        const parsedData = JSON.parse(completionData);
        currentPlanData = parsedData.userPlan;
      } else {
        const savedPlan = localStorage.getItem('activePlan');
        if (savedPlan) {
          currentPlanData = JSON.parse(savedPlan);
        }
      }
      
      // Ki·ªÉm tra v√† chu·∫©n h√≥a ƒë·ªãnh d·∫°ng ng√†y th√°ng
      let validStartDate = planData.startDate;
      try {
        // ƒê·∫£m b·∫£o r·∫±ng startDate l√† m·ªôt chu·ªói ng√†y th√°ng h·ª£p l·ªá
        const date = new Date(planData.startDate);
        if (!isNaN(date.getTime())) {
          // L∆∞u tr·ªØ theo ƒë·ªãnh d·∫°ng ISO ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh nh·∫•t qu√°n
          validStartDate = date.toISOString();
        } else {
          console.error("Ng√†y kh√¥ng h·ª£p l·ªá:", planData.startDate);
          validStartDate = new Date().toISOString();
        }
      } catch (error) {
        console.error("L·ªói khi x·ª≠ l√Ω ng√†y:", error);
        validStartDate = new Date().toISOString();
      }
      
      // C·∫≠p nh·∫≠t th√¥ng tin m·ªõi v√†o k·∫ø ho·∫°ch
      if (currentPlanData) {        const updatedPlan = {
          ...currentPlanData,
          name: planData.name || "K·∫ø ho·∫°ch cai thu·ªëc c√° nh√¢n",
          strategy: planData.strategy,
          goal: planData.goal,
          startDate: validStartDate
        };
        
        console.log("‚úÖ PROFILE: ƒê√£ t·∫°o k·∫ø ho·∫°ch c·∫≠p nh·∫≠t:", updatedPlan);
        
        // L∆∞u l·∫°i v√†o localStorage
        if (completionData) {
          const updatedCompletion = JSON.parse(completionData);
          updatedCompletion.userPlan = updatedPlan;
          localStorage.setItem('quitPlanCompletion', JSON.stringify(updatedCompletion));
          console.log("‚úÖ PROFILE: ƒê√£ l∆∞u v√†o quitPlanCompletion");
        } else {
          localStorage.setItem('activePlan', JSON.stringify(updatedPlan));
          console.log("‚úÖ PROFILE: ƒê√£ l∆∞u v√†o activePlan");
        }
        
        // C·∫≠p nh·∫≠t state
        setActivePlan(updatedPlan);
        alert("ƒê√£ l∆∞u c·∫≠p nh·∫≠t k·∫ø ho·∫°ch th√†nh c√¥ng!");
      } else {
        // N·∫øu kh√¥ng c√≥ k·∫ø ho·∫°ch hi·ªán t·∫°i, t·∫°o k·∫ø ho·∫°ch m·ªõi
        const newPlan = {
          name: "K·∫ø ho·∫°ch cai thu·ªëc c√° nh√¢n",
          strategy: planData.strategy,
          goal: planData.goal,
          startDate: validStartDate,
          initialCigarettes: 20,
          packPrice: 30000,
          weeks: [
            { week: 1, amount: 20, completed: false },
            { week: 2, amount: 15, completed: false },
            { week: 3, amount: 10, completed: false },
            { week: 4, amount: 5, completed: false },
            { week: 5, amount: 0, completed: false },
          ]
        };
        
        console.log("‚úÖ PROFILE: T·∫°o k·∫ø ho·∫°ch m·ªõi:", newPlan);
        localStorage.setItem('activePlan', JSON.stringify(newPlan));
        setActivePlan(newPlan);
        alert("ƒê√£ t·∫°o k·∫ø ho·∫°ch cai thu·ªëc m·ªõi!");
      }
    } catch (error) {
      console.error("‚ùå PROFILE: L·ªói khi l∆∞u k·∫ø ho·∫°ch:", error);
      alert("C√≥ l·ªói x·∫£y ra khi l∆∞u k·∫ø ho·∫°ch. Vui l√≤ng th·ª≠ l·∫°i sau.");
    }
  };return (
    <div className="profile-container">
      {/* Sidebar */}
      <div className="profile-sidebar">
        <nav className="profile-nav">
          <div className="nav-top-group">
            <Link
              to="#"
              className={`nav-item ${activeTab === "profile" ? "active" : ""}`}
              onClick={() => {
                setActiveTab("profile");
                // Scroll to the top of the content area
                const profileContent = document.querySelector('.profile-content');
                if (profileContent) {
                  setTimeout(() => {
                    profileContent.scrollIntoView({ behavior: 'smooth', block: 'start' });
                  }, 10);
                }
              }}
            >
              <FaUserAlt /> H·ªì s∆° c√° nh√¢n
            </Link>

          <Link
            to="#"
            className={`nav-item ${activeTab === "appointments" ? "active" : ""}`}
            onClick={() => {
              setActiveTab("appointments");
              const profileContent = document.querySelector('.profile-content');
              if (profileContent) {
                setTimeout(() => {
                  profileContent.scrollIntoView({ behavior: 'smooth', block: 'start' });
                }, 10);
              }
            }}
          >
            <FaCalendarAlt /> L·ªãch h·∫πn Coach
          </Link>

          {/* M·ª•c Nh·∫Øn tin t√≠ch h·ª£p chat coach */}
          <button
            className={`nav-item${activeTab === "coach-messaging" ? " active" : ""}`}
            style={{
              display: 'flex',
              alignItems: 'center',
              width: '100%',
              background: activeTab === 'coach-messaging' ? '#1976d2' : 'none', // Blue when active
              color: activeTab === 'coach-messaging' ? '#fff' : 'inherit',
              border: 'none',
              cursor: 'pointer',
              fontWeight: activeTab === 'coach-messaging' ? 'bold' : 'normal',
              boxShadow: activeTab === 'coach-messaging' ? '0 2px 8px rgba(25, 118, 210, 0.08)' : 'none',
            }}
            onClick={() => setActiveTab('coach-messaging')}
          >
            <FaComment /> Nh·∫Øn tin
          </button>

          <Link
            to="#"
            className={`nav-item ${activeTab === "achievements" ? "active" : ""}`}
            onClick={() => {
              setActiveTab("achievements");
              const profileContent = document.querySelector('.profile-content');
              if (profileContent) {
                setTimeout(() => {
                  profileContent.scrollIntoView({ behavior: 'smooth', block: 'start' });
                }, 10);
              }
            }}
          >            <FaTrophy /> Huy hi·ªáu          </Link>
          </div>
          
          <div className="nav-bottom-group">
            <button onClick={handleLogout} className="nav-item logout-btn">
              <FaSignOutAlt /> ƒêƒÉng xu·∫•t
            </button>
          </div>
        </nav>
      </div>

      {/* Main content */}
      <div className="profile-content">
        {activeTab === "profile" && (
          <div className="profile-overview">
            <div className="section-header">
              <h1>H·ªì s∆°</h1>
            </div>
            
            <div className="profile-sections">
              {/* Th√¥ng tin c√° nh√¢n - s·ª≠ d·ª•ng component UserProfile */}
              <div className="profile-main-content">
                <UserProfile isStandalone={false} />
                <div className="action-buttons-container">
                </div>
              </div>
              
              <div className="profile-collapsible-sections">
                {/* S·ª≠ d·ª•ng CollapsibleSection cho H·ªì s∆° s·ª©c kh·ªèe */}
                <CollapsibleSection 
                  title="H·ªì s∆° s·ª©c kh·ªèe" 
                  icon={<FaHeartbeat />}
                  defaultOpen={false}
                  className="health-collapsible"
                >                  <HealthProfile 
                    healthData={{
                      stats: {
                        smokingHistory: `${userData.yearsOfSmoking} nƒÉm`,
                        dailyConsumption: `${activePlan?.initial_cigarettes || userData.cigarettesPerDay} ƒëi·∫øu/ng√†y`,
                        quitAttempts: "2 l·∫ßn",
                        healthIssues: "T√¨nh tr·∫°ng s·ª©c kh·ªèe ban ƒë·∫ßu",
                        bloodPressure: "Ch∆∞a c·∫≠p nh·∫≠t",
                        heartRate: "Ch∆∞a c·∫≠p nh·∫≠t",
                        oxygenLevel: "Ch∆∞a c·∫≠p nh·∫≠t",
                        respiratoryRate: "Ch∆∞a c·∫≠p nh·∫≠t"
                      },
                      // Kh√¥ng d√πng userData.healthImprovements n·ªØa, ƒë·ªÉ component t·ª± t·∫°o t·ª´ activePlan
                      onUpdateStats: (updatedStats) => {
                        console.log('C·∫≠p nh·∫≠t th√¥ng tin s·ª©c kh·ªèe:', updatedStats);
                        // Th√™m logic c·∫≠p nh·∫≠t n·∫øu c·∫ßn
                      }
                    }}
                    activePlan={activePlan} // Truy·ªÅn activePlan ƒë·ªÉ t·∫°o milestone s·ª©c kh·ªèe t·ª´ k·∫ø ho·∫°ch
                  />
                </CollapsibleSection>
                
                {/* S·ª≠ d·ª•ng CollapsibleSection cho K·∫ø ho·∫°ch cai thu·ªëc */}                <CollapsibleSection 
                  title="K·∫ø ho·∫°ch cai thu·ªëc" 
                  icon={<FaClipboardList />}
                  defaultOpen={false}
                  className="plan-collapsible"
                >                  <ProfilePlan 
                    planData={{
                      strategy: activePlan?.strategy || "Cai thu·ªëc ho√†n to√†n v√† duy tr√¨ l√¢u d√†i",
                      startDate: activePlan?.start_date ? new Date(activePlan.start_date).toLocaleDateString('vi-VN') : null, // Kh√¥ng s·ª≠ d·ª•ng userData.startDate khi kh√¥ng c√≥ activePlan
                      goal: activePlan?.goal || "C·∫£i thi·ªán s·ª©c kh·ªèe v√† ti·∫øt ki·ªám chi ph√≠",
                      initialCigarettes: activePlan?.initial_cigarettes,
                      weeks: activePlan?.weeks || [],
                      totalWeeks: activePlan?.weeks?.length || 0,
                      packPrice: activePlan?.packPrice,
                      milestones: userData.milestones
                    }}
                    activePlan={activePlan} // Truy·ªÅn to√†n b·ªô activePlan ƒë·ªÉ c√≥ th·ªÉ truy c·∫≠p t·∫•t c·∫£ d·ªØ li·ªáu
                  />
                </CollapsibleSection>
              </div>
            </div>
          </div>
        )}        {activeTab === "membership" && (
          <div className="membership-section">
            <h1>Th√¥ng tin Th√†nh vi√™n</h1>

            <div className="membership-status">
              <div className="card membership-status-card">
                <h2>Tr·∫°ng th√°i th√†nh vi√™n</h2>
                <div className="membership-status-info">
                  {userData.membershipType && userData.membershipType !== 'free' ? (
                    <div className="current-membership">
                      <div className="membership-badge-large">
                        <FaCrown className={userData.membershipType === "premium" ? "premium-icon" : "pro-icon"} />
                        <span className={`membership-type ${userData.membershipType}`}>
                          {userData.membershipType === "premium" ? "Premium" : "Pro"}
                        </span>
                      </div>
                      <p className="membership-description">
                        {userData.membershipType === "premium" 
                          ? "B·∫°n ƒëang s·ª≠ d·ª•ng g√≥i Premium v·ªõi ƒë·∫ßy ƒë·ªß t√≠nh nƒÉng h·ªó tr·ª£." 
                          : "B·∫°n ƒëang s·ª≠ d·ª•ng g√≥i Pro v·ªõi ƒë·∫ßy ƒë·ªß t√≠nh nƒÉng h√†ng nƒÉm."}
                      </p>
                    </div>
                  ) : (
                    <div className="free-membership">
                      <p>B·∫°n ƒëang s·ª≠ d·ª•ng g√≥i Mi·ªÖn ph√≠</p>
                      <button className="upgrade-btn" onClick={() => navigate('/membership')}>
                        N√¢ng c·∫•p ngay
                      </button>
                    </div>
                  )}
                </div>
              </div>
            </div>

            <div className="membership-features">
              <h2>T√≠nh nƒÉng c·ªßa b·∫°n</h2>
              <div className="feature-list">
                <div className="feature-item">
                  <FaCheck className="feature-check" />
                  <div className="feature-text">
                    <h3>Theo d√µi cai thu·ªëc</h3>
                    <p>Theo d√µi ti·∫øn tr√¨nh cai thu·ªëc c·ªßa b·∫°n h√†ng ng√†y</p>
                  </div>
                </div>
                <div className="feature-item">
                  <FaCheck className="feature-check" />
                  <div className="feature-text">
                    <h3>L·∫≠p k·∫ø ho·∫°ch c√° nh√¢n</h3>
                    <p>T·∫°o k·∫ø ho·∫°ch cai thu·ªëc ph√π h·ª£p v·ªõi b·∫°n</p>
                  </div>
                </div>
                
                {userData.membershipType && userData.membershipType !== 'free' ? (
                  <>
                    <div className="feature-item">
                      <FaCheck className="feature-check" />
                      <div className="feature-text">
                        <h3>Huy hi·ªáu & c·ªông ƒë·ªìng</h3>
                        <p>Tham gia c·ªông ƒë·ªìng v√† nh·∫≠n huy hi·ªáu</p>
                      </div>
                    </div>
                    <div className="feature-item">
                      <FaCheck className="feature-check" />
                      <div className="feature-text">
                        <h3>Chat hu·∫•n luy·ªán vi√™n</h3>
                        <p>Nh·∫≠n t∆∞ v·∫•n t·ª´ hu·∫•n luy·ªán vi√™n chuy√™n nghi·ªáp</p>
                      </div>
                    </div>
                    <div className="feature-item">
                      <FaCheck className="feature-check" />
                      <div className="feature-text">
                        <h3>Video call t∆∞ v·∫•n</h3>
                        <p>Tham gia c√°c bu·ªïi t∆∞ v·∫•n qua video</p>
                      </div>
                    </div>
                  </>
                ) : (
                  <>
                    <div className="feature-item disabled">
                      <FaTimes className="feature-times" />
                      <div className="feature-text">
                        <h3>Huy hi·ªáu & c·ªông ƒë·ªìng</h3>
                        <p>N√¢ng c·∫•p ƒë·ªÉ m·ªü kh√≥a t√≠nh nƒÉng n√†y</p>
                      </div>
                    </div>
                    <div className="feature-item disabled">
                      <FaTimes className="feature-times" />
                      <div className="feature-text">
                        <h3>Chat hu·∫•n luy·ªán vi√™n</h3>
                        <p>N√¢ng c·∫•p ƒë·ªÉ m·ªü kh√≥a t√≠nh nƒÉng n√†y</p>
                      </div>
                    </div>
                    <div className="feature-item disabled">
                      <FaTimes className="feature-times" />
                      <div className="feature-text">
                        <h3>Video call t∆∞ v·∫•n</h3>
                        <p>N√¢ng c·∫•p ƒë·ªÉ m·ªü kh√≥a t√≠nh nƒÉng n√†y</p>
                      </div>
                    </div>
                  </>
                )}
              </div>
              
              {!userData.membershipType || userData.membershipType === 'free' ? (
                <div className="membership-upgrade">
                  <h3>N√¢ng c·∫•p ƒë·ªÉ s·ª≠ d·ª•ng ƒë·∫ßy ƒë·ªß t√≠nh nƒÉng</h3>
                  <button className="upgrade-btn-large" onClick={() => navigate('/membership')}>
                    Kh√°m ph√° g√≥i th√†nh vi√™n
                  </button>
                </div>
              ) : null}
            </div>
          </div>
        )}        {activeTab === "achievements" && (
          <Achievement userId={userData?.id} />
        )}

        {activeTab === "appointments" && (
          <div className="appointments-section">
            <h1>L·ªãch h·∫πn Coach</h1>
            <AppointmentList />
          </div>
        )}        {activeTab === "journal" && (
          <div className="journal-section">
            <h1>C·∫≠p nh·∫≠t h√†ng ng√†y</h1>

            <DailyCheckin
              onProgressUpdate={(data) => {
                console.log("D·ªØ li·ªáu c·∫≠p nh·∫≠t:", data);
                alert("ƒê√£ l∆∞u c·∫≠p nh·∫≠t c·ªßa b·∫°n!");
              }}
            />
          </div>        )}
          {activeTab === "coach-messaging" && (
          <CoachMessaging />
        )}
          {/* Modal ch·ªânh s·ª≠a k·∫ø ho·∫°ch */}
        <PlanEditModal
          isOpen={isPlanEditOpen}
          onClose={() => setIsPlanEditOpen(false)}
          currentPlan={{
            strategy: activePlan?.strategy || "Cai thu·ªëc ho√†n to√†n v√† duy tr√¨ l√¢u d√†i",
            startDate: activePlan?.start_date || userData.startDate,
            goal: activePlan?.goal || "C·∫£i thi·ªán s·ª©c kh·ªèe v√† ti·∫øt ki·ªám chi ph√≠",
          }}
          activePlan={activePlan}
          onSave={handleSavePlan}
        />
      </div>
    </div>
  );
}
