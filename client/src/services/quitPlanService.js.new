import axios from '../utils/axiosConfig';

// API endpoints
const API_URL = '/api/quit-plans';

// Log ƒë·ªÉ debug
console.log('API URL for quit plan service:', API_URL);

// Create a new quit plan
export const createQuitPlan = async (planData) => {
    try {
        console.log('üöÄ Creating quit plan:', planData);

        const response = await axios.post(API_URL, planData);
        
        console.log('‚úÖ Quit plan created successfully:', response.data);
        return response.data.data || response.data;
    } catch (error) {
        console.error('‚ùå Error creating quit plan:', error);
        // N·∫øu l·ªói 401 (Unauthorized), c√≥ th·ªÉ token h·∫øt h·∫°n
        if (error.response?.status === 401) {
            console.warn('‚ö†Ô∏è Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n.');
            throw new Error('Token kh√¥ng h·ª£p l·ªá. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
        }
        throw error;
    }
};

// Get all quit plans for the current user
export const getUserPlans = async () => {
    try {
        console.log('üöÄ Fetching user quit plans...');

        const response = await axios.get(`${API_URL}/user`);
        
        console.log('‚úÖ User quit plans fetched:', response.data);
        // Backend tr·∫£ v·ªÅ { success: true, message: "...", data: [...] }
        // C·∫ßn tr·∫£ v·ªÅ data.data thay v√¨ data
        return response.data.data || response.data;
    } catch (error) {
        console.error('‚ùå Error fetching user plans:', error);
        throw error;
    }
};

// Get a specific quit plan by ID
export const getQuitPlanById = async (planId) => {
    try {
        console.log('üöÄ Fetching quit plan by ID:', planId);

        const response = await axios.get(`${API_URL}/${planId}`);

        console.log('‚úÖ Quit plan fetched:', response.data);
        return response.data.data || response.data;
    } catch (error) {
        console.error('‚ùå Error fetching quit plan:', error);
        throw error;
    }
};

// Update a quit plan
export const updateQuitPlan = async (planId, updateData) => {
    try {
        console.log('üöÄ Updating quit plan:', planId, updateData);

        const response = await axios.put(`${API_URL}/${planId}`, updateData);
        
        console.log('‚úÖ Quit plan updated successfully:', response.data);
        return response.data.data || response.data;
    } catch (error) {
        console.error('‚ùå Error updating quit plan:', error);
        throw error;
    }
};

// Delete a quit plan
export const deletePlan = async (planId) => {
    try {
        console.log('üöÄ Deleting quit plan:', planId);

        const response = await axios.delete(`${API_URL}/${planId}`);
        
        console.log('‚úÖ Quit plan deleted successfully:', response.data);
        return response.data.data || response.data;
    } catch (error) {
        console.error('‚ùå Error deleting quit plan:', error);
        throw error;
    }
};

// L·∫•y k·∫ø ho·∫°ch cai thu·ªëc hi·ªán t·∫°i c·ªßa ng∆∞·ªùi d√πng (lu√¥n ∆∞u ti√™n database)
export const getCurrentPlan = async () => {
    try {
        console.log('üöÄ Fetching current user plan from database...');

        // L·∫•y t·∫•t c·∫£ k·∫ø ho·∫°ch t·ª´ API
        const plans = await getUserPlans();
        
        // N·∫øu c√≥ k·∫ø ho·∫°ch t·ª´ API, l·∫•y k·∫ø ho·∫°ch m·ªõi nh·∫•t
        if (plans && Array.isArray(plans) && plans.length > 0) {
            // S·∫Øp x·∫øp theo th·ªùi gian t·∫°o gi·∫£m d·∫ßn ƒë·ªÉ l·∫•y k·∫ø ho·∫°ch m·ªõi nh·∫•t
            const sortedPlans = [...plans].sort((a, b) => 
                new Date(b.created_at || 0) - new Date(a.created_at || 0));
            
            const latestPlan = sortedPlans[0];
            console.log('‚úÖ Found current plan from database:', latestPlan.name);
            
            // Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu k·∫ø ho·∫°ch t·ª´ database v√†o ƒë·ªãnh d·∫°ng m√† frontend hi·ªÉu
            const formattedPlan = {
                id: latestPlan.id,
                name: latestPlan.name,
                startDate: latestPlan.start_date,
                weeks: JSON.parse(latestPlan.weekly_targets || '[]'),
                initialCigarettes: latestPlan.initial_cigarettes || 0,
                created_at: latestPlan.created_at,
                updated_at: latestPlan.updated_at
            };
            
            // L∆∞u v√†o localStorage cho t∆∞∆°ng th√≠ch v·ªõi code c≈©, nh∆∞ng ch√∫ng ta s·∫Ω lu√¥n ∆∞u ti√™n d√πng DB
            localStorage.setItem('activePlan', JSON.stringify(formattedPlan));
            
            return formattedPlan;
        }
        
        // N·∫øu kh√¥ng c√≥ k·∫ø ho·∫°ch t·ª´ API, ki·ªÉm tra localStorage
        console.log('‚ùå No plans found in database, checking localStorage...');
        const savedPlan = localStorage.getItem('activePlan');
        
        if (savedPlan) {
            try {
                const parsedPlan = JSON.parse(savedPlan);
                if (parsedPlan && Array.isArray(parsedPlan.weeks) && parsedPlan.weeks.length > 0) {
                    console.log('‚ö†Ô∏è Using plan from localStorage:', parsedPlan.name);
                    return parsedPlan;
                }
            } catch (e) {
                console.error('‚ùå Error parsing saved plan:', e);
            }
        }
        
        // N·∫øu kh√¥ng c√≥ k·∫ø ho·∫°ch n√†o, tr·∫£ v·ªÅ k·∫ø ho·∫°ch m·∫∑c ƒë·ªãnh
        return getDefaultPlan();
    } catch (error) {
        console.error('‚ùå Error fetching current plan:', error);
        
        // N·∫øu c√≥ l·ªói, ki·ªÉm tra localStorage
        const savedPlan = localStorage.getItem('activePlan');
        if (savedPlan) {
            try {
                const parsedPlan = JSON.parse(savedPlan);
                if (parsedPlan && Array.isArray(parsedPlan.weeks) && parsedPlan.weeks.length > 0) {
                    console.log('‚ö†Ô∏è Using plan from localStorage (after API error):', parsedPlan.name);
                    return parsedPlan;
                }
            } catch (e) {
                console.error('‚ùå Error parsing saved plan:', e);
            }
        }
        
        // Tr·∫£ v·ªÅ k·∫ø ho·∫°ch m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng c√≥ g√¨
        return getDefaultPlan();
    }
};

// L·∫•y k·∫ø ho·∫°ch m·∫∑c ƒë·ªãnh
const getDefaultPlan = () => {
    console.log('‚ÑπÔ∏è Using default quit plan');
    return {
        name: "K·∫ø ho·∫°ch m·∫∑c ƒë·ªãnh (ch∆∞a l·∫≠p)",
        startDate: new Date().toISOString().split('T')[0],
        weeks: [
            { week: 1, amount: 22, phase: "Th√≠ch nghi" },
            { week: 2, amount: 17, phase: "Th√≠ch nghi" },
            { week: 3, amount: 12, phase: "TƒÉng t·ªëc" },
            { week: 4, amount: 8, phase: "TƒÉng t·ªëc" },        
            { week: 5, amount: 5, phase: "Ho√†n thi·ªán" },
            { week: 6, amount: 2, phase: "Ho√†n thi·ªán" },
            { week: 7, amount: 0, phase: "M·ª•c ti√™u ƒë·∫°t ƒë∆∞·ª£c" }
        ],
        initialCigarettes: 22
    };
};

const quitPlanService = {
    createQuitPlan,
    getUserPlans,
    getQuitPlan: getQuitPlanById,
    updateQuitPlan,
    deletePlan,
    getCurrentPlan,
    getDefaultPlan
};

export default quitPlanService;
