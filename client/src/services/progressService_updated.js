// Updated progressService.js with plan_id support
import axios from '../utils/axiosConfig';
import { getCurrentUserId, getAuthToken } from '../utils/userUtils';

const API_URL = '/api/progress';

const progressService = {
    // T·∫°o check-in m·ªõi v·ªõi plan_id
    createCheckin: async (userId, date, checkinData, planId) => {
        try {
            if (!planId) {
                throw new Error('Plan ID is required');
            }

            const checkinDate = date || new Date().toISOString().split('T')[0];
            console.log('üìÖ Creating check-in for date:', checkinDate, 'userId:', userId, 'planId:', planId);

            const targetCigs = parseInt(checkinData.targetCigarettes || 0);
            const actualCigs = parseInt(checkinData.actualCigarettes || 0);
            const initialCigs = parseInt(checkinData.initialCigarettes || checkinData.dailyCigarettes || 50);

            const cigarettesAvoided = Math.max(0, initialCigs - actualCigs);
            const costPerCigarette = checkinData.packPrice ? (checkinData.packPrice / 20) : 1250;
            const moneySaved = cigarettesAvoided * costPerCigarette;
            const healthScore = initialCigs > 0 ? Math.round((cigarettesAvoided / initialCigs) * 100) : 0;

            const dataToSend = {
                date: checkinDate,
                plan_id: planId, // B·∫ÆT BU·ªòC
                targetCigarettes: targetCigs,
                actualCigarettes: actualCigs,
                initialCigarettes: initialCigs,
                cigarettesAvoided: cigarettesAvoided,
                moneySaved: moneySaved,
                healthScore: healthScore,
                notes: checkinData.notes || '',
                toolType: 'quit_smoking_plan'
            };

            console.log('üì§ Sending checkin data:', dataToSend);

            const response = await fetch('/api/progress/checkin', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${getAuthToken()}`
                },
                body: JSON.stringify(dataToSend)
            });

            const result = await response.json();

            if (!response.ok) {
                throw new Error(result.message || 'Failed to create checkin');
            }

            console.log('‚úÖ Checkin created successfully:', result);
            return result;

        } catch (error) {
            console.error('‚ùå Error creating checkin:', error);
            throw error;
        }
    },

    // L·∫•y ti·∫øn tr√¨nh user theo plan_id
    getUserProgress: async (userId, planId, startDate = null, endDate = null, limit = null) => {
        try {
            if (!planId) {
                throw new Error('Plan ID is required');
            }

            console.log('üìä Fetching user progress for planId:', planId);

            const params = new URLSearchParams({
                plan_id: planId
            });

            if (startDate) params.append('startDate', startDate);
            if (endDate) params.append('endDate', endDate);
            if (limit) params.append('limit', limit);

            const response = await fetch(`/api/progress/user?${params.toString()}`, {
                headers: {
                    'Authorization': `Bearer ${getAuthToken()}`
                }
            });

            const result = await response.json();

            if (!response.ok) {
                throw new Error(result.message || 'Failed to fetch progress');
            }

            console.log('‚úÖ User progress fetched:', result);
            return result;

        } catch (error) {
            console.error('‚ùå Error fetching user progress:', error);
            throw error;
        }
    },

    // L·∫•y checkin theo ng√†y v√† plan_id
    getCheckinByDate: async (userId, date, planId) => {
        try {
            if (!planId) {
                throw new Error('Plan ID is required');
            }

            console.log('üìÖ Fetching checkin for date:', date, 'planId:', planId);

            const response = await fetch(`/api/progress/checkin/${date}?plan_id=${planId}`, {
                headers: {
                    'Authorization': `Bearer ${getAuthToken()}`
                }
            });

            const result = await response.json();

            if (!response.ok) {
                if (response.status === 404) {
                    return null; // No checkin found
                }
                throw new Error(result.message || 'Failed to fetch checkin');
            }

            console.log('‚úÖ Checkin fetched:', result);
            return result;

        } catch (error) {
            console.error('‚ùå Error fetching checkin:', error);
            throw error;
        }
    },

    // C·∫≠p nh·∫≠t checkin v·ªõi plan_id
    updateCheckin: async (userId, date, updateData, planId) => {
        try {
            if (!planId) {
                throw new Error('Plan ID is required');
            }

            console.log('üìù Updating checkin for date:', date, 'planId:', planId);

            const dataToSend = {
                ...updateData,
                plan_id: planId // B·∫ÆT BU·ªòC
            };

            const response = await fetch(`/api/progress/checkin/${date}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${getAuthToken()}`
                },
                body: JSON.stringify(dataToSend)
            });

            const result = await response.json();

            if (!response.ok) {
                throw new Error(result.message || 'Failed to update checkin');
            }

            console.log('‚úÖ Checkin updated successfully:', result);
            return result;

        } catch (error) {
            console.error('‚ùå Error updating checkin:', error);
            throw error;
        }
    },

    // X√≥a checkin v·ªõi plan_id
    deleteCheckin: async (userId, date, planId) => {
        try {
            if (!planId) {
                throw new Error('Plan ID is required');
            }

            console.log('üóëÔ∏è Deleting checkin for date:', date, 'planId:', planId);

            const response = await fetch(`/api/progress/checkin/${date}?plan_id=${planId}`, {
                method: 'DELETE',
                headers: {
                    'Authorization': `Bearer ${getAuthToken()}`
                }
            });

            const result = await response.json();

            if (!response.ok) {
                throw new Error(result.message || 'Failed to delete checkin');
            }

            console.log('‚úÖ Checkin deleted successfully:', result);
            return result;

        } catch (error) {
            console.error('‚ùå Error deleting checkin:', error);
            throw error;
        }
    },

    // L·∫•y th·ªëng k√™ theo plan_id
    getProgressStats: async (userId, planId, days = 30) => {
        try {
            if (!planId) {
                throw new Error('Plan ID is required');
            }

            console.log('üìà Fetching progress stats for planId:', planId);

            const response = await fetch(`/api/progress/stats?plan_id=${planId}&days=${days}`, {
                headers: {
                    'Authorization': `Bearer ${getAuthToken()}`
                }
            });

            const result = await response.json();

            if (!response.ok) {
                throw new Error(result.message || 'Failed to fetch stats');
            }

            console.log('‚úÖ Progress stats fetched:', result);
            return result;

        } catch (error) {
            console.error('‚ùå Error fetching progress stats:', error);
            throw error;
        }
    },

    // L·∫•y d·ªØ li·ªáu chart theo plan_id
    getChartData: async (userId, planId, days = 30, type = 'cigarettes') => {
        try {
            if (!planId) {
                throw new Error('Plan ID is required');
            }

            console.log('üìä Fetching chart data for planId:', planId);

            const response = await fetch(`/api/progress/chart-data?plan_id=${planId}&days=${days}&type=${type}`, {
                headers: {
                    'Authorization': `Bearer ${getAuthToken()}`
                }
            });

            const result = await response.json();

            if (!response.ok) {
                throw new Error(result.message || 'Failed to fetch chart data');
            }

            console.log('‚úÖ Chart data fetched:', result);
            return result;

        } catch (error) {
            console.error('‚ùå Error fetching chart data:', error);
            throw error;
        }
    }
};

export default progressService;
