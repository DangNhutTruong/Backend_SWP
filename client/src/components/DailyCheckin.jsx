import React, { useState, useEffect } from 'react';
import { FaCalendarCheck, FaSave } from 'react-icons/fa';
import progressService from '../services/progressService';
import { getCurrentUserId } from '../utils/userUtils';

const DailyCheckin = ({ onProgressUpdate }) => {
    const [todayData, setTodayData] = useState({
        date: new Date().toISOString().split('T')[0],
        targetCigarettes: 0, // S·∫Ω ƒë∆∞·ª£c t√≠nh t·ª´ k·∫ø ho·∫°ch th·ª±c t·∫ø c·ªßa user
        actualCigarettes: 0,
        initialCigarettes: 0, // S·∫Ω ƒë∆∞·ª£c l·∫•y t·ª´ plan c·ªßa user, m·∫∑c ƒë·ªãnh l√† 0
        notes: ''
    });

    const [isSubmitted, setIsSubmitted] = useState(false);
    const [currentWeek, setCurrentWeek] = useState(1); // Tu·∫ßn hi·ªán t·∫°i
    const [streakDays, setStreakDays] = useState(0); // S·ªë ng√†y li√™n ti·∫øp ƒë·∫°t m·ª•c ti√™u
    const [toast, setToast] = useState({ show: false, message: '', type: 'success' }); // Th√¥ng b√°o d·∫°ng toast
    const [currentPlan, setCurrentPlan] = useState(null); // L∆∞u k·∫ø ho·∫°ch hi·ªán t·∫°i    // Load k·∫ø ho·∫°ch t·ª´ database
    const loadUserPlan = async () => {
        console.log('üîç DailyCheckin loadUserPlan - Starting...');
        
        // Debug localStorage ƒë·ªÉ xem user data
        console.log('üîç localStorage keys:', Object.keys(localStorage));
        console.log('üîç nosmoke_user:', localStorage.getItem('nosmoke_user'));
        console.log('üîç nosmoke_token:', localStorage.getItem('nosmoke_token'));
        console.log('üîç auth_token:', localStorage.getItem('auth_token'));
        
        try {
            const auth_token = localStorage.getItem('nosmoke_token') || sessionStorage.getItem('nosmoke_token') ||
                              localStorage.getItem('auth_token') || sessionStorage.getItem('auth_token');
            console.log('üîç DailyCheckin loadUserPlan - auth_token:', auth_token ? 'Found' : 'Not found');
            
            if (auth_token) {
                const quitPlanService = await import('../services/quitPlanService');
                const response = await quitPlanService.getUserActivePlan();
                console.log('üîç DailyCheckin loadUserPlan - getUserActivePlan response:', response);
                
                if (response && response.success && response.plan) {
                    let plan = response.plan;
                    console.log('üîç DailyCheckin loadUserPlan - plan from API:', plan);
                    
                    // Parse plan_details n·∫øu n√≥ l√† string
                    if (plan.plan_details && typeof plan.plan_details === 'string') {
                        try {
                            const parsedDetails = JSON.parse(plan.plan_details);
                            plan = { ...plan, ...parsedDetails };
                            console.log('üîç DailyCheckin loadUserPlan - plan after parsing:', plan);
                        } catch (e) {
                            console.error('Error parsing plan_details:', e);
                        }
                    }
                    
                    setCurrentPlan(plan);
                    
                    // L·∫•y s·ªë ƒëi·∫øu ban ƒë·∫ßu t·ª´ plan
                    let initialCigs = 0; // Default fallback - s·∫Ω ƒë∆∞·ª£c l·∫•y t·ª´ plan th·ª±c t·∫ø
                    console.log('üîç DailyCheckin - Plan structure:', plan);
                    
                    // ∆Øu ti√™n l·∫•y t·ª´ initialCigarettes tr·ª±c ti·∫øp
                    if (plan.initialCigarettes) {
                        initialCigs = plan.initialCigarettes;
                        console.log('üîç DailyCheckin - Got from plan.initialCigarettes:', initialCigs);
                    } else if (plan.initial_cigarettes) {
                        initialCigs = plan.initial_cigarettes;
                        console.log('üîç DailyCheckin - Got from plan.initial_cigarettes:', initialCigs);
                    } else if (plan.dailyCigarettes) {
                        initialCigs = plan.dailyCigarettes;
                        console.log('üîç DailyCheckin - Got from plan.dailyCigarettes:', initialCigs);
                    } else if (plan.daily_cigarettes) {
                        initialCigs = plan.daily_cigarettes;
                        console.log('üîç DailyCheckin - Got from plan.daily_cigarettes:', initialCigs);
                    } else if (plan.weeks && plan.weeks.length > 0) {
                        // L·∫•y t·ª´ tu·∫ßn ƒë·∫ßu ti√™n
                        const firstWeek = plan.weeks[0];
                        initialCigs = firstWeek.amount || firstWeek.cigarettes || 
                                    firstWeek.dailyCigarettes || firstWeek.daily_cigarettes || 
                                    firstWeek.target || 0;
                        console.log('üîç DailyCheckin - Got from first week:', initialCigs);
                    }
                    
                    // Update todayData v·ªõi initialCigarettes
                    setTodayData(prev => ({
                        ...prev,
                        initialCigarettes: initialCigs
                    }));
                    
                    console.log('üîç DailyCheckin - Set initialCigarettes:', initialCigs);
                    
                    return plan;
                }
            }
            
            // Fallback: Load t·ª´ localStorage
            const localPlan = localStorage.getItem('activePlan');
            console.log('üîç DailyCheckin loadUserPlan - localPlan:', localPlan);
            if (localPlan) {
                const parsedPlan = JSON.parse(localPlan);
                setCurrentPlan(parsedPlan);
                
                // L·∫•y s·ªë ƒëi·∫øu ban ƒë·∫ßu t·ª´ plan
                let initialCigs = 0; // Default fallback - s·∫Ω ƒë∆∞·ª£c l·∫•y t·ª´ plan th·ª±c t·∫ø
                console.log('üîç DailyCheckin - LocalStorage plan structure:', parsedPlan);
                
                // ∆Øu ti√™n l·∫•y t·ª´ initialCigarettes tr·ª±c ti·∫øp
                if (parsedPlan.initialCigarettes) {
                    initialCigs = parsedPlan.initialCigarettes;
                    console.log('üîç DailyCheckin - Got from parsedPlan.initialCigarettes:', initialCigs);
                } else if (parsedPlan.initial_cigarettes) {
                    initialCigs = parsedPlan.initial_cigarettes;
                    console.log('üîç DailyCheckin - Got from parsedPlan.initial_cigarettes:', initialCigs);
                } else if (parsedPlan.dailyCigarettes) {
                    initialCigs = parsedPlan.dailyCigarettes;
                    console.log('üîç DailyCheckin - Got from parsedPlan.dailyCigarettes:', initialCigs);
                } else if (parsedPlan.daily_cigarettes) {
                    initialCigs = parsedPlan.daily_cigarettes;
                    console.log('üîç DailyCheckin - Got from parsedPlan.daily_cigarettes:', initialCigs);
                } else if (parsedPlan.weeks && parsedPlan.weeks.length > 0) {
                    // L·∫•y t·ª´ tu·∫ßn ƒë·∫ßu ti√™n
                    const firstWeek = parsedPlan.weeks[0];
                    initialCigs = firstWeek.amount || firstWeek.cigarettes || 
                                firstWeek.dailyCigarettes || firstWeek.daily_cigarettes || 
                                firstWeek.target || 0;
                    console.log('üîç DailyCheckin - Got from first week:', initialCigs);
                }
                
                // Update todayData v·ªõi initialCigarettes
                setTodayData(prev => ({
                    ...prev,
                    initialCigarettes: initialCigs
                }));
                
                console.log('üîç DailyCheckin - Set initialCigarettes from localStorage:', initialCigs);
                
                return parsedPlan;
            }
            
            console.log('üîç DailyCheckin loadUserPlan - No plan found');
            return null;
        } catch (error) {
            console.error('‚ùå Error loading plan:', error);
            return null;
        }
    };

    // T√≠nh target cigarettes d·ª±a tr√™n k·∫ø ho·∫°ch v√† ng√†y hi·ªán t·∫°i
    const calculateTodayTarget = (plan = currentPlan) => {
        // N·∫øu kh√¥ng c√≥ k·∫ø ho·∫°ch, tr·∫£ v·ªÅ 0 ƒë·ªÉ b√°o hi·ªáu c·∫ßn l·∫≠p k·∫ø ho·∫°ch
        if (!plan || !plan.weeks || !Array.isArray(plan.weeks) || plan.weeks.length === 0) {
            console.log("‚ö†Ô∏è Kh√¥ng c√≥ k·∫ø ho·∫°ch h·ª£p l·ªá, target = 0");
            return 0;
        }
        
        const planStartDate = plan.startDate || plan.start_date;
        
        if (!planStartDate) {
            const firstWeek = plan.weeks[0];
            if (firstWeek) {
                return firstWeek.amount ?? firstWeek.target ?? 
                       firstWeek.cigarettes ?? firstWeek.dailyCigarettes ?? 
                       firstWeek.targetCigarettes ?? 0; // Fallback l√† 0 thay v√¨ 12
            }
            return 0; // Kh√¥ng c√≥ d·ªØ li·ªáu tu·∫ßn ƒë·∫ßu
        }
        
        try {
            const today = new Date();
            const startDate = new Date(planStartDate);
            
            if (isNaN(startDate.getTime())) {
                console.log("‚ö†Ô∏è Ng√†y b·∫Øt ƒë·∫ßu kh√¥ng h·ª£p l·ªá, s·ª≠ d·ª•ng tu·∫ßn ƒë·∫ßu ti√™n");
                return plan.weeks[0]?.amount || 0; // Fallback l√† 0
            }
            
            const daysDiff = Math.floor((today - startDate) / (1000 * 60 * 60 * 24));
            const currentWeekNumber = Math.floor(daysDiff / 7) + 1;
            
            setCurrentWeek(currentWeekNumber);
            
            let currentWeekPlan;
            
            if (currentWeekNumber <= plan.weeks.length && currentWeekNumber > 0) {
                const weekByIndex = plan.weeks[currentWeekNumber - 1];
                const weekByProperty = plan.weeks.find(w => w.week === currentWeekNumber);
                currentWeekPlan = weekByProperty || weekByIndex;
            }
            
            if (currentWeekPlan) {
                const getTargetAmount = (weekPlan) => {
                    if (!weekPlan) return null;
                    return weekPlan.amount ?? weekPlan.target ?? 
                           weekPlan.cigarettes ?? weekPlan.dailyCigarettes ?? 
                           weekPlan.targetCigarettes ?? weekPlan.dailyTarget ?? 
                           weekPlan.daily_cigarettes ?? weekPlan.day_cigarettes ?? null;
                };
                
                const currentAmount = getTargetAmount(currentWeekPlan);
                
                if (currentWeekNumber > 1) {
                    const prevWeekByIndex = plan.weeks[currentWeekNumber - 2];
                    const prevWeekByProperty = plan.weeks.find(w => w.week === currentWeekNumber - 1);
                    const prevWeekPlan = prevWeekByProperty || prevWeekByIndex;
                    const prevAmount = getTargetAmount(prevWeekPlan);
                    
                    if (prevAmount && currentAmount && prevAmount > currentAmount) {
                        const reduction = prevAmount - currentAmount;
                        const percentReduction = Math.round((reduction / prevAmount) * 100);
                        
                        setTodayData(prev => ({
                            ...prev,
                            weeklyProgress: {
                                reduction,
                                percentReduction,
                                prevAmount: prevAmount
                            }
                        }));
                    }
                }
                
                return currentAmount || 0; // Fallback l√† 0 thay v√¨ 12
            }
            
            if (currentWeekNumber > plan.weeks.length) {
                return 0;
            }
            
            const firstWeek = plan.weeks[0];
            if (firstWeek) {
                return firstWeek.amount ?? firstWeek.target ?? 
                       firstWeek.cigarettes ?? firstWeek.dailyCigarettes ?? 
                       firstWeek.targetCigarettes ?? 0; // Fallback l√† 0
            }
            
            return 0; // Kh√¥ng c√≥ d·ªØ li·ªáu
        } catch (error) {
            console.error("L·ªói khi t√≠nh target:", error);
            return 0; // L·ªói th√¨ tr·∫£ v·ªÅ 0
        }
    };

    // T√≠nh streak days
    const calculateStreakDays = () => {
        let streak = 0;
        const today = new Date();
        
        for (let i = 0; i < 30; i++) {
            const checkDate = new Date(today);
            checkDate.setDate(checkDate.getDate() - i);
            const dateStr = checkDate.toISOString().split('T')[0];
            
            const savedData = localStorage.getItem(`checkin_${dateStr}`);
            if (savedData) {
                const data = JSON.parse(savedData);
                if (data.actualCigarettes <= data.targetCigarettes) {
                    streak++;
                } else {
                    break; // Streak b·ªã ph√°
                }
            } else {
                break; // Kh√¥ng c√≥ d·ªØ li·ªáu
            }
        }
        
        setStreakDays(streak);
    };

    // Load k·∫ø ho·∫°ch v√† c·∫≠p nh·∫≠t target khi component mount
    useEffect(() => {
        const loadPlanAndCalculateTarget = async () => {
            const plan = await loadUserPlan();
            
            if (plan) {
                const target = calculateTodayTarget(plan);
                setTodayData(prev => ({
                    ...prev,
                    targetCigarettes: target
                }));
            } else {
                console.log("‚ö†Ô∏è Kh√¥ng c√≥ k·∫ø ho·∫°ch ƒë∆∞·ª£c load, target = 0");
                setTodayData(prev => ({
                    ...prev,
                    targetCigarettes: 0
                }));
            }
            
            calculateStreakDays();
        };
        
        loadPlanAndCalculateTarget();
    }, []);    // B·ªè useEffect n√†y v√¨ ƒë√£ x·ª≠ l√Ω trong useEffect ch√≠nh
        // Load d·ªØ li·ªáu t·ª´ database khi component mount
    useEffect(() => {
        const loadUserData = async () => {
            try {            // L·∫•y userId t·ª´ getCurrentUserId utility function
            const userId = getCurrentUserId();
            console.log('üîç DailyCheckin - getCurrentUserId():', userId);
            
            const today = new Date().toISOString().split('T')[0];
            
            // Ch·ªâ th·ª±c hi·ªán khi c√≥ userId h·ª£p l·ªá
            if (!userId) {
                console.warn('‚ö†Ô∏è User not logged in, skipping database operations');
                // Ch·ªâ load t·ª´ localStorage
                const savedData = localStorage.getItem(`checkin_${today}`);
                const draftData = localStorage.getItem(`checkin_${today}_draft`);
                
                if (savedData) {
                    try {
                        const data = JSON.parse(savedData);
                        setTodayData(data);
                        setIsSubmitted(true);
                    } catch (e) {
                        localStorage.removeItem(`checkin_${today}`);
                    }
                } else if (draftData) {
                    try {
                        const data = JSON.parse(draftData);
                        setTodayData(data);
                        setIsSubmitted(false);
                        
                        setToast({
                            show: true,
                            message: 'üìù Kh√¥i ph·ª•c d·ªØ li·ªáu nh√°p ƒë√£ nh·∫≠p',
                            type: 'info'
                        });
                        
                        setTimeout(() => {
                            setToast(prev => ({ ...prev, show: false }));
                        }, 2000);
                    } catch (e) {
                        localStorage.removeItem(`checkin_${today}_draft`);
                    }
                }
                return;
            }
            
            // Th·ª≠ load t·ª´ database b·∫±ng userId API
            try {
                console.log('üîç DailyCheckin - Using userId:', userId);
                    
                    const response = await progressService.getProgressByUserId(userId);
                    
                    if (response && response.success && response.data && response.data.length > 0) {
                        // T√¨m d·ªØ li·ªáu cho ng√†y h√¥m nay
                        const todayProgress = response.data.find(item => 
                            item.date.split('T')[0] === today
                        );
                        
                        if (todayProgress) {
                            const loadedData = {
                                date: today,
                                targetCigarettes: todayProgress.target_cigarettes || 0,
                                actualCigarettes: todayProgress.actual_cigarettes || 0,
                                notes: todayProgress.notes || '',
                                healthScore: todayProgress.health_score || 0,
                                moneySaved: todayProgress.money_saved || 0,
                                cigarettesAvoided: todayProgress.cigarettes_avoided || 0
                            };
                            
                            setTodayData(loadedData);
                            setIsSubmitted(true);
                            
                            // Sync v·ªõi localStorage
                            localStorage.setItem(`checkin_${today}`, JSON.stringify(loadedData));
                            
                            setToast({
                                show: true,
                                message: 'üîÑ D·ªØ li·ªáu ƒë∆∞·ª£c kh√¥i ph·ª•c t·ª´ database',
                                type: 'success'
                            });
                            
                            setTimeout(() => {
                                setToast(prev => ({ ...prev, show: false }));
                            }, 2000);
                            return; // D·ª´ng ·ªü ƒë√¢y n·∫øu ƒë√£ load ƒë∆∞·ª£c t·ª´ database
                        }
                    }
                } catch (dbError) {
                    console.log('Database load failed, trying localStorage fallback');
                }
                
                // Fallback: Load t·ª´ localStorage (submitted data ho·∫∑c draft)
                const savedData = localStorage.getItem(`checkin_${today}`);
                const draftData = localStorage.getItem(`checkin_${today}_draft`);
                
                if (savedData) {
                    try {
                        const data = JSON.parse(savedData);
                        setTodayData(data);
                        setIsSubmitted(true);
                    } catch (e) {
                        // N·∫øu c√≥ l·ªói parse JSON
                        localStorage.removeItem(`checkin_${today}`);
                    }
                } else if (draftData) {
                    try {
                        const data = JSON.parse(draftData);
                        setTodayData(data);
                        setIsSubmitted(false);
                        
                        setToast({
                            show: true,
                            message: 'üìù Kh√¥i ph·ª•c d·ªØ li·ªáu nh√°p ƒë√£ nh·∫≠p',
                            type: 'info'
                        });
                        
                        setTimeout(() => {
                            setToast(prev => ({ ...prev, show: false }));
                        }, 2000);
                    } catch (e) {
                        // N·∫øu c√≥ l·ªói parse JSON
                        localStorage.removeItem(`checkin_${today}_draft`);
                    }
                }
                
            } catch (error) {
                console.error('‚ùå Error loading user data:', error);
            }
        };
        
        loadUserData();
    }, []);

    const handleInputChange = (field, value) => {
        const updatedData = {
            ...todayData,
            [field]: value
        };
        
        setTodayData(updatedData);
        
        // Auto-save to localStorage ƒë·ªÉ tr√°nh m·∫•t d·ªØ li·ªáu khi chuy·ªÉn trang
        const today = new Date().toISOString().split('T')[0];
        localStorage.setItem(`checkin_${today}_draft`, JSON.stringify(updatedData));
    };

    const handleSubmit = async () => {
        // L∆∞u d·ªØ li·ªáu v√†o localStorage
        const today = new Date().toISOString().split('T')[0];
        const isUpdate = localStorage.getItem(`checkin_${today}`) !== null;
        
        localStorage.setItem(`checkin_${today}`, JSON.stringify(todayData));
        
        // Clear draft data khi submit th√†nh c√¥ng
        localStorage.removeItem(`checkin_${today}_draft`);

        // C·∫≠p nh·∫≠t streak b·∫±ng c√°ch t√≠nh to√°n l·∫°i t·ª´ d·ªØ li·ªáu ƒë√£ l∆∞u
        calculateStreakDays();

        // G·ª≠i d·ªØ li·ªáu l√™n server ƒë·ªÉ l∆∞u v√†o c∆° s·ªü d·ªØ li·ªáu
        try {
            // L·∫•y userId t·ª´ getCurrentUserId utility function
            const userId = getCurrentUserId();
            console.log('üîç DailyCheckin handleSubmit - getCurrentUserId():', userId);
            console.log('üîç DailyCheckin handleSubmit - localStorage keys:', Object.keys(localStorage));
            console.log('üîç DailyCheckin handleSubmit - sessionStorage keys:', Object.keys(sessionStorage));
            console.log('üîç DailyCheckin handleSubmit - nosmoke_user:', localStorage.getItem('nosmoke_user'));
            console.log('üîç DailyCheckin handleSubmit - nosmoke_token:', localStorage.getItem('nosmoke_token') ? 'Present' : 'Missing');
            
            if (!userId) {
                console.warn('‚ö†Ô∏è User not logged in, cannot save to database');
                setToast({ 
                    show: true, 
                    message: '‚ö†Ô∏è Ch∆∞a ƒëƒÉng nh·∫≠p. D·ªØ li·ªáu ch·ªâ l∆∞u c·ª•c b·ªô.', 
                    type: 'warning' 
                });
                setIsSubmitted(true);
                return;
            }
            
            console.log('üîç DailyCheckin handleSubmit - Using userId:', userId);
            
            // L·∫•y s·ªë ƒëi·∫øu ban ƒë·∫ßu t·ª´ plan
            let initialCigarettes = todayData.initialCigarettes || 0; // L·∫•y t·ª´ state tr∆∞·ªõc
            console.log('üîç DailyCheckin handleSubmit - todayData.initialCigarettes:', todayData.initialCigarettes);
            console.log('üîç DailyCheckin handleSubmit - currentPlan:', currentPlan);
            
            // N·∫øu state kh√¥ng c√≥ ho·∫∑c = 0, l·∫•y t·ª´ currentPlan
            if (!initialCigarettes && currentPlan) {
                if (currentPlan.initialCigarettes) {
                    initialCigarettes = currentPlan.initialCigarettes;
                    console.log('üîç DailyCheckin handleSubmit - Got from currentPlan.initialCigarettes:', initialCigarettes);
                } else if (currentPlan.initial_cigarettes) {
                    initialCigarettes = currentPlan.initial_cigarettes;
                    console.log('üîç DailyCheckin handleSubmit - Got from currentPlan.initial_cigarettes:', initialCigarettes);
                } else if (currentPlan.dailyCigarettes) {
                    initialCigarettes = currentPlan.dailyCigarettes;
                    console.log('üîç DailyCheckin handleSubmit - Got from currentPlan.dailyCigarettes:', initialCigarettes);
                } else if (currentPlan.daily_cigarettes) {
                    initialCigarettes = currentPlan.daily_cigarettes;
                    console.log('üîç DailyCheckin handleSubmit - Got from currentPlan.daily_cigarettes:', initialCigarettes);
                } else if (currentPlan.weeks && currentPlan.weeks.length > 0) {
                    // L·∫•y t·ª´ tu·∫ßn ƒë·∫ßu ti√™n
                    const firstWeek = currentPlan.weeks[0];
                    initialCigarettes = firstWeek.amount || firstWeek.cigarettes || 
                                      firstWeek.dailyCigarettes || firstWeek.daily_cigarettes || 
                                      firstWeek.target || 0;
                    console.log('üîç DailyCheckin handleSubmit - Got from first week:', initialCigarettes);
                }
            }
            
            console.log('üîç DailyCheckin handleSubmit - Final initial cigarettes:', initialCigarettes);
            
            // Th√™m initialCigarettes v√†o todayData
            const dataWithInitial = {
                ...todayData,
                initialCigarettes: initialCigarettes,
                dailyCigarettes: initialCigarettes
            };
            
            console.log('Using userId for API call:', userId);
            const result = await progressService.createCheckinByUserId(userId, dataWithInitial);

            setToast({ 
                show: true, 
                message: '‚úÖ ƒê√£ l∆∞u d·ªØ li·ªáu v√†o c∆° s·ªü d·ªØ li·ªáu!', 
                type: 'success' 
            });
            // G·ªçi callback c·∫≠p nh·∫≠t dashboard
            if (onProgressUpdate) onProgressUpdate({ ...todayData, date: today });
        } catch (error) {
            console.error('‚ùå Error saving to database:', error);
            let errorMessage = '‚ùå Kh√¥ng th·ªÉ l∆∞u d·ªØ li·ªáu v√†o c∆° s·ªü d·ªØ li·ªáu. ƒê√£ l∆∞u c·ª•c b·ªô.';

            if (error.response?.status === 401) {
                errorMessage = '‚ùå Phi√™n ƒëƒÉng nh·∫≠p h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.';
            } else if (error.response?.status === 500) {
                errorMessage = '‚ùå L·ªói m√°y ch·ªß. Vui l√≤ng th·ª≠ l·∫°i sau.';
            }

            setToast({ 
                show: true, 
                message: errorMessage, 
                type: 'error' 
            });
        }

        setIsSubmitted(true);

        // Callback ƒë·ªÉ c·∫≠p nh·∫≠t component cha (ƒë√£ g·ªçi ·ªü tr√™n)
        // ...existing code...
        setTimeout(() => {
            setToast(prev => ({ ...prev, show: false }));
        }, 5000);
    };    const handleEdit = () => {
        // Cho ph√©p ch·ªânh s·ª≠a l·∫°i form
        setIsSubmitted(false);
        
        // Hi·ªÉn th·ªã th√¥ng b√°o
        setToast({ 
            show: true, 
            message: 'üìù B·∫°n c√≥ th·ªÉ c·∫≠p nh·∫≠t s·ªë ƒëi·∫øu thu·ªëc ƒë√£ h√∫t h√¥m nay', 
            type: 'info' 
        });
        
        setTimeout(() => {
            setToast(prev => ({ ...prev, show: false }));
        }, 3000);
    };
    
    // Th√™m h√†m m·ªõi ƒë·ªÉ c·∫≠p nh·∫≠t d·ªØ li·ªáu l√™n server
    const updateServerData = async (date) => {
        try {
            // Th√™m initialCigarettes v√†o d·ªØ li·ªáu
            const dataWithInitial = {
                ...todayData,
                initialCigarettes: todayData.initialCigarettes || 0,
                dailyCigarettes: todayData.initialCigarettes || 0
            };
            
            const result = await progressService.updateCheckin(date, dataWithInitial);
            return true;
        } catch (error) {
            console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t d·ªØ li·ªáu checkin v√†o c∆° s·ªü d·ªØ li·ªáu:', error);
            setToast({ 
                show: true, 
                message: '‚ùå Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t d·ªØ li·ªáu l√™n c∆° s·ªü d·ªØ li·ªáu. ƒê√£ l∆∞u c·ª•c b·ªô.', 
                type: 'error' 
            });
            return false;
        }
    };const isTargetAchieved = todayData.actualCigarettes <= todayData.targetCigarettes;    // H√†m ƒë√≥ng toast notification
    const closeToast = () => {
        // Th√™m class ƒë·ªÉ animation ch·∫°y tr∆∞·ªõc khi ·∫©n
        const toastElement = document.querySelector('.toast-notification');
        if (toastElement) {
            toastElement.classList.add('toast-exit');
            setTimeout(() => {
                setToast({ ...toast, show: false });
            }, 300); // ƒê·ª£i animation k·∫øt th√∫c
        } else {
            setToast({ ...toast, show: false });
        }
    };
    
    return (
        <div className="daily-checkin">
            <div className="checkin-header">                <div className="header-content">
                    <div className="header-icon">
                        <FaCalendarCheck />
                    </div>
                    <div className="header-text">
                        <h2>Ghi nh·∫≠n h√¥m nay</h2>
                        <p>Ghi nh·∫≠n ti·∫øn tr√¨nh cai thu·ªëc ng√†y {new Date().toLocaleDateString('vi-VN')}</p>
                    </div>
                </div>

            </div>
            
            <div className="checkin-separator"></div>
            
            {/* Toast Notification */}
            {toast.show && (
                <div className={`toast-notification ${toast.type}`}>
                    <span className="toast-message">{toast.message}</span>
                    <button className="toast-close" onClick={closeToast}>&times;</button>
                </div>
            )}

            <div className="checkin-content">
                {/* Target vs Actual */}
                <div className="progress-section">                    <div className="target-card">
                        <h3>M·ª•c ti√™u h√¥m nay</h3>
                        <div className="target-amount">{todayData.targetCigarettes} ƒëi·∫øu</div>
                        <p>Tu·∫ßn {currentWeek} - K·∫ø ho·∫°ch c·ªßa b·∫°n</p>
                        
                        {todayData.weeklyProgress && (
                            <div className="progress-badge">
                                <span>-{todayData.weeklyProgress.reduction} ƒëi·∫øu ({todayData.weeklyProgress.percentReduction}%)</span>
                                <p>so v·ªõi tu·∫ßn tr∆∞·ªõc</p>
                            </div>
                        )}
                    </div>

                    <div className="vs-divider">VS</div>                    <div className="actual-card">
                        <h3>Th·ª±c t·∫ø ƒë√£ h√∫t</h3>
                        <div className="number-input-container">
                            <button 
                                type="button" 
                                className="number-decrement" 
                                onClick={() => handleInputChange('actualCigarettes', Math.max(0, todayData.actualCigarettes - 1))}
                                disabled={isSubmitted || todayData.actualCigarettes <= 0}
                            >
                                -
                            </button>
                            <input
                                type="number"
                                min="0"
                                max="50"
                                value={todayData.actualCigarettes || 0}
                                onChange={(e) => {
                                    if (!isSubmitted) {
                                        const value = parseInt(e.target.value) || 0;
                                        handleInputChange('actualCigarettes', value);
                                    }
                                }}
                                className="actual-input"
                                disabled={isSubmitted}
                                placeholder="0"
                                style={{
                                    backgroundColor: isSubmitted ? '#f5f5f5' : 'white',
                                    border: isSubmitted ? '2px solid #ddd' : '2px solid #4CAF50',
                                    padding: '8px',
                                    fontSize: '18px',
                                    textAlign: 'center',
                                    borderRadius: '4px',
                                    width: '80px',
                                    color: isSubmitted ? '#999' : '#333'
                                }}
                            />
                            <button 
                                type="button" 
                                className="number-increment" 
                                onClick={() => handleInputChange('actualCigarettes', Math.min(50, todayData.actualCigarettes + 1))}
                                disabled={isSubmitted || todayData.actualCigarettes >= 50}
                            >
                                +
                            </button>
                        </div>
                        <p className={`result ${isTargetAchieved ? 'success' : 'warning'}`}>
                            {isTargetAchieved ? '‚úÖ ƒê·∫°t m·ª•c ti√™u!' : '‚ö†Ô∏è V∆∞·ª£t m·ª•c ti√™u'}
                        </p>
                    </div></div>                {/* Action Buttons */}
                <div className="checkin-actions">
                    {!isSubmitted ? (
                        <button
                            onClick={handleSubmit}
                            className="submit-btn"
                        >
                            <FaSave className="btn-icon" />
                            L∆∞u checkin h√¥m nay
                        </button>
                    ) : (
                        <button
                            onClick={handleEdit}
                            className="edit-btn"
                        >
                            <FaSave className="btn-icon" />
                            C·∫≠p nh·∫≠t s·ªë ƒëi·∫øu h√¥m nay
                        </button>
                    )}                </div>
                {/* Summary Card ƒë√£ ƒë∆∞·ª£c x√≥a v√¨ d∆∞ th·ª´a */}
            </div>
        </div>
    );
};


export default DailyCheckin;
