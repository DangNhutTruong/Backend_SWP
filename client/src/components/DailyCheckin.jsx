import React, { useState, useEffect, useCallback } from "react";
import { FaCalendarCheck, FaSave, FaSpinner } from "react-icons/fa";
import {
  createCheckin,
  updateCheckin,
  getProgressByDate,
  createCheckinData,
} from "../services/progressService";

const DailyCheckin = ({ onProgressUpdate, currentPlan }) => {
  const [todayData, setTodayData] = useState({
    date: new Date().toISOString().split("T")[0],
    targetCigarettes: 12, // S·∫Ω ƒë∆∞·ª£c t√≠nh t·ª´ k·∫ø ho·∫°ch
    actualCigarettes: 0,
    notes: "",
  });

  const [isSubmitted, setIsSubmitted] = useState(false);
  const [currentWeek, setCurrentWeek] = useState(1); // Tu·∫ßn hi·ªán t·∫°i
  const [streakDays, setStreakDays] = useState(0); // S·ªë ng√†y li√™n ti·∫øp ƒë·∫°t m·ª•c ti√™u
  const [activePlanId, setActivePlanId] = useState(null); // ID c·ªßa k·∫ø ho·∫°ch active
  const [isLoading, setIsLoading] = useState(false); // Loading state cho API calls
  const [toast, setToast] = useState({
    show: false,
    message: "",
    type: "success",
  }); // Th√¥ng b√°o d·∫°ng toast    // T√≠nh target cigarettes d·ª±a tr√™n k·∫ø ho·∫°ch v√† ng√†y hi·ªán t·∫°i
  const calculateTodayTarget = useCallback(() => {
    // Ki·ªÉm tra k·ªπ c√°c tr∆∞·ªùng h·ª£p null/undefined
    if (!currentPlan) return 12;
    if (
      !currentPlan.weeks ||
      !Array.isArray(currentPlan.weeks) ||
      currentPlan.weeks.length === 0
    )
      return 12;
    if (!currentPlan.startDate) return currentPlan.weeks[0]?.amount || 12;

    try {
      const today = new Date();
      const startDate = new Date(currentPlan.startDate);

      // Ki·ªÉm tra ng√†y b·∫Øt ƒë·∫ßu h·ª£p l·ªá
      if (isNaN(startDate.getTime())) return currentPlan.weeks[0]?.amount || 12;

      const daysDiff = Math.floor((today - startDate) / (1000 * 60 * 60 * 24));
      const currentWeekNumber = Math.floor(daysDiff / 7) + 1;

      setCurrentWeek(currentWeekNumber);

      // T√¨m tu·∫ßn hi·ªán t·∫°i trong plan
      const currentWeekPlan = currentPlan.weeks.find(
        (w) => w.week === currentWeekNumber
      );
      if (currentWeekPlan) {
        // L·∫•y target c·ªßa tu·∫ßn tr∆∞·ªõc n·∫øu c√≥
        const prevWeekPlan = currentPlan.weeks.find(
          (w) => w.week === currentWeekNumber - 1
        );
        if (prevWeekPlan && prevWeekPlan.amount > currentWeekPlan.amount) {
          const reduction = prevWeekPlan.amount - currentWeekPlan.amount;
          const percentReduction = Math.round(
            (reduction / prevWeekPlan.amount) * 100
          );

          // L∆∞u th√¥ng tin ti·∫øn ƒë·ªô so v·ªõi tu·∫ßn tr∆∞·ªõc
          setTodayData((prev) => ({
            ...prev,
            weeklyProgress: {
              reduction,
              percentReduction,
              prevAmount: prevWeekPlan.amount,
            },
          }));
        }

        return currentWeekPlan.amount;
      }

      // N·∫øu ƒë√£ qua h·∫øt k·∫ø ho·∫°ch, target = 0
      if (currentWeekNumber > currentPlan.weeks.length) {
        return 0;
      }

      // Fallback
      return currentPlan.weeks[0]?.amount || 12;
    } catch (error) {
      console.error("L·ªói khi t√≠nh to√°n m·ª•c ti√™u h√¥m nay:", error);
      return 12; // Fallback an to√†n n·∫øu c√≥ l·ªói
    }
  }, [currentPlan]);

  // T√≠nh streak days
  const calculateStreakDays = () => {
    let streak = 0;
    const today = new Date();

    for (let i = 0; i < 30; i++) {
      const checkDate = new Date(today);
      checkDate.setDate(checkDate.getDate() - i);
      const dateStr = checkDate.toISOString().split("T")[0];

      const savedData = localStorage.getItem(`checkin_${dateStr}`);
      if (savedData) {
        const data = JSON.parse(savedData);
        if (data.actualCigarettes <= data.targetCigarettes) {
          streak++;
        } else {
          break; // Streak b·ªã ph√°
        }
      } else {
        break; // Kh√¥ng c√≥ d·ªØ li·ªáu
      }
    }

    setStreakDays(streak);
  };

  // C·∫≠p nh·∫≠t target khi component mount ho·∫∑c plan thay ƒë·ªïi
  // Load data t·ª´ backend khi component mount
  useEffect(() => {
    const loadTodayData = async () => {
      try {
        const today = new Date().toISOString().split("T")[0];

        // T√¨m planId t·ª´ currentPlan ho·∫∑c localStorage
        let planId = currentPlan?.id || activePlanId;
        if (!planId) {
          // Th·ª≠ l·∫•y t·ª´ localStorage
          const savedPlan = localStorage.getItem("activePlan");
          if (savedPlan) {
            const parsedPlan = JSON.parse(savedPlan);
            planId = parsedPlan.id;
            setActivePlanId(planId);
          }
        }

        if (planId) {
          // Ki·ªÉm tra xem ƒë√£ c√≥ checkin h√¥m nay ch∆∞a
          const existingCheckin = await getProgressByDate(today);
          if (existingCheckin && existingCheckin.length > 0) {
            const todayCheckin = existingCheckin[0];
            setTodayData((prev) => ({
              ...prev,
              actualCigarettes: todayCheckin.cigarettes_smoked || 0,
              notes: todayCheckin.note || "",
            }));
            setIsSubmitted(true);
          }
        }
      } catch (error) {
        console.error("Error loading today data:", error);
        // Fallback to localStorage
        const today = new Date().toISOString().split("T")[0];
        const savedData = localStorage.getItem(`checkin_${today}`);
        if (savedData) {
          const data = JSON.parse(savedData);
          setTodayData(data);
          setIsSubmitted(true);
        }
      }
    };

    loadTodayData();
  }, [currentPlan, activePlanId]);

  useEffect(() => {
    const target = calculateTodayTarget();
    setTodayData((prev) => ({
      ...prev,
      targetCigarettes: target,
    }));
    calculateStreakDays();
  }, [currentPlan, calculateTodayTarget]);

  const handleInputChange = (field, value) => {
    setTodayData((prev) => ({
      ...prev,
      [field]: value,
    }));
  };

  const handleSubmit = async () => {
    setIsLoading(true);

    try {
      const today = new Date().toISOString().split("T")[0];

      // T√¨m planId
      let planId = currentPlan?.id || activePlanId;
      if (!planId) {
        const savedPlan = localStorage.getItem("activePlan");
        if (savedPlan) {
          const parsedPlan = JSON.parse(savedPlan);
          planId = parsedPlan.id;
          setActivePlanId(planId);
        }
      }

      if (!planId) {
        throw new Error("Kh√¥ng t√¨m th·∫•y k·∫ø ho·∫°ch cai thu·ªëc active");
      }

      // T·∫°o d·ªØ li·ªáu checkin
      const checkinData = createCheckinData(
        planId,
        today,
        todayData.actualCigarettes,
        todayData.targetCigarettes,
        todayData.actualCigarettes <= todayData.targetCigarettes
          ? "good"
          : "bad",
        todayData.notes
      );

      // Ki·ªÉm tra xem ƒë√£ c√≥ checkin h√¥m nay ch∆∞a
      const existingCheckin = await getProgressByDate(today);

      if (existingCheckin && existingCheckin.length > 0) {
        // C·∫≠p nh·∫≠t checkin hi·ªán t·∫°i
        await updateCheckin(today, checkinData);
      } else {
        // T·∫°o checkin m·ªõi
        await createCheckin(checkinData);
      }

      // L∆∞u v√†o localStorage ƒë·ªÉ backup
      localStorage.setItem(`checkin_${today}`, JSON.stringify(todayData));

      setIsSubmitted(true);
      calculateStreakDays();

      // Callback ƒë·ªÉ c·∫≠p nh·∫≠t component cha
      if (onProgressUpdate) {
        onProgressUpdate({
          week: currentWeek,
          amount: todayData.actualCigarettes,
          achieved: todayData.actualCigarettes <= todayData.targetCigarettes,
        });
      }

      // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
      setToast({
        show: true,
        message: "‚úÖ ƒê√£ l∆∞u th√¥ng tin checkin h√¥m nay!",
        type: "success",
      });

      // Auto hide toast sau 5 gi√¢y
      setTimeout(() => {
        setToast((prev) => ({ ...prev, show: false }));
      }, 5000);
    } catch (error) {
      console.error("Error saving checkin:", error);

      // Fallback: L∆∞u v√†o localStorage
      const today = new Date().toISOString().split("T")[0];
      localStorage.setItem(`checkin_${today}`, JSON.stringify(todayData));
      setIsSubmitted(true);

      setToast({
        show: true,
        message: "‚ö†Ô∏è ƒê√£ l∆∞u offline. S·∫Ω ƒë·ªìng b·ªô khi c√≥ k·∫øt n·ªëi m·∫°ng.",
        type: "warning",
      });

      setTimeout(() => {
        setToast((prev) => ({ ...prev, show: false }));
      }, 5000);
    } finally {
      setIsLoading(false);
    }
  };

  const handleEdit = () => {
    setIsSubmitted(false);
    // ƒê·∫£m b·∫£o input field ƒë∆∞·ª£c k√≠ch ho·∫°t
    setTimeout(() => {
      const inputField = document.querySelector(".actual-input");
      if (inputField) {
        inputField.disabled = false;
        inputField.focus();
      }
    }, 100);

    // Hi·ªÉn th·ªã toast th√¥ng b√°o thay v√¨ alert
    setToast({
      show: true,
      message: "üìù B·∫°n c√≥ th·ªÉ c·∫≠p nh·∫≠t s·ªë ƒëi·∫øu thu·ªëc ƒë√£ h√∫t h√¥m nay",
      type: "info",
    });

    // Auto hide toast sau 4 gi√¢y
    setTimeout(() => {
      setToast((prev) => ({ ...prev, show: false }));
    }, 4000);
  };
  const isTargetAchieved =
    todayData.actualCigarettes <= todayData.targetCigarettes; // H√†m ƒë√≥ng toast notification
  const closeToast = () => {
    // Th√™m class ƒë·ªÉ animation ch·∫°y tr∆∞·ªõc khi ·∫©n
    const toastElement = document.querySelector(".toast-notification");
    if (toastElement) {
      toastElement.classList.add("toast-exit");
      setTimeout(() => {
        setToast({ ...toast, show: false });
      }, 300); // ƒê·ª£i animation k·∫øt th√∫c
    } else {
      setToast({ ...toast, show: false });
    }
  };

  return (
    <div className="daily-checkin">
      <div className="checkin-header">
        {" "}
        <div className="header-content">
          <div className="header-icon">
            <FaCalendarCheck />
          </div>
          <div className="header-text">
            <h2>Ghi nh·∫≠n h√¥m nay</h2>
            <p>
              Ghi nh·∫≠n ti·∫øn tr√¨nh cai thu·ªëc ng√†y{" "}
              {new Date().toLocaleDateString("vi-VN")}
            </p>
          </div>
        </div>
        {/* Streak counter */}{" "}
        <div className="streak-badge">
          <span className="streak-number">{streakDays}</span>
          <span className="streak-text">ng√†y li√™n ti·∫øp</span>
        </div>
      </div>

      <div className="checkin-separator"></div>

      {/* Toast Notification */}
      {toast.show && (
        <div className={`toast-notification ${toast.type}`}>
          <span className="toast-message">{toast.message}</span>
          <button className="toast-close" onClick={closeToast}>
            &times;
          </button>
        </div>
      )}

      <div className="checkin-content">
        {/* Target vs Actual */}
        <div className="progress-section">
          {" "}
          <div className="target-card">
            <h3>M·ª•c ti√™u h√¥m nay</h3>
            <div className="target-amount">
              {todayData.targetCigarettes} ƒëi·∫øu
            </div>
            <p>Tu·∫ßn {currentWeek} - K·∫ø ho·∫°ch c·ªßa b·∫°n</p>

            {todayData.weeklyProgress && (
              <div className="progress-badge">
                <span>
                  -{todayData.weeklyProgress.reduction} ƒëi·∫øu (
                  {todayData.weeklyProgress.percentReduction}%)
                </span>
                <p>so v·ªõi tu·∫ßn tr∆∞·ªõc</p>
              </div>
            )}
          </div>
          <div className="vs-divider">VS</div>{" "}
          <div className="actual-card">
            <h3>Th·ª±c t·∫ø ƒë√£ h√∫t</h3>
            <div className="number-input-container">
              <button
                type="button"
                className="number-decrement"
                onClick={() =>
                  !isSubmitted &&
                  handleInputChange(
                    "actualCigarettes",
                    Math.max(0, todayData.actualCigarettes - 1)
                  )
                }
                disabled={isSubmitted || todayData.actualCigarettes <= 0}
              >
                -
              </button>
              <input
                type="number"
                min="0"
                max="50"
                value={todayData.actualCigarettes}
                onChange={(e) =>
                  handleInputChange(
                    "actualCigarettes",
                    parseInt(e.target.value) || 0
                  )
                }
                className="actual-input"
                disabled={isSubmitted}
                placeholder="0"
              />
              <button
                type="button"
                className="number-increment"
                onClick={() =>
                  !isSubmitted &&
                  handleInputChange(
                    "actualCigarettes",
                    Math.min(50, todayData.actualCigarettes + 1)
                  )
                }
                disabled={isSubmitted || todayData.actualCigarettes >= 50}
              >
                +
              </button>
            </div>
            <p className={`result ${isTargetAchieved ? "success" : "warning"}`}>
              {isTargetAchieved ? "‚úÖ ƒê·∫°t m·ª•c ti√™u!" : "‚ö†Ô∏è V∆∞·ª£t m·ª•c ti√™u"}
            </p>
          </div>
        </div>{" "}
        {/* Action Buttons */}
        <div className="checkin-actions">
          {!isSubmitted ? (
            <button
              onClick={handleSubmit}
              className="submit-btn"
              disabled={isLoading}
            >
              {isLoading ? (
                <>
                  <FaSpinner className="btn-icon spinning" />
                  ƒêang l∆∞u...
                </>
              ) : (
                <>
                  <FaSave className="btn-icon" />
                  L∆∞u checkin h√¥m nay
                </>
              )}
            </button>
          ) : (
            <button
              onClick={handleEdit}
              className="edit-btn"
              disabled={isLoading}
            >
              <FaSave className="btn-icon" />
              C·∫≠p nh·∫≠t s·ªë ƒëi·∫øu h√¥m nay
            </button>
          )}
        </div>
        {/* Summary Card ƒë√£ ƒë∆∞·ª£c x√≥a v√¨ d∆∞ th·ª´a */}
      </div>
    </div>
  );
};

export default DailyCheckin;
