import React, { useState, useEffect } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { getUserPlans, deletePlan } from '../services/quitPlanService';
import { logDebug } from '../utils/debugHelpers';
import './QuitPlanList.css';

const QuitPlanList = () => {
    const [plans, setPlans] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [updatingPlanId, setUpdatingPlanId] = useState(null);
    const navigate = useNavigate();

    // Fetch danh s√°ch k·∫ø ho·∫°ch khi component ƒë∆∞·ª£c mount
    useEffect(() => {
        fetchPlans();

        // L·∫Øng nghe s·ª± ki·ªán khi c√≥ k·∫ø ho·∫°ch m·ªõi ƒë∆∞·ª£c t·∫°o
        const handlePlanCreated = () => {
            console.log('üîÑ QuitPlanList - Nh·∫≠n event k·∫ø ho·∫°ch m·ªõi ƒë∆∞·ª£c t·∫°o, refresh danh s√°ch...');
            fetchPlans();
        };

        // L·∫Øng nghe s·ª± ki·ªán khi k·∫ø ho·∫°ch b·ªã x√≥a
        const handlePlanDeleted = () => {
            console.log('üóëÔ∏è QuitPlanList - Nh·∫≠n event k·∫ø ho·∫°ch b·ªã x√≥a, refresh danh s√°ch...');
            fetchPlans();
        };

        window.addEventListener('planCreated', handlePlanCreated);
        window.addEventListener('planDeleted', handlePlanDeleted);

        return () => {
            window.removeEventListener('planCreated', handlePlanCreated);
            window.removeEventListener('planDeleted', handlePlanDeleted);
        };
    }, []);

    // H√†m l·∫•y danh s√°ch k·∫ø ho·∫°ch t·ª´ API
    const fetchPlans = async () => {
        try {
            setLoading(true);
            setError(null);

            logDebug('QuitPlanList', 'üìã Fetching user plans...');
            const response = await getUserPlans();

            console.log('üîç QuitPlanList - Raw API response:', response);

            if (response && Array.isArray(response)) {
                // S·∫Øp x·∫øp plans theo ID (th·ª© t·ª± t·∫°o) - c≈© nh·∫•t tr∆∞·ªõc, m·ªõi nh·∫•t sau
                const sortedPlans = response.sort((a, b) => a.id - b.id);
                setPlans(sortedPlans);
                
                console.log(`‚úÖ QuitPlanList - Loaded ${response.length} plans:`, sortedPlans);
                
                // Debug: Show plan IDs for analysis
                const planIds = sortedPlans.map(plan => plan.id);
                console.log('üìä Plan IDs (sorted):', planIds);
                console.log('üìä Min ID:', Math.min(...planIds));
                console.log('üìä Max ID:', Math.max(...planIds));
                
                logDebug('QuitPlanList', `‚úÖ Loaded ${response.length} plans`, sortedPlans);
            } else {
                setPlans([]);
                console.log('üìã QuitPlanList - No plans found or invalid response');
                logDebug('QuitPlanList', 'üìã No plans found');
            }

            setLoading(false);
        } catch (err) {
            console.error('‚ùå QuitPlanList - Error fetching plans:', err);
            setError('Kh√¥ng th·ªÉ t·∫£i danh s√°ch k·∫ø ho·∫°ch. Vui l√≤ng th·ª≠ l·∫°i sau.');
            setLoading(false);
            logDebug('QuitPlanList', '‚ùå Error fetching plans', err, true);
        }
    };

    // H√†m ƒëi·ªÅu h∆∞·ªõng ƒë·∫øn trang t·∫°o k·∫ø ho·∫°ch m·ªõi
    const handleCreateNewPlan = () => {
        navigate('/journey/create');
    };

    // H√†m ƒëi·ªÅu h∆∞·ªõng ƒë·∫øn trang chi ti·∫øt k·∫ø ho·∫°ch
    const handleViewPlanDetails = (planId) => {
        navigate(`/journey/plan/${planId}`);
    };

    // H√†m x√≥a k·∫ø ho·∫°ch
    const handleDeletePlan = async (planId, event) => {
        event.stopPropagation();

        if (!confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a k·∫ø ho·∫°ch n√†y kh√¥ng?')) {
            return;
        }

        try {
            setUpdatingPlanId(planId);

            logDebug('QuitPlanList', `üóëÔ∏è Deleting plan ${planId}`);
            await deletePlan(planId);

            // C·∫≠p nh·∫≠t danh s√°ch k·∫ø ho·∫°ch sau khi x√≥a
            await fetchPlans();

            logDebug('QuitPlanList', `‚úÖ Plan ${planId} deleted successfully`);
        } catch (err) {
            console.error('L·ªói khi x√≥a k·∫ø ho·∫°ch:', err);
            alert('Kh√¥ng th·ªÉ x√≥a k·∫ø ho·∫°ch. Vui l√≤ng th·ª≠ l·∫°i sau.');
            logDebug('QuitPlanList', '‚ùå Error deleting plan', err, true);
        } finally {
            setUpdatingPlanId(null);
        }
    };

    // H√†m ƒë·ªãnh d·∫°ng ng√†y
    const formatDate = (dateString) => {
        if (!dateString) return '';
        const date = new Date(dateString);
        return date.toLocaleDateString('vi-VN', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric'
        });
    };

    // H√†m l·∫•y t√™n tr·∫°ng th√°i ti·∫øng Vi·ªát
    const getStatusLabel = (status) => {
        switch (status) {
            case 'ongoing':
                return 'ƒêang th·ª±c hi·ªán';
            case 'completed':
                return 'Ho√†n th√†nh';
            case 'failed':
                return 'ƒê√£ b·ªè';
            case 'abandoned':
                return 'ƒê√£ t·ª´ b·ªè';
            default:
                return 'ƒêang th·ª±c hi·ªán';
        }
    };

    // H√†m l·∫•y class CSS cho tr·∫°ng th√°i
    const getStatusClass = (status) => {
        switch (status) {
            case 'ongoing':
                return 'status-ongoing';
            case 'completed':
                return 'status-completed';
            case 'failed':
                return 'status-abandoned';
            case 'abandoned':
                return 'status-abandoned';
            default:
                return 'status-ongoing';
        }
    };

    // H√†m t√≠nh ph·∫ßn trƒÉm ti·∫øn ƒë·ªô
    const calculateProgress = (plan) => {
        const startDate = new Date(plan.startDate || plan.start_date);
        const endDate = new Date(plan.endDate || plan.end_date);
        const today = new Date();

        if (today < startDate) return 0;
        if (today > endDate) return 100;

        const totalDays = (endDate - startDate) / (1000 * 60 * 60 * 24);
        const daysElapsed = (today - startDate) / (1000 * 60 * 60 * 24);

        return Math.round((daysElapsed / totalDays) * 100);
    };

    return (
        <div className="quit-plan-list-container">
            <div className="plan-list-header">
                <h1>K·∫ø Ho·∫°ch Cai Thu·ªëc</h1>
                <button className="btn-create-plan" onClick={handleCreateNewPlan}>
                    + T·∫°o k·∫ø ho·∫°ch m·ªõi
                </button>
            </div>

            {/* Debug info */}
            {console.log('üêõ QuitPlanList render - loading:', loading, 'error:', error, 'plans.length:', plans.length, 'plans:', plans)}

            {loading ? (
                <div className="loading-container">
                    <div className="loading-spinner"></div>
                    <p>ƒêang t·∫£i danh s√°ch k·∫ø ho·∫°ch...</p>
                </div>
            ) : error ? (
                <div className="error-container">
                    <div className="error-message">
                        <h3>‚ö†Ô∏è C√≥ l·ªói x·∫£y ra</h3>
                        <p>{error}</p>
                        <button className="btn-retry" onClick={fetchPlans}>
                            üîÑ Th·ª≠ l·∫°i
                        </button>
                    </div>
                </div>
            ) : plans.length === 0 ? (
                <div className="empty-state">
                    <div className="empty-icon">üìã</div>
                    <h2>B·∫°n ch∆∞a c√≥ k·∫ø ho·∫°ch cai thu·ªëc n√†o</h2>
                    <p>H√£y t·∫°o k·∫ø ho·∫°ch ƒë·∫ßu ti√™n ƒë·ªÉ b·∫Øt ƒë·∫ßu h√†nh tr√¨nh cai thu·ªëc l√° c·ªßa b·∫°n!</p>
                    <button className="btn-create-first-plan" onClick={handleCreateNewPlan}>
                        üéØ T·∫°o k·∫ø ho·∫°ch ngay
                    </button>
                </div>
            ) : (
                <div className="plan-cards-grid">
                    {plans.map((plan, index) => {
                        const progress = calculateProgress(plan);
                        const isUpdating = updatingPlanId === plan.id;

                        return (
                            <div
                                key={plan.id}
                                className={`plan-card ${isUpdating ? 'updating' : ''}`}
                                onClick={() => !isUpdating && handleViewPlanDetails(plan.id)}
                            >
                                <div className="plan-card-header">
                                    <h3 className="plan-name">
                                        K·∫ø ho·∫°ch {index + 1}
                                    </h3>
                                    <div className={`plan-status ${getStatusClass(plan.status)}`}>
                                        {getStatusLabel(plan.status)}
                                    </div>
                                </div>

                                <div className="plan-details">
                                    <div className="plan-dates">
                                        <div className="date-item">
                                            <span className="date-label">üìÖ B·∫Øt ƒë·∫ßu:</span>
                                            <span className="date-value">{formatDate(plan.startDate || plan.start_date)}</span>
                                        </div>
                                        <div className="date-item">
                                            <span className="date-label">üèÅ K·∫øt th√∫c:</span>
                                            <span className="date-value">{formatDate(plan.endDate || plan.end_date)}</span>
                                        </div>
                                    </div>

                                    <div className="plan-info">
                                        <div className="info-item">
                                            <span className="info-label">üö¨ S·ªë ƒëi·∫øu ban ƒë·∫ßu:</span>
                                            <span className="info-value">
                                                {plan.initialCigarettes || plan.initial_cigarettes || 0} ƒëi·∫øu/ng√†y
                                            </span>
                                        </div>
                                        <div className="info-item">
                                            <span className="info-label">‚ö° Chi·∫øn l∆∞·ª£c:</span>
                                            <span className="info-value">
                                                {plan.planName?.includes('nhanh') || plan.plan_name?.includes('nhanh') ? 'Nhanh ch√≥ng' : 'T·ª´ t·ª´'}
                                            </span>
                                        </div>
                                    </div>
                                </div>

                                <div className="plan-progress">
                                    <div className="progress-header">
                                        <span className="progress-label">üìà Ti·∫øn ƒë·ªô</span>
                                        <span className="progress-percentage">{progress}%</span>
                                    </div>
                                    <div className="progress-bar">
                                        <div
                                            className="progress-fill"
                                            style={{ width: `${progress}%` }}
                                        ></div>
                                    </div>
                                </div>

                                <div className="plan-actions">
                                    <button
                                        className="btn-view-details"
                                        onClick={(e) => {
                                            e.stopPropagation();
                                            handleViewPlanDetails(plan.id);
                                        }}
                                    >
                                        üëÅÔ∏è Xem chi ti·∫øt
                                    </button>

                                    <div className="status-actions">
                                        {/* Hi·ªÉn th·ªã tr·∫°ng th√°i hi·ªán t·∫°i - ch·ªâ ƒë·ªçc */}
                                        <div className={`status-display ${getStatusClass(plan.status)}`}>
                                            {plan.status === 'ongoing' && 'üîÑ ƒêang th·ª±c hi·ªán'}
                                            {plan.status === 'completed' && '‚úÖ Ho√†n th√†nh'}
                                            {plan.status === 'failed' && '‚ùå ƒê√£ t·ª´ b·ªè'}
                                        </div>

                                        <button
                                            className="btn-delete"
                                            onClick={(e) => handleDeletePlan(plan.id, e)}
                                            disabled={isUpdating}
                                            title="X√≥a k·∫ø ho·∫°ch vƒ©nh vi·ªÖn"
                                        >
                                            üóëÔ∏è
                                        </button>
                                    </div>
                                </div>

                                {isUpdating && (
                                    <div className="updating-overlay">
                                        <div className="updating-spinner"></div>
                                    </div>
                                )}
                            </div>
                        );
                    })}
                </div>
            )}
        </div>
    );
};

export default QuitPlanList;
