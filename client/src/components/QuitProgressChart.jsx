import React, { useState, useEffect } from 'react';
import { Chart as ChartJS } from 'chart.js/auto';
import { Line } from 'react-chartjs-2';
import '../styles/QuitProgressChart.css';

const QuitProgressChart = ({ userPlan, actualProgress, timeFilter = '30 ng√†y', height = 300 }) => {
    const [chartData, setChartData] = useState(null);
    const [isLoading, setIsLoading] = useState(true);

    useEffect(() => {
        const createChart = () => {
            console.log("üìä T·∫°o bi·ªÉu ƒë·ªì v·ªõi d·ªØ li·ªáu:", {
                userPlan: userPlan ? 'C√≥' : 'Kh√¥ng',
                userPlanWeeks: userPlan?.weeks?.length || 0,
                actualProgress: actualProgress?.length || 0,
                userPlanDetails: userPlan
            });
            
            // Parse plan_details n·∫øu c√≥
            let parsedPlan = null;
            if (userPlan?.plan_details) {
                try {
                    parsedPlan = JSON.parse(userPlan.plan_details);
                    console.log("üîç Parsed plan_details:", parsedPlan);
                } catch (error) {
                    console.error("‚ùå Error parsing plan_details:", error);
                }
            }
            
            console.log("üîç DEBUG userPlan structure:", {
                userPlan: userPlan,
                planName: userPlan?.plan_name || userPlan?.planName,
                weeks: parsedPlan?.weeks || userPlan?.weeks,
                weeksIsArray: Array.isArray(parsedPlan?.weeks || userPlan?.weeks),
                weeksLength: (parsedPlan?.weeks || userPlan?.weeks)?.length,
                startDate: userPlan?.start_date || userPlan?.startDate,
                initialCigarettes: parsedPlan?.initialCigarettes || userPlan?.initial_cigarettes || userPlan?.initialCigarettes,
                parsedPlan: parsedPlan
            });

            // T·∫°o c·∫•u tr√∫c d·ªØ li·ªáu chart c∆° b·∫£n
            const chartDataStructure = {
                labels: [],
                datasets: [
                    {
                        label: 'K·∫ø ho·∫°ch d·ª± ki·∫øn',
                        data: [],
                        borderColor: '#4285f4',
                        backgroundColor: 'rgba(66, 133, 244, 0.1)',
                        borderWidth: 2,
                        fill: false,
                        tension: 0.1,
                        pointRadius: 4,
                        pointHoverRadius: 6,
                        pointBackgroundColor: '#4285f4',
                        pointBorderColor: '#ffffff',
                        pointBorderWidth: 2
                    },
                    {
                        label: 'Th·ª±c t·∫ø',
                        data: [],
                        borderColor: '#34a853',
                        backgroundColor: 'rgba(52, 168, 83, 0.1)',
                        borderWidth: 3,
                        fill: false,
                        tension: 0.1,
                        pointRadius: 6,
                        pointHoverRadius: 8,
                        pointBackgroundColor: '#34a853',
                        pointBorderColor: '#ffffff',
                        pointBorderWidth: 2,
                        spanGaps: true
                    },
                    {
                        label: 'M·ª•c ti√™u (0 ƒëi·∫øu)',
                        data: [],
                        borderColor: '#ea4335',
                        backgroundColor: 'rgba(234, 67, 53, 0.1)',
                        borderWidth: 2,
                        borderDash: [5, 5],
                        fill: false,
                        pointRadius: 0,
                        pointHoverRadius: 0
                    }
                ]
            };

            // T·∫°o d·ªØ li·ªáu cho to√†n b·ªô k·∫ø ho·∫°ch
            const createFullPlanData = () => {
                console.log("üîç Ki·ªÉm tra userPlan ƒë·ªÉ t·∫°o d·ªØ li·ªáu:", {
                    userPlan: userPlan,
                    hasWeeks: userPlan?.weeks ? true : false,
                    weeksLength: userPlan?.weeks?.length || 0,
                    weeks: userPlan?.weeks,
                    parsedWeeks: parsedPlan?.weeks
                });

                // S·ª≠ d·ª•ng weeks t·ª´ userPlan ƒë√£ ƒë∆∞·ª£c parse ho·∫∑c t·ª´ parsedPlan
                const planWeeks = userPlan?.weeks || parsedPlan?.weeks;
                
                if (!planWeeks || planWeeks.length === 0) {
                    console.log("‚ùå Kh√¥ng c√≥ k·∫ø ho·∫°ch weeks, th·ª≠ t·∫°o t·ª´ totalWeeks v√† initialCigarettes");
                    
                    // L·∫•y th√¥ng tin t·ª´ userPlan ƒë√£ parse ho·∫∑c parsedPlan
                    const totalWeeks = userPlan?.totalWeeks || parsedPlan?.totalWeeks || 8;
                    const initialCigs = userPlan?.initialCigarettes || parsedPlan?.initialCigarettes || 22;
                    
                    console.log("üîß T·∫°o weeks t·ª± ƒë·ªông v·ªõi:", { totalWeeks, initialCigs });
                    
                    const generatedWeeks = [];
                    for (let i = 0; i < totalWeeks; i++) {
                        const weekTarget = Math.max(0, Math.round(initialCigs * (1 - ((i + 1) / totalWeeks))));
                        generatedWeeks.push({
                            week: i + 1,
                            amount: weekTarget,
                            target: weekTarget,
                            targetCigarettes: weekTarget,
                            cigarettes: weekTarget
                        });
                    }
                    
                    console.log("üìã Generated weeks:", generatedWeeks);
                    
                    // T·∫°o d·ªØ li·ªáu t·ª´ weeks ƒë∆∞·ª£c t·∫°o
                    const labels = [];
                    const planData = [];
                    const actualData = [];
                    
                    const startDate = userPlan?.start_date ? 
                        new Date(userPlan.start_date) : new Date();
                    
                    generatedWeeks.forEach((week, weekIndex) => {
                        for (let day = 0; day < 7; day++) {
                            const currentDate = new Date(startDate);
                            currentDate.setDate(startDate.getDate() + (weekIndex * 7) + day);
                            
                            const weekLabel = `T${weekIndex + 1}-${day + 1}`;
                            labels.push(weekLabel);
                            planData.push(week.target);
                            
                            const dateStr = currentDate.toISOString().split('T')[0];
                            const actualRecord = actualProgress?.find(item => item.date === dateStr);
                            actualData.push(actualRecord?.actualCigarettes !== undefined ? actualRecord.actualCigarettes : null);
                        }
                    });
                    
                    return { labels, planData, actualData };
                }

                const labels = [];
                const planData = [];
                const actualData = [];
                
                // L·∫•y ng√†y b·∫Øt ƒë·∫ßu k·∫ø ho·∫°ch
                const startDate = userPlan?.start_date ? new Date(userPlan.start_date) : new Date();
                console.log("üìÖ Ng√†y b·∫Øt ƒë·∫ßu k·∫ø ho·∫°ch:", startDate);
                
                // T·∫°o data cho t·ª´ng tu·∫ßn c·ªßa k·∫ø ho·∫°ch
                planWeeks.forEach((week, weekIndex) => {
                    console.log(`üîç X·ª≠ l√Ω tu·∫ßn ${weekIndex + 1}:`, week);
                    
                    // T·∫°o 7 ng√†y cho m·ªói tu·∫ßn
                    for (let day = 0; day < 7; day++) {
                        const currentDate = new Date(startDate);
                        currentDate.setDate(startDate.getDate() + (weekIndex * 7) + day);
                        
                        const dateStr = currentDate.toISOString().split('T')[0];
                        
                        // T·∫°o nh√£n hi·ªÉn th·ªã: Tu·∫ßn X - Ng√†y Y
                        const weekLabel = `T${weekIndex + 1}-${day + 1}`;
                        labels.push(weekLabel);
                        
                        // L·∫•y target t·ª´ week data
                        const planValue = week.target || week.amount || week.targetCigarettes || week.cigarettes || 0;
                        planData.push(planValue);
                        
                        // T√¨m d·ªØ li·ªáu th·ª±c t·∫ø cho ng√†y n√†y
                        const actualRecord = actualProgress?.find(item => item.date === dateStr);
                        actualData.push(actualRecord?.actualCigarettes !== undefined ? actualRecord.actualCigarettes : null);
                    }
                });

                console.log("üìä D·ªØ li·ªáu k·∫ø ho·∫°ch ƒë√£ t·∫°o:", {
                    totalDays: labels.length,
                    totalWeeks: planWeeks.length,
                    labels: labels.slice(0, 10),
                    planData: planData.slice(0, 10),
                    actualDataPoints: actualData.filter(d => d !== null).length
                });

                return { labels, planData, actualData };
            };

            // N·∫øu c√≥ k·∫ø ho·∫°ch, hi·ªÉn th·ªã to√†n b·ªô k·∫ø ho·∫°ch
            if (userPlan) {
                console.log("‚úÖ C√≥ userPlan, t·∫°o d·ªØ li·ªáu t·ª´ userPlan th·ª±c t·∫ø");
                
                // L·∫•y th√¥ng tin t·ª´ userPlan ƒë√£ ƒë∆∞·ª£c parse
                const totalWeeks = userPlan.totalWeeks || parsedPlan?.totalWeeks || 8;
                const initialCigs = userPlan.initialCigarettes || parsedPlan?.initialCigarettes || 22;
                const planWeeks = userPlan.weeks || parsedPlan?.weeks;
                
                console.log("üìã Th√¥ng tin userPlan:", {
                    totalWeeks: totalWeeks,
                    initialCigs: initialCigs,
                    planName: userPlan.plan_name || userPlan.planName,
                    hasWeeks: planWeeks ? true : false,
                    weeksLength: planWeeks?.length || 0,
                    planWeeks: planWeeks?.slice(0, 3) // Show first 3 weeks as sample
                });
                
                let fullPlanData;
                
                // N·∫øu c√≥ weeks data, s·ª≠ d·ª•ng n√≥
                if (planWeeks && planWeeks.length > 0) {
                    console.log("üîß S·ª≠ d·ª•ng weeks c√≥ s·∫µn t·ª´ userPlan");
                    fullPlanData = createFullPlanData();
                } else {
                    console.log("üîß T·∫°o weeks t·ª´ totalWeeks v√† initialCigarettes");
                    // T·∫°o weeks t·ª´ th√¥ng tin c∆° b·∫£n
                    const generatedWeeks = [];
                    for (let week = 1; week <= totalWeeks; week++) {
                        const weekTarget = Math.max(0, Math.round(initialCigs * (1 - (week / totalWeeks))));
                        generatedWeeks.push({
                            week: week,
                            target: weekTarget,
                            amount: weekTarget,
                            targetCigarettes: weekTarget,
                            cigarettes: weekTarget
                        });
                    }
                    
                    const labels = [];
                    const planData = [];
                    const actualData = [];
                    
                    const startDate = userPlan.start_date ? new Date(userPlan.start_date) : new Date();
                    
                    // T·∫°o d·ªØ li·ªáu cho totalWeeks x 7 ng√†y
                    generatedWeeks.forEach((week, weekIndex) => {
                        for (let day = 0; day < 7; day++) {
                            const currentDate = new Date(startDate);
                            currentDate.setDate(startDate.getDate() + (weekIndex * 7) + day);
                            
                            const weekLabel = `T${weekIndex + 1}-${day + 1}`;
                            labels.push(weekLabel);
                            planData.push(week.target);
                            
                            const dateStr = currentDate.toISOString().split('T')[0];
                            const actualRecord = actualProgress?.find(item => item.date === dateStr);
                            actualData.push(actualRecord?.actualCigarettes !== undefined ? actualRecord.actualCigarettes : null);
                        }
                    });
                    
                    fullPlanData = { 
                        labels: labels, 
                        planData: planData, 
                        actualData: actualData 
                    };
                }
                
                console.log("üìä D·ªØ li·ªáu t·ª´ userPlan:", {
                    totalDays: fullPlanData.labels.length,
                    totalWeeks: totalWeeks,
                    initialCigs: initialCigs,
                    sampleLabels: fullPlanData.labels.slice(0, 10),
                    samplePlanData: fullPlanData.planData.slice(0, 10)
                });
                
                if (fullPlanData.labels.length > 0) {
                    chartDataStructure.labels = fullPlanData.labels;
                    chartDataStructure.datasets[0].data = fullPlanData.planData;
                    chartDataStructure.datasets[1].data = fullPlanData.actualData;
                    chartDataStructure.datasets[2].data = new Array(fullPlanData.labels.length).fill(0);
                    
                    console.log("üìä Hi·ªÉn th·ªã to√†n b·ªô k·∫ø ho·∫°ch:", {
                        totalDays: fullPlanData.labels.length,
                        totalWeeks: totalWeeks,
                        planDataPoints: fullPlanData.planData.filter(d => d > 0).length,
                        actualDataPoints: fullPlanData.actualData.filter(d => d !== null).length
                    });
                } else {
                    console.log("‚ö†Ô∏è Kh√¥ng t·∫°o ƒë∆∞·ª£c d·ªØ li·ªáu k·∫ø ho·∫°ch");
                }
            }
            // Fallback: n·∫øu kh√¥ng c√≥ k·∫ø ho·∫°ch nh∆∞ng c√≥ d·ªØ li·ªáu th·ª±c t·∫ø
            else if (actualProgress && actualProgress.length > 0) {
                console.log("‚úÖ Kh√¥ng c√≥ k·∫ø ho·∫°ch, s·ª≠ d·ª•ng d·ªØ li·ªáu th·ª±c t·∫ø");
                const realLabels = [];
                const realPlanData = [];
                const realActualData = [];

                // S·∫Øp x·∫øp theo ng√†y v√† hi·ªÉn th·ªã t·∫•t c·∫£ d·ªØ li·ªáu
                const sortedData = [...actualProgress].sort((a, b) => new Date(a.date) - new Date(b.date));

                sortedData.forEach(item => {
                    const date = new Date(item.date);
                    realLabels.push(`${date.getDate()}/${date.getMonth() + 1}`);
                    realPlanData.push(item.targetCigarettes || 0);
                    realActualData.push(item.actualCigarettes !== null ? item.actualCigarettes : null);
                });

                if (realLabels.length > 0) {
                    chartDataStructure.labels = realLabels;
                    chartDataStructure.datasets[0].data = realPlanData;
                    chartDataStructure.datasets[1].data = realActualData;
                    chartDataStructure.datasets[2].data = new Array(realLabels.length).fill(0);
                    
                    console.log("üìä S·ª≠ d·ª•ng d·ªØ li·ªáu th·ª±c t·∫ø:", {
                        labels: realLabels,
                        plan: realPlanData,
                        actual: realActualData.filter(d => d !== null)
                    });
                }
            } else {
                console.log("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu k·∫ø ho·∫°ch v√† d·ªØ li·ªáu th·ª±c t·∫ø");
            }

            setChartData(chartDataStructure);
            setIsLoading(false);
        };

        createChart();
    }, [userPlan, actualProgress, timeFilter]);

    const options = {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
            legend: {
                position: 'top',
                labels: {
                    usePointStyle: true,
                    padding: 20,
                    font: { size: 12 }
                }
            },
            tooltip: {
                mode: 'index',
                intersect: false,
                callbacks: {
                    label: function(context) {
                        const value = context.parsed.y;
                        if (value === null) return null;
                        return `${context.dataset.label}: ${value} ƒëi·∫øu/ng√†y`;
                    }
                }
            }
        },
        scales: {
            x: {
                display: true,
                title: {
                    display: true,
                    text: 'Th·ªùi gian (Ng√†y)',
                    font: { size: 14, weight: 'bold' }
                },
                ticks: {
                    maxTicksLimit: 15, // Gi·ªõi h·∫°n s·ªë nh√£n hi·ªÉn th·ªã ƒë·ªÉ kh√¥ng qu√° ƒë√¥ng
                    callback: function(value, index, values) {
                        // Hi·ªÉn th·ªã m·ªói v√†i ng√†y m·ªôt ƒë·ªÉ bi·ªÉu ƒë·ªì kh√¥ng b·ªã ch·∫≠t
                        if (chartData && chartData.labels && chartData.labels.length > 14) {
                            // Hi·ªÉn th·ªã m·ªói 7 ng√†y (ƒë·∫ßu m·ªói tu·∫ßn)
                            return index % 7 === 0 ? this.getLabelForValue(value) : '';
                        }
                        return this.getLabelForValue(value);
                    }
                }
            },
            y: {
                display: true,
                title: {
                    display: true,
                    text: 'S·ªë ƒëi·∫øu thu·ªëc/ng√†y',
                    font: { size: 14, weight: 'bold' }
                },
                beginAtZero: true,
                suggestedMax: Math.max(25, chartData?.datasets?.[0]?.data?.reduce((max, val) => Math.max(max, val || 0), 0) || 25),
                ticks: {
                    callback: function(value) {
                        return value + ' ƒëi·∫øu';
                    }
                }
            }
        },
        interaction: {
            mode: 'nearest',
            axis: 'x',
            intersect: false
        }
    };

    if (isLoading) {
        return (
            <div style={{ height: height, display: 'flex', justifyContent: 'center', alignItems: 'center' }}>
                <p>ƒêang t·∫£i bi·ªÉu ƒë·ªì...</p>
            </div>
        );
    }

    return (
        <div className="quit-progress-chart" style={{ height: height }}>
            <div className="chart-wrapper">
                <Line 
                    data={chartData}
                    options={options}
                    height={height - 50}
                />
            </div>
        </div>
    );
};

export default QuitProgressChart;
