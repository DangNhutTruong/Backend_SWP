import React, { useState, useEffect, useReducer } from 'react';
import './CheckinHistory.css';
import { FaCalendarAlt, FaEdit, FaSave, FaTimes, FaChevronLeft, FaChevronRight, FaSync, FaTrash } from 'react-icons/fa';
import progressService from '../services/progressService';
import { getCurrentUserId } from '../utils/userUtils';
import { useAuth } from '../context/AuthContext';
import '../styles/CheckinHistory.css';

const CheckinHistory = ({ onProgressUpdate, activePlan: propActivePlan, dashboardStats, actualProgress, completionDate, onDataReset }) => {
    const { user } = useAuth();
    const [checkinHistory, setCheckinHistory] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [editingEntry, setEditingEntry] = useState(null);
    const [tempEditData, setTempEditData] = useState({});
    const [currentPage, setCurrentPage] = useState(1);
    const [entriesPerPage] = useState(7); // Hi·ªÉn th·ªã 7 ng√†y m·ªói trang
    const [toast, setToast] = useState({ show: false, message: '', type: 'success' });
    // S·ª≠ d·ª•ng useReducer ƒë·ªÉ force update component khi c·∫ßn thi·∫øt
    const [, forceUpdate] = useReducer(x => x + 1, 0);
    // State ƒë·ªÉ ki·ªÉm so√°t vi·ªác m·ªü/ƒë√≥ng sidebar
    const [isSidebarOpen, setIsSidebarOpen] = useState(false);

    // T·∫£i k·∫ø ho·∫°ch t·ª´ database ƒë·ªÉ l·∫•y initialCigarettes
    const [userPlan, setUserPlan] = useState(null);

    // H√†m t√≠nh ti·ªÅn ti·∫øt ki·ªám d·ª±a tr√™n pack price t·ª´ k·∫ø ho·∫°ch
    const calculateMoneySaved = (cigarettesAvoided, plan) => {
        let packPrice = 25000; // Gi√° m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng t√¨m th·∫•y

        // L·∫•y gi√° g√≥i thu·ªëc t·ª´ k·∫ø ho·∫°ch hi·ªán t·∫°i
        try {
            if (plan && plan.packPrice) {
                packPrice = plan.packPrice;
                console.log('üîç CheckinHistory calculateMoneySaved - Got packPrice from plan:', packPrice);
            } else {
                // Fallback: L·∫•y t·ª´ localStorage
                const localPlan = localStorage.getItem('activePlan');
                if (localPlan) {
                    const parsedPlan = JSON.parse(localPlan);
                    if (parsedPlan.packPrice) {
                        packPrice = parsedPlan.packPrice;
                        console.log('üîç CheckinHistory calculateMoneySaved - Got packPrice from localStorage:', packPrice);
                    }
                }
            }
        } catch (error) {
            console.error('Error getting pack price:', error);
        }

        const costPerCigarette = packPrice / 20; // Gi·∫£ s·ª≠ 1 g√≥i = 20 ƒëi·∫øu
        const moneySaved = Math.round(cigarettesAvoided * costPerCigarette);

        console.log('üîç CheckinHistory calculateMoneySaved - Calculation:', {
            cigarettesAvoided,
            packPrice,
            costPerCigarette,
            moneySaved
        });

        return moneySaved;
    };

    // H√†m chuy·ªÉn ƒë·ªïi tr·∫°ng th√°i c·ªßa sidebar (m·ªü/ƒë√≥ng)
    const toggleSidebar = () => {
        setIsSidebarOpen(!isSidebarOpen);
    };

    // H√†m t√≠nh t·ªïng s·ªë ƒëi·∫øu ƒë√£ tr√°nh t·ª´ l·ªãch s·ª≠ check-in
    const calculateTotalCigarettesAvoided = (historyData) => {
        if (!historyData || historyData.length === 0) {
            return 0;
        }

        let totalAvoided = 0;
        historyData.forEach(entry => {
            // Ch·ªâ t√≠nh nh·ªØng ng√†y c√≥ d·ªØ li·ªáu th·ª±c t·∫ø (kh√¥ng ph·∫£i N/A)
            if (entry.cigarettesAvoided !== null && entry.cigarettesAvoided !== undefined && !entry.isEmpty) {
                totalAvoided += entry.cigarettesAvoided;
            }
        });

        console.log('üîç CheckinHistory - Total cigarettes avoided:', totalAvoided);
        return totalAvoided;
    };

    // H√†m t√≠nh t·ªïng s·ªë ti·ªÅn ƒë√£ ti·∫øt ki·ªám t·ª´ l·ªãch s·ª≠ check-in
    const calculateTotalMoneySaved = (historyData) => {
        if (!historyData || historyData.length === 0) {
            return 0;
        }

        let totalMoney = 0;
        historyData.forEach(entry => {
            // Ch·ªâ t√≠nh nh·ªØng ng√†y c√≥ d·ªØ li·ªáu th·ª±c t·∫ø (kh√¥ng ph·∫£i N/A)
            if (entry.moneySaved !== null && entry.moneySaved !== undefined && !entry.isEmpty) {
                totalMoney += entry.moneySaved;
            }
        });

        console.log('üîç CheckinHistory - Total money saved:', totalMoney);
        return totalMoney;
    };

    // H√†m th√¥ng b√°o k·∫øt qu·∫£ t·ªïng s·ªë ƒëi·∫øu ƒë√£ tr√°nh cho component kh√°c
    const notifyTotalCigarettesAvoided = (total) => {
        // Dispatch custom event ƒë·ªÉ th√¥ng b√°o cho ProgressDashboard ho·∫∑c component kh√°c
        const event = new CustomEvent('totalCigarettesAvoidedUpdated', {
            detail: { totalCigarettesAvoided: total }
        });
        window.dispatchEvent(event);

        // C≈©ng c√≥ th·ªÉ l∆∞u v√†o localStorage ƒë·ªÉ component kh√°c c√≥ th·ªÉ ƒë·ªçc
        localStorage.setItem('totalCigarettesAvoided', total.toString());
    };

    // H√†m th√¥ng b√°o k·∫øt qu·∫£ t·ªïng s·ªë ti·ªÅn ƒë√£ ti·∫øt ki·ªám cho component kh√°c
    const notifyTotalMoneySaved = (total) => {
        // Dispatch custom event ƒë·ªÉ th√¥ng b√°o cho ProgressDashboard ho·∫∑c component kh√°c
        const event = new CustomEvent('totalMoneySavedUpdated', {
            detail: { totalMoneySaved: total }
        });
        window.dispatchEvent(event);

        // C≈©ng c√≥ th·ªÉ l∆∞u v√†o localStorage ƒë·ªÉ component kh√°c c√≥ th·ªÉ ƒë·ªçc
        localStorage.setItem('totalMoneySaved', total.toString());
    };

    // H√†m l·∫•y k·∫ø ho·∫°ch c·ªßa ng∆∞·ªùi d√πng t·ª´ localStorage ho·∫∑c API
    const loadUserPlan = async () => {
        try {
            console.log('üîç CheckinHistory loadUserPlan - Starting...');

            // ∆Øu ti√™n l·∫•y t·ª´ localStorage (k·∫ø ho·∫°ch ƒë∆∞·ª£c ch·ªçn t·ª´ ActivePlanSelector)
            const localPlan = localStorage.getItem('activePlan');
            console.log('üîç CheckinHistory loadUserPlan - localPlan:', localPlan);

            if (localPlan) {
                const parsedPlan = JSON.parse(localPlan);
                setUserPlan(parsedPlan);
                console.log('üîç CheckinHistory - Set plan from localStorage:', parsedPlan);
                return parsedPlan;
            }

            // Fallback: Load t·ª´ API n·∫øu kh√¥ng c√≥ trong localStorage
            const quitPlanService = await import('../services/quitPlanService');
            const response = await quitPlanService.getUserActivePlan();

            if (response && response.success && response.plan) {
                let plan = response.plan;
                console.log('üîç CheckinHistory loadUserPlan - plan from API:', plan);

                // Parse plan_details n·∫øu n√≥ l√† string
                if (plan.plan_details && typeof plan.plan_details === 'string') {
                    try {
                        const parsedDetails = JSON.parse(plan.plan_details);
                        plan = { ...plan, ...parsedDetails };
                    } catch (e) {
                        console.error('Error parsing plan_details:', e);
                    }
                }

                setUserPlan(plan);
                return plan;
            }
            return null;
        } catch (error) {
            console.error('‚ùå Error loading plan:', error);
            return null;
        }
    };

    // L·∫•y initialCigarettes t·ª´ plan
    const getInitialCigarettesFromPlan = (plan) => {
        if (!plan) return 0;

        // ∆Øu ti√™n l·∫•y t·ª´ initialCigarettes tr·ª±c ti·∫øp
        if (plan.initialCigarettes) {
            return plan.initialCigarettes;
        } else if (plan.initial_cigarettes) {
            return plan.initial_cigarettes;
        } else if (plan.dailyCigarettes) {
            return plan.dailyCigarettes;
        } else if (plan.daily_cigarettes) {
            return plan.daily_cigarettes;
        } else if (plan.weeks && plan.weeks.length > 0) {
            // L·∫•y t·ª´ tu·∫ßn ƒë·∫ßu ti√™n
            const firstWeek = plan.weeks[0];
            return firstWeek.amount || firstWeek.cigarettes ||
                firstWeek.dailyCigarettes || firstWeek.daily_cigarettes ||
                firstWeek.target || 0;
        }

        return 0;
    };

    // H√†m t·∫°o danh s√°ch c√°c ng√†y t·ª´ ng√†y b·∫Øt ƒë·∫ßu k·∫ø ho·∫°ch ƒë·∫øn ng√†y k·∫øt th√∫c (bao g·ªìm c·∫£ ng√†y t∆∞∆°ng lai)
    const generateDaysArray = (startDate, endDate = null) => {
        const today = new Date();
        const start = new Date(startDate);
        const days = [];

        // N·∫øu ng√†y b·∫Øt ƒë·∫ßu kh√¥ng h·ª£p l·ªá, s·ª≠ d·ª•ng 30 ng√†y tr∆∞·ªõc
        const validStartDate = !isNaN(start) ? start : new Date(today.getTime() - 30 * 24 * 60 * 60 * 1000);

        // X√°c ƒë·ªãnh ng√†y k·∫øt th√∫c: endDate n·∫øu c√≥, ho·∫∑c h√¥m nay
        let validEndDate = today;
        if (endDate) {
            const end = new Date(endDate);
            if (!isNaN(end)) {
                // S·ª≠ d·ª•ng ng√†y k·∫øt th√∫c c·ªßa k·∫ø ho·∫°ch, bao g·ªìm c·∫£ ng√†y t∆∞∆°ng lai
                validEndDate = end;
            }
        }

        console.log('üìÖ generateDaysArray - Start:', validStartDate.toISOString().split('T')[0],
            'End:', validEndDate.toISOString().split('T')[0]);

        // T·∫°o m·∫£ng c√°c ng√†y t·ª´ ng√†y b·∫Øt ƒë·∫ßu ƒë·∫øn ng√†y k·∫øt th√∫c
        for (let day = new Date(validStartDate); day <= validEndDate; day.setDate(day.getDate() + 1)) {
            const dateStr = day.toISOString().split('T')[0];
            days.push(dateStr);
        }

        console.log('üìÖ generateDaysArray - Generated', days.length, 'days');
        return days;
    };

    // H√†m t·∫°o check-in tr·ªëng cho m·ªôt ng√†y
    const createEmptyCheckin = (date, initialCigarettes, targetCigarettes = null) => {
        // M·ª•c ti√™u ph·∫£i l·∫•y t·ª´ k·∫ø ho·∫°ch, kh√¥ng ph·∫£i s·ªë ƒëi·∫øu ban ƒë·∫ßu
        // N·∫øu kh√¥ng c√≥ m·ª•c ti√™u c·ª• th·ªÉ, g√°n gi√° tr·ªã 0 ƒë·ªÉ ng∆∞·ªùi d√πng s·∫Ω ƒëi·ªÅn sau
        const target = targetCigarettes !== null ? targetCigarettes : 0;

        return {
            date,
            targetCigarettes: target, // S·ª≠ d·ª•ng gi√° tr·ªã m·ª•c ti√™u t·ª´ k·∫ø ho·∫°ch
            actualCigarettes: null,   // Gi√° tr·ªã null ƒë·ªÉ hi·ªÉn th·ªã N/A (ch∆∞a nh·∫≠p)
            initialCigarettes: initialCigarettes,
            cigarettesAvoided: null,  // Null ƒë·ªÉ hi·ªÉn th·ªã N/A (ch∆∞a c√≥ d·ªØ li·ªáu)
            moneySaved: null,         // Null ƒë·ªÉ hi·ªÉn th·ªã N/A (ch∆∞a c√≥ d·ªØ li·ªáu)
            healthScore: null,        // Null ƒë·ªÉ hi·ªÉn th·ªã N/A (ch∆∞a c√≥ d·ªØ li·ªáu)
            notes: '',
            isEmpty: true             // ƒê√°nh d·∫•u l√† b·∫£n ghi tr·ªëng (ch∆∞a nh·∫≠p d·ªØ li·ªáu)
        };
    };

    // H√†m t√≠nh m·ª•c ti√™u cho t·ª´ng ng√†y d·ª±a tr√™n k·∫ø ho·∫°ch
    const getTargetCigarettesForDate = (date, plan) => {
        if (!plan || !plan.weeks || (!plan.startDate && !plan.start_date)) {
            console.log('üîç CheckinHistory - Kh√¥ng t√¨m th·∫•y th√¥ng tin k·∫ø ho·∫°ch ƒë·∫ßy ƒë·ªß ƒë·ªÉ t√≠nh m·ª•c ti√™u');
            return 0;
        }

        const planStartDate = new Date(plan.startDate || plan.start_date);
        const targetDate = new Date(date);
        const daysSincePlanStart = Math.floor((targetDate - planStartDate) / (1000 * 60 * 60 * 24));

        if (daysSincePlanStart < 0) {
            return getInitialCigarettesFromPlan(plan);
        }

        let currentWeekIndex = 0;
        let daysPassed = 0;

        for (let i = 0; i < plan.weeks.length; i++) {
            if (daysSincePlanStart >= daysPassed && daysSincePlanStart < daysPassed + 7) {
                currentWeekIndex = i;
                break;
            }
            daysPassed += 7;
        }

        if (currentWeekIndex >= plan.weeks.length) {
            currentWeekIndex = plan.weeks.length - 1;
        }

        const week = plan.weeks[currentWeekIndex];
        return week ? (week.target ?? week.amount ?? week.cigarettes ?? 0) : 0;
    };

    // T·∫£i l·ªãch s·ª≠ check-in
    useEffect(() => {
        const loadCheckinHistory = async () => {
            try {
                setLoading(true);
                setError(null);

                const userId = getCurrentUserId();
                if (!userId) {
                    throw new Error('User not logged in');
                }

                // L·∫•y k·∫ø ho·∫°ch c·ªßa ng∆∞·ªùi d√πng tr∆∞·ªõc ƒë·ªÉ ƒë·∫£m b·∫£o c√≥ initialCigarettes ƒë√∫ng
                const plan = await loadUserPlan();
                let initialCigarettesFromPlan = 30; // Gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng t√¨m th·∫•y k·∫ø ho·∫°ch
                let planStartDate = null;
                let planEndDate = null;

                if (plan) {
                    initialCigarettesFromPlan = getInitialCigarettesFromPlan(plan) || 30;
                    console.log('üîç CheckinHistory - initialCigarettes from plan:', initialCigarettesFromPlan);

                    // L·∫•y ng√†y b·∫Øt ƒë·∫ßu k·∫ø ho·∫°ch n·∫øu c√≥
                    planStartDate = plan.startDate || plan.start_date;

                    // T√≠nh ng√†y k·∫øt th√∫c d·ª±a tr√™n s·ªë tu·∫ßn
                    if (planStartDate && plan.weeks && plan.weeks.length > 0) {
                        const startDate = new Date(planStartDate);
                        const totalWeeks = plan.total_weeks || plan.totalWeeks || plan.weeks.length;
                        const endDate = new Date(startDate);
                        endDate.setDate(startDate.getDate() + (totalWeeks * 7));
                        planEndDate = endDate.toISOString().split('T')[0];
                        console.log('üìÖ CheckinHistory - Plan period:', planStartDate, 'to', planEndDate, `(${totalWeeks} weeks)`);
                    }

                    // L∆∞u initialCigarettes v√†o localStorage ƒë·ªÉ s·ª≠ d·ª•ng khi c·∫ßn
                    if (initialCigarettesFromPlan > 0) {
                        localStorage.setItem('initialCigarettes', initialCigarettesFromPlan.toString());
                        console.log('üîç CheckinHistory - Saved initialCigarettes to localStorage:', initialCigarettesFromPlan);
                    }
                } else {
                    console.warn('üîç CheckinHistory - No plan found for user:', userId);
                }

                console.log('üîç CheckinHistory - Loading history for user:', userId);

                // G·ªçi API ƒë·ªÉ l·∫•y l·ªãch s·ª≠ theo plan_id c·ª• th·ªÉ
                let response;
                if (plan && (plan.id || plan.plan_id)) {
                    const planId = plan.id || plan.plan_id;
                    console.log('üîç CheckinHistory - Loading history for plan:', planId);
                    response = await progressService.getProgressByUserId(userId, { plan_id: planId });
                } else {
                    console.log('üîç CheckinHistory - Loading history without plan filter');
                    response = await progressService.getProgressByUserId(userId);
                }

                if (response && response.success && response.data) {
                    // L·∫•y initialCigarettes t·ª´ k·∫ø ho·∫°ch hi·ªán t·∫°i - ƒê·∫¢M B·∫¢O KH√îNG B·ªä 0
                    const currentPlanInitialCigarettes = getInitialCigarettesFromPlan(userPlan) ||
                        getInitialCigarettesFromPlan(plan) ||
                        parseInt(localStorage.getItem('initialCigarettes')) ||
                        30; // Fallback cu·ªëi c√πng

                    console.log('üîç CheckinHistory - Debug currentPlanInitialCigarettes:', {
                        fromUserPlan: getInitialCigarettesFromPlan(userPlan),
                        fromPlan: getInitialCigarettesFromPlan(plan),
                        fromLocalStorage: localStorage.getItem('initialCigarettes'),
                        final: currentPlanInitialCigarettes
                    });

                    // Format d·ªØ li·ªáu t·ª´ API v·ªõi logic t√≠nh l·∫°i
                    const apiHistory = response.data.map(entry => {
                        const actualCigs = entry.actual_cigarettes || 0;
                        const entryDate = entry.date.split('T')[0];

                        // T√≠nh target t·ª´ k·∫ø ho·∫°ch thay v√¨ database (s·ª≠ d·ª•ng plan thay v√¨ userPlan)
                        const targetFromPlan = getTargetCigarettesForDate(entryDate, plan);

                        // T√≠nh l·∫°i cigarettesAvoided theo k·∫ø ho·∫°ch hi·ªán t·∫°i: initial_c·ªßa_k·∫ø_ho·∫°ch_hi·ªán_t·∫°i - actual_ƒë√£_h√∫t
                        const recalculatedCigarettesAvoided = Math.max(0, currentPlanInitialCigarettes - actualCigs);

                        // T√≠nh ti·ªÅn ti·∫øt ki·ªám d·ª±a tr√™n pack price th·ª±c t·∫ø - s·ª≠ d·ª•ng plan hi·ªán t·∫°i
                        const calculatedMoneySaved = calculateMoneySaved(recalculatedCigarettesAvoided, plan || userPlan);

                        return {
                            date: entryDate,
                            targetCigarettes: targetFromPlan, // T√≠nh t·ª´ k·∫ø ho·∫°ch thay v√¨ database
                            actualCigarettes: actualCigs, // Gi·ªØ nguy√™n s·ªë ƒëi·∫øu ƒë√£ h√∫t th·ª±c t·∫ø
                            initialCigarettes: currentPlanInitialCigarettes, // S·ª≠ d·ª•ng initial t·ª´ k·∫ø ho·∫°ch hi·ªán t·∫°i
                            cigarettesAvoided: recalculatedCigarettesAvoided, // T√≠nh l·∫°i theo k·∫ø ho·∫°ch hi·ªán t·∫°i
                            moneySaved: calculatedMoneySaved, // T√≠nh d·ª±a tr√™n pack price th·ª±c t·∫ø
                            healthScore: currentPlanInitialCigarettes > 0 ? Math.round((recalculatedCigarettesAvoided / currentPlanInitialCigarettes) * 100) : 0, // T√≠nh l·∫°i health score
                            notes: entry.notes || '',
                            isFromApi: true // ƒê√°nh d·∫•u l√† d·ªØ li·ªáu t·ª´ API
                        };
                    });

                    // T·∫°o Map t·ª´ d·ªØ li·ªáu API ƒë·ªÉ tra c·ª©u nhanh
                    const historyMap = new Map();
                    apiHistory.forEach(entry => {
                        historyMap.set(entry.date, entry);
                    });

                    // L·∫•y c√°c ng√†y t·ª´ ng√†y b·∫Øt ƒë·∫ßu k·∫ø ho·∫°ch ƒë·∫øn ng√†y k·∫øt th√∫c (ho·∫∑c hi·ªán t·∫°i)
                    console.log('üîç CheckinHistory - planStartDate:', planStartDate);
                    console.log('üîç CheckinHistory - planEndDate:', planEndDate);
                    const allDays = generateDaysArray(planStartDate, planEndDate);
                    console.log(`üîç Generated ${allDays.length} days from plan start to end`);

                    // T·∫°o l·ªãch s·ª≠ ƒë·∫ßy ƒë·ªß v·ªõi t·∫•t c·∫£ c√°c ng√†y
                    const fullHistory = allDays.map(date => {
                        // N·∫øu ƒë√£ c√≥ d·ªØ li·ªáu cho ng√†y n√†y t·ª´ API, s·ª≠ d·ª•ng n√≥
                        if (historyMap.has(date)) {
                            return historyMap.get(date);
                        }

                        // T√≠nh m·ª•c ti√™u cho ng√†y n√†y d·ª±a tr√™n k·∫ø ho·∫°ch
                        const targetForThisDay = getTargetCigarettesForDate(date, plan);

                        // N·∫øu kh√¥ng c√≥, t·∫°o m·ªôt b·∫£n ghi tr·ªëng v·ªõi m·ª•c ti√™u ƒë√∫ng
                        return createEmptyCheckin(date, initialCigarettesFromPlan, targetForThisDay);
                    });

                    // S·∫Øp x·∫øp theo ng√†y tƒÉng d·∫ßn ƒë·ªÉ ng√†y b·∫Øt ƒë·∫ßu k·∫ø ho·∫°ch ·ªü trang 1
                    fullHistory.sort((a, b) => new Date(a.date) - new Date(b.date));
                    setCheckinHistory(fullHistory);

                    // T√≠nh v√† th√¥ng b√°o t·ªïng s·ªë ƒëi·∫øu ƒë√£ tr√°nh
                    const totalAvoided = calculateTotalCigarettesAvoided(fullHistory);
                    notifyTotalCigarettesAvoided(totalAvoided);

                    // T√≠nh v√† th√¥ng b√°o t·ªïng s·ªë ti·ªÅn ƒë√£ ti·∫øt ki·ªám
                    const totalMoney = calculateTotalMoneySaved(fullHistory);
                    notifyTotalMoneySaved(totalMoney);

                    console.log('‚úÖ CheckinHistory - Loaded', fullHistory.length, 'entries (including empty days)');
                } else {
                    // Fallback: T·∫°o l·ªãch s·ª≠ t·ª´ localStorage theo plan_id
                    const localHistory = [];
                    const planId = plan && (plan.id || plan.plan_id) ? (plan.id || plan.plan_id).toString() : 'default';

                    Object.keys(localStorage).forEach(key => {
                        // Ch·ªâ t√¨m c√°c key c√≥ format: checkin_planId_date cho k·∫ø ho·∫°ch hi·ªán t·∫°i
                        if (key.startsWith(`checkin_${planId}_`) && !key.endsWith('_draft')) {
                            try {
                                const dateStr = key.replace(`checkin_${planId}_`, '');
                                const data = JSON.parse(localStorage.getItem(key));
                                localHistory.push({
                                    date: dateStr,
                                    ...data,
                                    isFromLocalStorage: true
                                });
                            } catch (e) {
                                console.warn('Error parsing localStorage item:', key, e);
                            }
                        }
                        // Ch·ªâ d√†nh cho k·∫ø ho·∫°ch kh√¥ng c√≥ ID (k·∫ø ho·∫°ch m·∫∑c ƒë·ªãnh c≈©)
                        // v√† ch·ªâ khi kh√¥ng c√≥ k·∫ø ho·∫°ch c·ª• th·ªÉ n√†o ƒë∆∞·ª£c ch·ªçn
                        else if (planId === 'default' && key.startsWith('checkin_') &&
                            !key.includes('_', key.indexOf('_') + 1) && !key.endsWith('_draft')) {
                            try {
                                const dateStr = key.replace('checkin_', '');
                                // Ki·ªÉm tra xem dateStr c√≥ ph·∫£i l√† ng√†y h·ª£p l·ªá kh√¥ng (YYYY-MM-DD format)
                                if (/^\d{4}-\d{2}-\d{2}$/.test(dateStr)) {
                                    const data = JSON.parse(localStorage.getItem(key));
                                    localHistory.push({
                                        date: dateStr,
                                        ...data,
                                        isFromLocalStorage: true
                                    });
                                }
                            } catch (e) {
                                console.warn('Error parsing localStorage item:', key, e);
                            }
                        }
                    });

                    console.log(`üîç CheckinHistory - Found ${localHistory.length} localStorage entries for plan ${planId}`);

                    // T·∫°o Map t·ª´ d·ªØ li·ªáu localStorage ƒë·ªÉ tra c·ª©u nhanh
                    const historyMap = new Map();
                    localHistory.forEach(entry => {
                        historyMap.set(entry.date, entry);
                    });

                    // L·∫•y c√°c ng√†y t·ª´ ng√†y b·∫Øt ƒë·∫ßu k·∫ø ho·∫°ch ƒë·∫øn ng√†y k·∫øt th√∫c (ho·∫∑c hi·ªán t·∫°i)
                    console.log('üîç CheckinHistory - (localStorage fallback) planStartDate:', planStartDate);
                    console.log('üîç CheckinHistory - (localStorage fallback) planEndDate:', planEndDate);
                    const allDays = generateDaysArray(planStartDate, planEndDate);
                    console.log(`üîç Generated ${allDays.length} days from plan start to end (localStorage fallback)`);

                    // T·∫°o l·ªãch s·ª≠ ƒë·∫ßy ƒë·ªß v·ªõi t·∫•t c·∫£ c√°c ng√†y
                    const fullHistory = allDays.map(date => {
                        // N·∫øu ƒë√£ c√≥ d·ªØ li·ªáu cho ng√†y n√†y t·ª´ localStorage, s·ª≠ d·ª•ng n√≥
                        if (historyMap.has(date)) {
                            return historyMap.get(date);
                        }

                        // T√≠nh m·ª•c ti√™u cho ng√†y n√†y d·ª±a tr√™n k·∫ø ho·∫°ch
                        const targetForThisDay = getTargetCigarettesForDate(date, plan);

                        // N·∫øu kh√¥ng c√≥, t·∫°o m·ªôt b·∫£n ghi tr·ªëng v·ªõi m·ª•c ti√™u ƒë√∫ng
                        return createEmptyCheckin(date, initialCigarettesFromPlan, targetForThisDay);
                    });

                    // S·∫Øp x·∫øp theo ng√†y tƒÉng d·∫ßn ƒë·ªÉ ng√†y b·∫Øt ƒë·∫ßu k·∫ø ho·∫°ch ·ªü trang 1
                    fullHistory.sort((a, b) => new Date(a.date) - new Date(b.date));
                    setCheckinHistory(fullHistory);

                    // T√≠nh v√† th√¥ng b√°o t·ªïng s·ªë ƒëi·∫øu ƒë√£ tr√°nh
                    const totalAvoided = calculateTotalCigarettesAvoided(fullHistory);
                    notifyTotalCigarettesAvoided(totalAvoided);

                    // T√≠nh v√† th√¥ng b√°o t·ªïng s·ªë ti·ªÅn ƒë√£ ti·∫øt ki·ªám
                    const totalMoney = calculateTotalMoneySaved(fullHistory);
                    notifyTotalMoneySaved(totalMoney);

                    console.log('‚úÖ CheckinHistory - Loaded', fullHistory.length, 'entries (including empty days) from localStorage fallback');
                }
            } catch (err) {
                console.error('‚ùå Error loading checkin history:', err);
                setError('Kh√¥ng th·ªÉ t·∫£i l·ªãch s·ª≠ check-in. Vui l√≤ng th·ª≠ l·∫°i sau.');

                // Fallback: T√¨m trong localStorage theo plan_id
                const localHistory = [];
                const planId = userPlan && (userPlan.id || userPlan.plan_id) ? (userPlan.id || userPlan.plan_id).toString() : 'default';

                Object.keys(localStorage).forEach(key => {
                    // Ch·ªâ t√¨m c√°c key c√≥ format: checkin_planId_date cho k·∫ø ho·∫°ch hi·ªán t·∫°i
                    if (key.startsWith(`checkin_${planId}_`) && !key.endsWith('_draft')) {
                        try {
                            const dateStr = key.replace(`checkin_${planId}_`, '');
                            const data = JSON.parse(localStorage.getItem(key));
                            localHistory.push({
                                date: dateStr,
                                ...data
                            });
                        } catch (e) {
                            console.warn('Error parsing localStorage item:', key, e);
                        }
                    }
                    // Ch·ªâ d√†nh cho k·∫ø ho·∫°ch kh√¥ng c√≥ ID (k·∫ø ho·∫°ch m·∫∑c ƒë·ªãnh c≈©)
                    else if (planId === 'default' && key.startsWith('checkin_') &&
                        !key.includes('_', key.indexOf('_') + 1) && !key.endsWith('_draft')) {
                        try {
                            const dateStr = key.replace('checkin_', '');
                            // Ki·ªÉm tra xem dateStr c√≥ ph·∫£i l√† ng√†y h·ª£p l·ªá kh√¥ng
                            if (/^\d{4}-\d{2}-\d{2}$/.test(dateStr)) {
                                const data = JSON.parse(localStorage.getItem(key));
                                localHistory.push({
                                    date: dateStr,
                                    ...data
                                });
                            }
                        } catch (e) {
                            console.warn('Error parsing localStorage item:', key, e);
                        }
                    }
                });

                console.log(`üîç CheckinHistory - Found ${localHistory.length} localStorage entries for plan ${planId} in error fallback`);

                // S·∫Øp x·∫øp theo ng√†y tƒÉng d·∫ßn ƒë·ªÉ ng√†y b·∫Øt ƒë·∫ßu k·∫ø ho·∫°ch ·ªü trang 1
                localHistory.sort((a, b) => new Date(a.date) - new Date(b.date));
                if (localHistory.length > 0) {
                    setCheckinHistory(localHistory);

                    // T√≠nh v√† th√¥ng b√°o t·ªïng s·ªë ƒëi·∫øu ƒë√£ tr√°nh
                    const totalAvoided = calculateTotalCigarettesAvoided(localHistory);
                    notifyTotalCigarettesAvoided(totalAvoided);

                    // T√≠nh v√† th√¥ng b√°o t·ªïng s·ªë ti·ªÅn ƒë√£ ti·∫øt ki·ªám
                    const totalMoney = calculateTotalMoneySaved(localHistory);
                    notifyTotalMoneySaved(totalMoney);

                    setError('Kh√¥ng th·ªÉ t·∫£i t·ª´ m√°y ch·ªß. Hi·ªÉn th·ªã d·ªØ li·ªáu l∆∞u c·ª•c b·ªô.');
                }
            } finally {
                setLoading(false);
            }
        };

        loadCheckinHistory();
    }, []);

    // L·∫Øng nghe s·ª± ki·ªán thay ƒë·ªïi k·∫ø ho·∫°ch t·ª´ ActivePlanSelector
    useEffect(() => {
        const handlePlanChange = () => {
            console.log('üîÑ CheckinHistory - Plan changed, reloading history...');
            // Reset v√† t·∫£i l·∫°i l·ªãch s·ª≠
            setCheckinHistory([]);
            setLoading(true);
            setCurrentPage(1); // Reset v·ªÅ trang ƒë·∫ßu ti√™n khi ƒë·ªïi k·∫ø ho·∫°ch

            // Reload data with a small delay to ensure localStorage is updated
            setTimeout(() => {
                const loadCheckinHistory = async () => {
                    try {
                        setLoading(true);
                        setError(null);

                        const userId = getCurrentUserId();
                        if (!userId) {
                            throw new Error('User not logged in');
                        }

                        // L·∫•y k·∫ø ho·∫°ch m·ªõi t·ª´ localStorage
                        const plan = await loadUserPlan();

                        if (plan) {
                            // T√≠nh l·∫°i ng√†y b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c cho k·∫ø ho·∫°ch m·ªõi
                            const planStartDate = plan.startDate || plan.start_date;
                            let planEndDate = null;

                            if (planStartDate && plan.weeks && plan.weeks.length > 0) {
                                const startDate = new Date(planStartDate);
                                const totalWeeks = plan.total_weeks || plan.totalWeeks || plan.weeks.length;
                                const endDate = new Date(startDate);
                                endDate.setDate(startDate.getDate() + (totalWeeks * 7));
                                planEndDate = endDate.toISOString().split('T')[0];
                                console.log('üìÖ CheckinHistory (reload) - Plan period:', planStartDate, 'to', planEndDate, `(${totalWeeks} weeks)`);
                            }

                            // Load l·∫°i history v·ªõi k·∫ø ho·∫°ch m·ªõi
                            let response;
                            if (plan && (plan.id || plan.plan_id)) {
                                const planId = plan.id || plan.plan_id;
                                console.log('üîç CheckinHistory (reload) - Loading history for plan:', planId);
                                response = await progressService.getProgressByUserId(userId, { plan_id: planId });
                            } else {
                                console.log('üîç CheckinHistory (reload) - Loading history without plan filter');
                                response = await progressService.getProgressByUserId(userId);
                            }

                            if (response && response.success && response.data) {
                                // L·∫•y initialCigarettes t·ª´ k·∫ø ho·∫°ch m·ªõi
                                const newPlanInitialCigarettes = getInitialCigarettesFromPlan(plan);

                                const apiHistory = response.data.map(entry => {
                                    const actualCigs = entry.actual_cigarettes || 0;
                                    // T√≠nh l·∫°i cigarettesAvoided theo k·∫ø ho·∫°ch m·ªõi: initial_c·ªßa_k·∫ø_ho·∫°ch_m·ªõi - actual_ƒë√£_h√∫t
                                    const recalculatedCigarettesAvoided = Math.max(0, newPlanInitialCigarettes - actualCigs);
                                    // T√≠nh l·∫°i target theo k·∫ø ho·∫°ch m·ªõi
                                    const entryDate = entry.date.split('T')[0];
                                    const recalculatedTarget = getTargetCigarettesForDate(entryDate, plan);

                                    // T√≠nh ti·ªÅn ti·∫øt ki·ªám d·ª±a tr√™n pack price th·ª±c t·∫ø - s·ª≠ d·ª•ng plan hi·ªán t·∫°i
                                    const calculatedMoneySaved = calculateMoneySaved(recalculatedCigarettesAvoided, plan || userPlan);

                                    return {
                                        date: entryDate,
                                        targetCigarettes: recalculatedTarget, // T√≠nh l·∫°i target theo k·∫ø ho·∫°ch m·ªõi
                                        actualCigarettes: actualCigs, // Gi·ªØ nguy√™n s·ªë ƒëi·∫øu ƒë√£ h√∫t th·ª±c t·∫ø
                                        initialCigarettes: newPlanInitialCigarettes, // C·∫≠p nh·∫≠t theo k·∫ø ho·∫°ch m·ªõi
                                        cigarettesAvoided: recalculatedCigarettesAvoided, // T√≠nh l·∫°i theo k·∫ø ho·∫°ch m·ªõi
                                        moneySaved: calculatedMoneySaved, // T√≠nh d·ª±a tr√™n pack price th·ª±c t·∫ø
                                        healthScore: newPlanInitialCigarettes > 0 ? Math.round((recalculatedCigarettesAvoided / newPlanInitialCigarettes) * 100) : 0, // T√≠nh l·∫°i health score
                                        notes: entry.notes || '',
                                        isFromApi: true
                                    };
                                });

                                // T·∫°o Map t·ª´ d·ªØ li·ªáu API ƒë·ªÉ tra c·ª©u nhanh
                                const historyMap = new Map();
                                apiHistory.forEach(entry => {
                                    historyMap.set(entry.date, entry);
                                });

                                // T·∫°o full history cho to√†n b·ªô th·ªùi gian k·∫ø ho·∫°ch
                                console.log('üîç CheckinHistory (reload) - planStartDate:', planStartDate);
                                console.log('üîç CheckinHistory (reload) - planEndDate:', planEndDate);
                                const allDays = generateDaysArray(planStartDate, planEndDate);
                                console.log(`üîç CheckinHistory (reload) - Generated ${allDays.length} days`);

                                const fullHistory = allDays.map(date => {
                                    if (historyMap.has(date)) {
                                        return historyMap.get(date);
                                    }

                                    // T√≠nh m·ª•c ti√™u cho ng√†y n√†y d·ª±a tr√™n k·∫ø ho·∫°ch m·ªõi
                                    const targetForThisDay = getTargetCigarettesForDate(date, plan);

                                    // T·∫°o empty entry cho ng√†y ch∆∞a c√≥ d·ªØ li·ªáu
                                    return createEmptyCheckin(date, getInitialCigarettesFromPlan(plan), targetForThisDay);
                                });

                                // S·∫Øp x·∫øp theo ng√†y tƒÉng d·∫ßn ƒë·ªÉ ng√†y b·∫Øt ƒë·∫ßu k·∫ø ho·∫°ch ·ªü trang 1
                                fullHistory.sort((a, b) => new Date(a.date) - new Date(b.date));
                                setCheckinHistory(fullHistory);

                                // T√≠nh v√† th√¥ng b√°o t·ªïng s·ªë ƒëi·∫øu ƒë√£ tr√°nh cho k·∫ø ho·∫°ch m·ªõi
                                const totalAvoided = calculateTotalCigarettesAvoided(fullHistory);
                                notifyTotalCigarettesAvoided(totalAvoided);

                                // T√≠nh v√† th√¥ng b√°o t·ªïng s·ªë ti·ªÅn ƒë√£ ti·∫øt ki·ªám cho k·∫ø ho·∫°ch m·ªõi
                                const totalMoney = calculateTotalMoneySaved(fullHistory);
                                notifyTotalMoneySaved(totalMoney);
                            }
                        }
                    } catch (error) {
                        console.error('‚ùå Error reloading checkin history:', error);
                    } finally {
                        setLoading(false);
                    }
                };

                loadCheckinHistory();
            }, 500);
        };

        // L·∫Øng nghe s·ª± ki·ªán thay ƒë·ªïi k·∫ø ho·∫°ch
        window.addEventListener('localStorageChanged', handlePlanChange);

        return () => {
            window.removeEventListener('localStorageChanged', handlePlanChange);
        };
    }, []);

    // L·∫Øng nghe s·ª± ki·ªán t·ª´ n√∫t trong ProgressDashboard
    useEffect(() => {
        const handleToggleEvent = () => {
            console.log('Toggling sidebar from external button');
            setIsSidebarOpen(prevState => !prevState);
        };

        // ƒêƒÉng k√Ω l·∫Øng nghe s·ª± ki·ªán
        document.addEventListener('toggle-checkin-history', handleToggleEvent);

        // Cleanup function
        return () => {
            document.removeEventListener('toggle-checkin-history', handleToggleEvent);
        };
    }, []);

    // B·∫Øt ƒë·∫ßu ch·ªânh s·ª≠a
    const handleEdit = (entry) => {
        setEditingEntry(entry.date);
        // L·∫•y d·ªØ li·ªáu hi·ªán t·∫°i t·ª´ entry ƒë·ªÉ ƒë·∫£m b·∫£o d·ªØ li·ªáu nh·∫•t qu√°n
        setTempEditData({
            targetCigarettes: entry.targetCigarettes,
            actualCigarettes: entry.actualCigarettes,
            notes: entry.notes || '',
            // L∆∞u initialCigarettes v√†o tempEditData ƒë·ªÉ d√πng khi t√≠nh to√°n
            initialCigarettes: entry.initialCigarettes || 0
        });
    };

    // H·ªßy ch·ªânh s·ª≠a
    const handleCancelEdit = () => {
        setEditingEntry(null);
        setTempEditData({});
    };

    // C·∫≠p nh·∫≠t gi√° tr·ªã khi ch·ªânh s·ª≠a
    const handleEditChange = (field, value) => {
        setTempEditData(prev => ({
            ...prev,
            [field]: value
        }));
    };

    // L∆∞u thay ƒë·ªïi
    const handleSaveEdit = async (date) => {
        try {
            // L·∫•y gi√° tr·ªã initialCigarettes t·ª´ userPlan ƒë√£ t·∫£i (ƒë∆∞·ª£c t·∫£i trong useEffect)
            let initialCigarettes = 0;

            // S·ª≠ d·ª•ng userPlan ƒë√£ ƒë∆∞·ª£c l·∫•y trong useEffect
            if (userPlan) {
                // ∆Øu ti√™n l·∫•y t·ª´ c√°c tr∆∞·ªùng c√≥ th·ªÉ ch·ª©a initialCigarettes trong userPlan
                if (userPlan.initialCigarettes) {
                    initialCigarettes = userPlan.initialCigarettes;
                    console.log('üîç CheckinHistory - Using initialCigarettes from userPlan:', initialCigarettes);
                } else if (userPlan.initial_cigarettes) {
                    initialCigarettes = userPlan.initial_cigarettes;
                    console.log('üîç CheckinHistory - Using initial_cigarettes from userPlan:', initialCigarettes);
                } else if (userPlan.dailyCigarettes) {
                    initialCigarettes = userPlan.dailyCigarettes;
                    console.log('üîç CheckinHistory - Using dailyCigarettes from userPlan:', initialCigarettes);
                } else if (userPlan.daily_cigarettes) {
                    initialCigarettes = userPlan.daily_cigarettes;
                    console.log('üîç CheckinHistory - Using daily_cigarettes from userPlan:', initialCigarettes);
                } else if (userPlan.weeks && userPlan.weeks.length > 0) {
                    // L·∫•y t·ª´ tu·∫ßn ƒë·∫ßu ti√™n
                    const firstWeek = userPlan.weeks[0];
                    initialCigarettes = firstWeek.amount || firstWeek.cigarettes ||
                        firstWeek.dailyCigarettes || firstWeek.daily_cigarettes ||
                        firstWeek.target || 0;
                    console.log('üîç CheckinHistory - Using initialCigarettes from first week:', initialCigarettes);
                }
            }

            // Fallback: N·∫øu kh√¥ng th·ªÉ l·∫•y t·ª´ userPlan, th·ª≠ t·ª´ entry hi·ªán t·∫°i
            if (initialCigarettes === 0) {
                const currentEntry = checkinHistory.find(entry => entry.date === date);
                initialCigarettes = currentEntry?.initialCigarettes || 0;

                if (initialCigarettes > 0) {
                    console.log('üîç CheckinHistory - Using initialCigarettes from current entry:', initialCigarettes);
                }
            }

            // Fallback: Th·ª≠ l·∫•y gi√° tr·ªã tr·ª±c ti·∫øp ƒë√£ l∆∞u trong localStorage
            if (initialCigarettes === 0) {
                const savedInitialCigs = localStorage.getItem('initialCigarettes');
                if (savedInitialCigs) {
                    initialCigarettes = parseInt(savedInitialCigs);
                    console.log('üîç CheckinHistory - Using initialCigarettes from localStorage directly:', initialCigarettes);
                }
            }

            // Fallback cu·ªëi c√πng: Th·ª≠ l·∫•y t·ª´ activePlan trong localStorage
            if (initialCigarettes === 0) {
                try {
                    const localPlan = localStorage.getItem('activePlan');
                    if (localPlan) {
                        const parsedPlan = JSON.parse(localPlan);

                        initialCigarettes = parsedPlan.initialCigarettes ||
                            parsedPlan.initial_cigarettes ||
                            parsedPlan.dailyCigarettes ||
                            parsedPlan.daily_cigarettes || 30;

                        console.log('üîç CheckinHistory - Using initialCigarettes from activePlan:', initialCigarettes);
                    } else {
                        // N·∫øu kh√¥ng c√≥ plan, ƒë·∫∑t gi√° tr·ªã m·∫∑c ƒë·ªãnh (gi·ªëng v·ªõi DailyCheckin)
                        initialCigarettes = 30; // S·ª≠ d·ª•ng 30 nh∆∞ m·ªôt gi√° tr·ªã m·∫∑c ƒë·ªãnh h·ª£p l√Ω
                        console.log('üîç CheckinHistory - No plan found, using default value:', initialCigarettes);
                    }
                } catch (e) {
                    console.error('Error parsing activePlan:', e);
                    initialCigarettes = 30; // Gi√° tr·ªã m·∫∑c ƒë·ªãnh
                }
            }

            const updatedData = {
                ...tempEditData,
                initialCigarettes: initialCigarettes
            };

            // Lo·∫°i b·ªè targetCigarettes v√¨ s·∫Ω ƒë∆∞·ª£c t√≠nh ƒë·ªông t·ª´ k·∫ø ho·∫°ch
            const { targetCigarettes, ...dataToSave } = updatedData;

            console.log('üîç CheckinHistory - Saving edit for date', date, 'with data:', dataToSave);
            console.log('üîç CheckinHistory - Using initialCigarettes:', initialCigarettes);

            const userId = getCurrentUserId();
            if (!userId) {
                throw new Error('User not logged in');
            }

            // Ki·ªÉm tra xem entry n√†y l√† tr·ªëng hay ƒë√£ c√≥ d·ªØ li·ªáu
            const currentEntry = checkinHistory.find(entry => entry.date === date);
            const isEmptyEntry = currentEntry?.isEmpty === true;

            let response;

            // N·∫øu l√† entry tr·ªëng (ch∆∞a c√≥ trong DB), s·ª≠ d·ª•ng createCheckin thay v√¨ updateCheckin
            try {
                // Th√™m plan_id v√†o d·ªØ li·ªáu ƒë·ªÉ ƒë·∫£m b·∫£o checkin ƒë∆∞·ª£c l∆∞u cho ƒë√∫ng k·∫ø ho·∫°ch
                const dataWithPlanId = {
                    ...dataToSave,
                    plan_id: userPlan && (userPlan.id || userPlan.plan_id) ? (userPlan.id || userPlan.plan_id) : null
                };

                if (isEmptyEntry) {
                    console.log('üîç CheckinHistory - Creating new checkin for date', date, 'with plan_id:', dataWithPlanId.plan_id);
                    response = await progressService.createCheckin(userId, date, dataWithPlanId);
                } else {
                    console.log('üîç CheckinHistory - Updating existing checkin for date', date, 'with plan_id:', dataWithPlanId.plan_id);
                    response = await progressService.updateCheckinByUserId(userId, date, dataWithPlanId);
                }
            } catch (error) {
                console.error('‚ùå Error in save operation:', error);

                // N·∫øu c·∫≠p nh·∫≠t kh√¥ng th√†nh c√¥ng (404), th·ª≠ t·∫°o m·ªõi
                if (error.message && error.message.includes("404")) {
                    console.log('üîÑ Falling back to creating new checkin due to 404 error');
                    const dataWithPlanId = {
                        ...dataToSave,
                        plan_id: userPlan && (userPlan.id || userPlan.plan_id) ? (userPlan.id || userPlan.plan_id) : null
                    };
                    response = await progressService.createCheckin(userId, date, dataWithPlanId);
                } else {
                    // N·∫øu l√† l·ªói kh√°c, n√©m l·∫°i l·ªói ƒë·ªÉ x·ª≠ l√Ω ·ªü catch block b√™n ngo√†i
                    throw error;
                }
            }

            if (response && response.success) {
                // L·∫•y d·ªØ li·ªáu m·ªõi t·ª´ API response
                console.log('üîç CheckinHistory - Calculating with initialCigarettes:', dataToSave.initialCigarettes);

                // T√≠nh to√°n l·∫°i c√°c gi√° tr·ªã n·∫øu API kh√¥ng tr·∫£ v·ªÅ
                const initialCigs = dataToSave.initialCigarettes; // S·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng c√≥
                const actualCigs = dataToSave.actualCigarettes || 0;

                const cigarettesAvoided = response.data?.cigarettes_avoided !== undefined
                    ? response.data.cigarettes_avoided
                    : Math.max(0, initialCigs - actualCigs);

                const moneySaved = response.data?.money_saved !== undefined
                    ? response.data.money_saved
                    : calculateMoneySaved(cigarettesAvoided, userPlan); // T√≠nh d·ª±a tr√™n pack price th·ª±c t·∫ø

                const healthScore = response.data?.health_score !== undefined
                    ? response.data.health_score
                    : initialCigs > 0 ? Math.round((cigarettesAvoided / initialCigs) * 100) : 0;

                console.log('üîç CheckinHistory - Calculated values:', {
                    initialCigs,
                    actualCigs,
                    cigarettesAvoided,
                    moneySaved,
                    healthScore
                });

                // T√≠nh target t·ª´ k·∫ø ho·∫°ch hi·ªán t·∫°i thay v√¨ t·ª´ input
                const calculatedTarget = getTargetCigarettesForDate(date, userPlan || plan);

                // T·∫°o ƒë·ªëi t∆∞·ª£ng m·ªõi v·ªõi d·ªØ li·ªáu ƒë√£ c·∫≠p nh·∫≠t
                const newCheckinData = {
                    date: date,
                    targetCigarettes: calculatedTarget, // T√≠nh t·ª´ k·∫ø ho·∫°ch thay v√¨ input
                    actualCigarettes: dataToSave.actualCigarettes,
                    notes: dataToSave.notes,
                    initialCigarettes: dataToSave.initialCigarettes,
                    cigarettesAvoided: cigarettesAvoided,
                    moneySaved: moneySaved,
                    healthScore: healthScore
                };

                // C·∫≠p nh·∫≠t state b·∫±ng c√°ch t·∫°o m·ªôt m·∫£ng ho√†n to√†n m·ªõi
                // ƒë·ªÉ ƒë·∫£m b·∫£o React nh·∫≠n ra s·ª± thay ƒë·ªïi v√† render l·∫°i
                setCheckinHistory(prev => {
                    const newHistory = prev.map(entry =>
                        entry.date === date ? newCheckinData : entry
                    );
                    console.log('üîç State updated with new data:', newHistory.find(e => e.date === date));
                    return newHistory;
                });

                // T·∫°o ƒë·ªëi t∆∞·ª£ng d·ªØ li·ªáu ƒë·∫ßy ƒë·ªß ƒë·ªÉ l∆∞u v√†o localStorage
                const updatedLocalData = {
                    date,
                    targetCigarettes: calculatedTarget, // T√≠nh t·ª´ k·∫ø ho·∫°ch thay v√¨ input
                    actualCigarettes: dataToSave.actualCigarettes,
                    initialCigarettes: dataToSave.initialCigarettes,
                    cigarettesAvoided: cigarettesAvoided,
                    moneySaved: moneySaved,
                    healthScore: healthScore,
                    notes: dataToSave.notes
                };

                // L∆∞u v√†o localStorage v·ªõi plan_id
                const planId = userPlan && (userPlan.id || userPlan.plan_id) ? (userPlan.id || userPlan.plan_id).toString() : 'default';
                const localStorageKey = `checkin_${planId}_${date}`;
                localStorage.setItem(localStorageKey, JSON.stringify(updatedLocalData));
                console.log(`üîç CheckinHistory - Saved to localStorage with key: ${localStorageKey}`);

                // G·ªçi callback c·∫≠p nh·∫≠t dashboard n·∫øu c√≥ - v·ªõi d·ªØ li·ªáu ƒë√£ t√≠nh to√°n m·ªõi
                if (onProgressUpdate && date === new Date().toISOString().split('T')[0]) {
                    onProgressUpdate({
                        ...newCheckinData,
                        date
                    });
                    console.log('üîÑ ƒê√£ g·ªçi onProgressUpdate v·ªõi d·ªØ li·ªáu m·ªõi:', newCheckinData);
                }

                // Reset editing
                setEditingEntry(null);
                setTempEditData({});

                // Force update component ƒë·ªÉ ƒë·∫£m b·∫£o UI ƒë∆∞·ª£c render l·∫°i v·ªõi d·ªØ li·ªáu m·ªõi
                setTimeout(() => {
                    forceUpdate();
                    console.log('üîÑ Force update component sau khi c·∫≠p nh·∫≠t d·ªØ li·ªáu');

                    // T√≠nh v√† th√¥ng b√°o t·ªïng s·ªë ƒëi·∫øu ƒë√£ tr√°nh sau khi update
                    const totalAvoided = calculateTotalCigarettesAvoided(checkinHistory);
                    notifyTotalCigarettesAvoided(totalAvoided);

                    // T√≠nh v√† th√¥ng b√°o t·ªïng s·ªë ti·ªÅn ƒë√£ ti·∫øt ki·ªám sau khi update
                    const totalMoney = calculateTotalMoneySaved(checkinHistory);
                    notifyTotalMoneySaved(totalMoney);
                }, 0);

                // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
                setToast({
                    show: true,
                    message: 'C·∫≠p nh·∫≠t th√†nh c√¥ng!',
                    type: 'success'
                });
            } else {
                throw new Error(response?.message || 'C·∫≠p nh·∫≠t th·∫•t b·∫°i');
            }
        } catch (err) {
            console.error('‚ùå Error saving edit:', err);

            // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói
            setToast({
                show: true,
                message: `L·ªói: ${err.message}`,
                type: 'error'
            });
        }

        setTimeout(() => {
            setToast(prev => ({ ...prev, show: false }));
        }, 3000);
    };

    // X√≥a d·ªØ li·ªáu checkin
    const handleDeleteEntry = async (date) => {
        // Hi·ªÉn th·ªã x√°c nh·∫≠n tr∆∞·ªõc khi x√≥a
        const confirmDelete = window.confirm(`B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a d·ªØ li·ªáu check-in ng√†y ${formatDisplayDate(date)}?`);

        if (!confirmDelete) {
            return;
        }

        try {
            // T√¨m entry hi·ªán t·∫°i
            const currentEntry = checkinHistory.find(entry => entry.date === date);

            // N·∫øu l√† entry tr·ªëng (ch∆∞a c√≥ d·ªØ li·ªáu th·ª±c s·ª±), ch·ªâ c·∫ßn reset v·ªÅ tr·∫°ng th√°i tr·ªëng
            if (currentEntry?.isEmpty || currentEntry?.actualCigarettes === null) {
                // T√≠nh target ƒë√∫ng t·ª´ k·∫ø ho·∫°ch thay v√¨ s·ª≠ d·ª•ng gi√° tr·ªã c≈©
                const calculatedTarget = getTargetCigarettesForDate(date, userPlan);
                const resetEntry = createEmptyCheckin(date, currentEntry?.initialCigarettes || 30, calculatedTarget);

                setCheckinHistory(prev => prev.map(entry =>
                    entry.date === date ? resetEntry : entry
                ));

                // X√≥a kh·ªèi localStorage
                const planId = userPlan && (userPlan.id || userPlan.plan_id) ? (userPlan.id || userPlan.plan_id).toString() : 'default';
                const localStorageKey = `checkin_${planId}_${date}`;
                localStorage.removeItem(localStorageKey);
                console.log(`üóëÔ∏è Removed localStorage key: ${localStorageKey}`);

                setToast({
                    show: true,
                    message: 'ƒê√£ x√≥a d·ªØ li·ªáu check-in!',
                    type: 'success'
                });

                setTimeout(() => {
                    setToast(prev => ({ ...prev, show: false }));
                }, 3000);

                return;
            }

            // N·∫øu c√≥ d·ªØ li·ªáu th·ª±c s·ª±, g·ªçi API ƒë·ªÉ x√≥a
            console.log('üóëÔ∏è Deleting checkin for date:', date);

            try {
                // X√≥a t·ª´ API ƒë∆°n gi·∫£n - ch·ªâ c·∫ßn ng√†y
                console.log('üóëÔ∏è Attempting to delete from API for date:', date);

                const deleteResponse = await progressService.deleteCheckinByDate(date);

                if (deleteResponse && deleteResponse.success) {
                    console.log('‚úÖ Successfully deleted from API');
                } else {
                    console.warn('‚ö†Ô∏è API delete response not successful:', deleteResponse);
                    // V·∫´n ti·∫øp t·ª•c v·ªõi vi·ªác x√≥a local
                }
            } catch (apiError) {
                console.error('‚ùå Error deleting from API:', apiError);
                // Ti·∫øp t·ª•c v·ªõi vi·ªác x√≥a local ngay c·∫£ khi API l·ªói
            }

            // Reset entry v·ªÅ tr·∫°ng th√°i tr·ªëng (v·ªõi m·ª•c ti√™u ƒë∆∞·ª£c t√≠nh l·∫°i t·ª´ k·∫ø ho·∫°ch)
            let targetForThisDay = 0;
            if (userPlan && userPlan.weeks && (userPlan.startDate || userPlan.start_date)) {
                const planStartDate = new Date(userPlan.startDate || userPlan.start_date);
                const targetDate = new Date(date);
                const daysSincePlanStart = Math.floor((targetDate - planStartDate) / (1000 * 60 * 60 * 24));

                if (daysSincePlanStart >= 0 && userPlan.weeks.length > 0) {
                    let weekIndex = Math.floor(daysSincePlanStart / 7);
                    if (weekIndex >= userPlan.weeks.length) {
                        weekIndex = userPlan.weeks.length - 1;
                    }
                    const week = userPlan.weeks[weekIndex];
                    targetForThisDay = week ? (week.target ?? week.amount ?? week.cigarettes ?? 0) : 0;
                }
            }

            const resetEntry = createEmptyCheckin(date, currentEntry?.initialCigarettes || 30, targetForThisDay);

            // C·∫≠p nh·∫≠t state
            setCheckinHistory(prev => prev.map(entry =>
                entry.date === date ? resetEntry : entry
            ));

            // X√≥a kh·ªèi localStorage
            const planId = userPlan && (userPlan.id || userPlan.plan_id) ? (userPlan.id || userPlan.plan_id).toString() : 'default';
            const localStorageKey = `checkin_${planId}_${date}`;
            localStorage.removeItem(localStorageKey);
            console.log(`üóëÔ∏è Removed localStorage key: ${localStorageKey}`);

            // T√≠nh v√† th√¥ng b√°o l·∫°i t·ªïng s·ªë ƒëi·∫øu ƒë√£ tr√°nh sau khi x√≥a
            setTimeout(() => {
                const updatedHistory = checkinHistory.map(entry =>
                    entry.date === date ? resetEntry : entry
                );
                const totalAvoided = calculateTotalCigarettesAvoided(updatedHistory);
                notifyTotalCigarettesAvoided(totalAvoided);

                const totalMoney = calculateTotalMoneySaved(updatedHistory);
                notifyTotalMoneySaved(totalMoney);
            }, 100);

            // G·ªçi callback ƒë·ªÉ c·∫≠p nh·∫≠t dashboard n·∫øu x√≥a d·ªØ li·ªáu ng√†y h√¥m nay
            if (onProgressUpdate && date === new Date().toISOString().split('T')[0]) {
                onProgressUpdate(null); // Truy·ªÅn null ƒë·ªÉ b√°o hi·ªáu ƒë√£ x√≥a d·ªØ li·ªáu
                console.log('üîÑ Called onProgressUpdate with null (data deleted)');
            }

            // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
            setToast({
                show: true,
                message: 'ƒê√£ x√≥a d·ªØ li·ªáu check-in!',
                type: 'success'
            });

        } catch (err) {
            console.error('‚ùå Error deleting entry:', err);

            setToast({
                show: true,
                message: `L·ªói khi x√≥a: ${err.message}`,
                type: 'error'
            });
        }

        setTimeout(() => {
            setToast(prev => ({ ...prev, show: false }));
        }, 3000);
    };

    // Format date to display
    const formatDisplayDate = (dateStr) => {
        const date = new Date(dateStr);
        // Format: "Th·ª© 2, 01/08/2025"
        const days = ["Ch·ªß nh·∫≠t", "Th·ª© 2", "Th·ª© 3", "Th·ª© 4", "Th·ª© 5", "Th·ª© 6", "Th·ª© 7"];
        const dayName = days[date.getDay()];
        const day = date.getDate().toString().padStart(2, '0');
        const month = (date.getMonth() + 1).toString().padStart(2, '0');
        const year = date.getFullYear();

        return `${dayName}, ${day}/${month}/${year}`;
    };

    // Ki·ªÉm tra xem ng√†y ƒë√≥ c√≥ ph·∫£i l√† h√¥m nay kh√¥ng
    const isToday = (dateStr) => {
        const today = new Date().toISOString().split('T')[0];
        return dateStr === today;
    };

    // Pagination logic
    const indexOfLastEntry = currentPage * entriesPerPage;
    const indexOfFirstEntry = indexOfLastEntry - entriesPerPage;
    const currentEntries = checkinHistory.slice(indexOfFirstEntry, indexOfLastEntry);
    const totalPages = Math.ceil(checkinHistory.length / entriesPerPage);

    // Change page
    const paginate = (pageNumber) => {
        if (pageNumber > 0 && pageNumber <= totalPages) {
            setCurrentPage(pageNumber);
        }
    };

    // T·∫£i l·∫°i d·ªØ li·ªáu c·ªßa ng√†y hi·ªán t·∫°i t·ª´ API (kh√¥ng s·ª≠ d·ª•ng await ƒë·ªÉ kh√¥ng ch·∫∑n UI)
    const refreshTodayData = (userId) => {
        const today = new Date().toISOString().split('T')[0];

        // Th√™m plan_id filter n·∫øu c√≥
        const currentPlan = userPlan;
        const queryParams = { date: today };
        if (currentPlan && (currentPlan.id || currentPlan.plan_id)) {
            queryParams.plan_id = currentPlan.id || currentPlan.plan_id;
        }

        // S·ª≠ d·ª•ng Promise kh√¥ng await ƒë·ªÉ kh√¥ng ch·∫∑n UI
        progressService.getProgressByUserId(userId, queryParams)
            .then(response => {
                if (response && response.success && response.data && response.data.length > 0) {
                    const todayEntry = response.data.find(item => item.date.split('T')[0] === today);

                    if (todayEntry) {
                        // L·∫•y initialCigarettes t·ª´ k·∫ø ho·∫°ch hi·ªán t·∫°i
                        const currentPlanInitialCigarettes = getInitialCigarettesFromPlan(currentPlan);
                        const actualCigs = todayEntry.actual_cigarettes || 0;

                        // T√≠nh target t·ª´ k·∫ø ho·∫°ch hi·ªán t·∫°i thay v√¨ database
                        const calculatedTarget = getTargetCigarettesForDate(today, currentPlan);

                        // T√≠nh l·∫°i cigarettesAvoided theo k·∫ø ho·∫°ch hi·ªán t·∫°i
                        const recalculatedCigarettesAvoided = Math.max(0, currentPlanInitialCigarettes - actualCigs);

                        // T√≠nh ti·ªÅn ti·∫øt ki·ªám d·ª±a tr√™n pack price th·ª±c t·∫ø - s·ª≠ d·ª•ng plan hi·ªán t·∫°i
                        const calculatedMoneySaved = calculateMoneySaved(recalculatedCigarettesAvoided, currentPlan || userPlan);

                        // Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu t·ª´ API th√†nh ƒë·ªãnh d·∫°ng cho UI v·ªõi logic t√≠nh l·∫°i
                        const formattedEntry = {
                            date: today,
                            targetCigarettes: calculatedTarget, // T√≠nh t·ª´ k·∫ø ho·∫°ch thay v√¨ database
                            actualCigarettes: actualCigs, // Gi·ªØ nguy√™n s·ªë ƒëi·∫øu ƒë√£ h√∫t th·ª±c t·∫ø
                            initialCigarettes: currentPlanInitialCigarettes, // S·ª≠ d·ª•ng initial t·ª´ k·∫ø ho·∫°ch hi·ªán t·∫°i
                            cigarettesAvoided: recalculatedCigarettesAvoided, // T√≠nh l·∫°i theo k·∫ø ho·∫°ch hi·ªán t·∫°i
                            moneySaved: calculatedMoneySaved, // T√≠nh d·ª±a tr√™n pack price th·ª±c t·∫ø
                            healthScore: currentPlanInitialCigarettes > 0 ? Math.round((recalculatedCigarettesAvoided / currentPlanInitialCigarettes) * 100) : 0, // T√≠nh l·∫°i health score
                            notes: todayEntry.notes || ''
                        };

                        // C·∫≠p nh·∫≠t d·ªØ li·ªáu ng√†y h√¥m nay trong danh s√°ch
                        setCheckinHistory(prev => prev.map(entry =>
                            entry.date === today ? formattedEntry : entry
                        ));

                        // C·∫≠p nh·∫≠t localStorage v·ªõi plan_id
                        const currentPlan = userPlan;
                        const planId = currentPlan && (currentPlan.id || currentPlan.plan_id) ?
                            (currentPlan.id || currentPlan.plan_id).toString() : 'default';
                        const localStorageKey = `checkin_${planId}_${today}`;
                        localStorage.setItem(localStorageKey, JSON.stringify(formattedEntry));
                        console.log(`‚úÖ Refreshed today data from API and saved to localStorage with key: ${localStorageKey}`);

                        console.log('‚úÖ Refreshed today data from API:', todayEntry);
                    }
                }
            })
            .catch(err => {
                console.error('‚ùå Error refreshing today data:', err);
                // Kh√¥ng hi·ªÉn th·ªã l·ªói cho ng∆∞·ªùi d√πng khi n√†y v√¨ ƒë√¢y l√† h√†m ph·ª•
            });
    };

    if (loading) {
        return (
            <div className="checkin-history-wrapper">
                <button className="toggle-history-sidebar" disabled>
                    <FaCalendarAlt className="sidebar-toggle-icon" />
                    <span>L·ªãch s·ª≠ cai thu·ªëc</span>
                </button>
                <div className="checkin-history loading">ƒêang t·∫£i l·ªãch s·ª≠ check-in...</div>
            </div>
        );
    }

    if (error && checkinHistory.length === 0) {
        return (
            <div className="checkin-history-wrapper">
                <button
                    className="toggle-history-sidebar"
                    onClick={toggleSidebar}
                >
                    <FaCalendarAlt className="sidebar-toggle-icon" />
                    <span>L·ªãch s·ª≠ cai thu·ªëc</span>
                </button>
                <div className={`checkin-history-sidebar ${isSidebarOpen ? 'open' : 'closed'}`}>
                    <div className="checkin-history error">
                        <div className="history-header">
                            <h2 className="history-title">
                                <FaCalendarAlt className="title-icon" />
                                L·ªãch s·ª≠ cai thu·ªëc
                            </h2>
                            <button
                                className="close-sidebar-btn"
                                onClick={toggleSidebar}
                                title="ƒê√≥ng sidebar"
                            >
                                &times;
                            </button>
                        </div>
                        <div className="error-message">{error}</div>
                        <button
                            className="retry-button"
                            onClick={() => window.location.reload()}
                        >
                            Th·ª≠ l·∫°i
                        </button>
                    </div>
                </div>
            </div>
        );
    }

    if (checkinHistory.length === 0) {
        return (
            <div className="checkin-history-wrapper">
                <button
                    className="toggle-history-sidebar"
                    onClick={toggleSidebar}
                >
                    <FaCalendarAlt className="sidebar-toggle-icon" />
                    <span>L·ªãch s·ª≠ cai thu·ªëc</span>
                </button>
                <div className={`checkin-history-sidebar ${isSidebarOpen ? 'open' : 'closed'}`}>
                    <div className="checkin-history empty">
                        <div className="history-header">
                            <h2 className="history-title">
                                <FaCalendarAlt className="title-icon" />
                                L·ªãch s·ª≠ cai thu·ªëc
                            </h2>
                            <button
                                className="close-sidebar-btn"
                                onClick={toggleSidebar}
                                title="ƒê√≥ng sidebar"
                            >
                                &times;
                            </button>
                        </div>
                        <div className="empty-state">
                            <FaCalendarAlt className="empty-icon" />
                            <h3>Ch∆∞a c√≥ d·ªØ li·ªáu check-in</h3>
                            <p>B·∫°n ch∆∞a ghi nh·∫≠n ng√†y n√†o. H√£y b·∫Øt ƒë·∫ßu v·ªõi ng√†y h√¥m nay!</p>
                        </div>
                    </div>
                </div>
            </div>
        );
    }

    // H√†m t·∫£i l·∫°i to√†n b·ªô trang (gi·ªëng nh·∫•n F5)
    const handleRefresh = () => {
        // Hi·ªÉn th·ªã th√¥ng b√°o tr∆∞·ªõc khi t·∫£i l·∫°i
        setToast({
            show: true,
            message: 'ƒêang t·∫£i l·∫°i trang...',
            type: 'info'
        });

        // ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ hi·ªán th√¥ng b√°o tr∆∞·ªõc khi t·∫£i l·∫°i trang
        setTimeout(() => {
            // T·∫£i l·∫°i trang (t∆∞∆°ng ƒë∆∞∆°ng v·ªõi nh·∫•n F5)
            window.location.reload();
        }, 500);
    };

    return (
        <div className="checkin-history-wrapper">
            {/* N√∫t toggle sidebar - ch·ªâ hi·ªÉn th·ªã ·ªü mobile ho·∫∑c khi c·∫ßn thi·∫øt */}
            <button
                className="toggle-history-sidebar compact-button"
                onClick={toggleSidebar}
                title={isSidebarOpen ? "·∫®n l·ªãch s·ª≠ cai thu·ªëc" : "Hi·ªán l·ªãch s·ª≠ cai thu·ªëc"}
                style={{ display: 'none' }} /* ·∫®n n√∫t n√†y v√¨ ch√∫ng ta ƒë√£ c√≥ n√∫t ·ªü ProgressDashboard */
            >
                <FaCalendarAlt className="sidebar-toggle-icon" />
                <span>L·ªãch s·ª≠</span>
            </button>

            {/* Sidebar ch·ª©a l·ªãch s·ª≠ check-in */}
            <div className={`checkin-history-sidebar ${isSidebarOpen ? 'open' : 'closed'}`}>
                <div className="checkin-history">
                    <div className="history-header">
                        <h2 className="history-title">
                            <FaCalendarAlt className="title-icon" />
                            L·ªãch s·ª≠ cai thu·ªëc
                        </h2>

                        <div className="history-header-buttons">
                            <button
                                className="refresh-btn"
                                onClick={handleRefresh}
                                title="T·∫£i l·∫°i trang (F5)"
                                disabled={loading}
                            >
                                <FaSync className="refresh-icon" />
                            </button>
                            <button
                                className="close-sidebar-btn"
                                onClick={toggleSidebar}
                                title="ƒê√≥ng sidebar"
                            >
                                &times;
                            </button>
                        </div>
                    </div>

                    {error && (
                        <div className="warning-message">
                            {error}
                        </div>
                    )}

                    <div className="history-table-container">
                        <table className="history-table">
                            <thead>
                                <tr>
                                    <th>Ng√†y</th>
                                    <th>M·ª•c ti√™u</th>
                                    <th>ƒê√£ h√∫t</th>
                                    <th>ƒê√£ tr√°nh</th>
                                    <th>ƒêi·ªÉm s·ª©c kh·ªèe</th>
                                    <th>Ti·∫øt ki·ªám</th>
                                    <th>Ghi ch√∫</th>
                                    <th>Thao t√°c</th>
                                </tr>
                            </thead>
                            <tbody>
                                {currentEntries.map((entry) => (
                                    <tr
                                        key={`${entry.date}_${entry.actualCigarettes}_${entry.cigarettesAvoided}`}
                                        className={`${isToday(entry.date) ? 'today-row' : ''} ${entry.isEmpty ? 'empty-checkin-row' : ''}`}
                                    >
                                        <td className="date-cell">
                                            {formatDisplayDate(entry.date)}
                                            {isToday(entry.date) && <span className="today-badge">H√¥m nay</span>}
                                        </td>

                                        <td className="target-cell">
                                            {editingEntry === entry.date ? (
                                                <input
                                                    type="number"
                                                    min="0"
                                                    max="100"
                                                    value={tempEditData.targetCigarettes}
                                                    onChange={(e) => handleEditChange('targetCigarettes', parseInt(e.target.value) || 0)}
                                                    className="edit-input"
                                                />
                                            ) : (
                                                <span>{entry.targetCigarettes} ƒëi·∫øu</span>
                                            )}
                                        </td>

                                        <td className="actual-cell">
                                            {editingEntry === entry.date ? (
                                                <input
                                                    type="number"
                                                    min="0"
                                                    max="100"
                                                    value={tempEditData.actualCigarettes || 0}
                                                    onChange={(e) => handleEditChange('actualCigarettes', parseInt(e.target.value) || 0)}
                                                    className="edit-input"
                                                />
                                            ) : (
                                                <span
                                                    className={
                                                        entry.actualCigarettes === null ? 'empty-value' :
                                                            entry.actualCigarettes <= entry.targetCigarettes ? 'success' : 'warning'
                                                    }
                                                >
                                                    {entry.actualCigarettes === null ? 'N/A' : `${entry.actualCigarettes} ƒëi·∫øu`}
                                                </span>
                                            )}
                                        </td>

                                        <td className="avoided-cell">
                                            <span>
                                                {entry.cigarettesAvoided === null ? 'N/A' : `${entry.cigarettesAvoided} ƒëi·∫øu`}
                                            </span>
                                        </td>
                                        <td className="health-cell">
                                            {entry.healthScore === null ? (
                                                <span className="empty-value">N/A</span>
                                            ) : (
                                                <div className="health-score">
                                                    <div
                                                        className="health-bar"
                                                        style={{ width: `${entry.healthScore}%` }}
                                                    ></div>
                                                    <span className="health-value">{entry.healthScore}</span>
                                                </div>
                                            )}
                                        </td>

                                        <td className="money-cell">
                                            {entry.moneySaved === null ? 'N/A' : `${(entry.moneySaved / 1000).toFixed(1)}k`}
                                        </td>

                                        <td className="notes-cell">
                                            {editingEntry === entry.date ? (
                                                <textarea
                                                    value={tempEditData.notes || ''}
                                                    onChange={(e) => handleEditChange('notes', e.target.value)}
                                                    className="edit-textarea"
                                                    rows="2"
                                                    placeholder="Ghi ch√∫..."
                                                />
                                            ) : (
                                                <span>{entry.notes || '-'}</span>
                                            )}
                                        </td>

                                        <td className="actions-cell">
                                            {editingEntry === entry.date ? (
                                                <div className="edit-actions">
                                                    <button
                                                        className="save-btn"
                                                        onClick={() => handleSaveEdit(entry.date)}
                                                        title="L∆∞u thay ƒë·ªïi"
                                                    >
                                                        <FaSave />
                                                    </button>
                                                    <button
                                                        className="cancel-btn"
                                                        onClick={handleCancelEdit}
                                                        title="H·ªßy"
                                                    >
                                                        <FaTimes />
                                                    </button>
                                                </div>
                                            ) : (
                                                <div className="action-buttons">
                                                    <button
                                                        className="edit-btn"
                                                        onClick={() => handleEdit(entry)}
                                                        title="Ch·ªânh s·ª≠a"
                                                    >
                                                        <FaEdit />
                                                    </button>
                                                    {/* Ch·ªâ hi·ªÉn th·ªã n√∫t x√≥a n·∫øu c√≥ d·ªØ li·ªáu th·ª±c s·ª± (kh√¥ng ph·∫£i entry tr·ªëng) */}
                                                    {!entry.isEmpty && entry.actualCigarettes !== null && (
                                                        <button
                                                            className="delete-btn"
                                                            onClick={() => handleDeleteEntry(entry.date)}
                                                            title="X√≥a d·ªØ li·ªáu check-in"
                                                        >
                                                            <FaTrash />
                                                        </button>
                                                    )}
                                                </div>
                                            )}
                                        </td>
                                    </tr>
                                ))}
                            </tbody>
                        </table>
                    </div>                    {/* Pagination */}
                    {totalPages > 1 && (
                        <div className="pagination">
                            <button
                                onClick={() => paginate(currentPage - 1)}
                                disabled={currentPage === 1}
                                className="pagination-btn"
                            >
                                <FaChevronLeft />
                            </button>

                            <div className="pagination-info">
                                Trang {currentPage} / {totalPages}
                            </div>

                            <button
                                onClick={() => paginate(currentPage + 1)}
                                disabled={currentPage === totalPages}
                                className="pagination-btn"
                            >
                                <FaChevronRight />
                            </button>
                        </div>
                    )}

                    {/* Toast notification */}
                    {toast.show && (
                        <div className={`toast-notification ${toast.type}`}>
                            {toast.message}
                        </div>
                    )}
                </div>
            </div>
        </div>
    );
};

export default CheckinHistory;
