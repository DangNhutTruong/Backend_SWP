import React, { useState, useEffect, useCallback } from 'react';
import { FaTrophy, FaCalendarCheck, FaChartLine, FaLeaf, FaCoins, FaHeart, FaCalendarAlt } from 'react-icons/fa';
import { Link } from 'react-router-dom';
import QuitProgressChart from './QuitProgressChart';

const ProgressDashboard = ({ userPlan, completionDate, dashboardStats: externalStats, actualProgress = [], onDataReset }) => {
  const [dashboardStats, setDashboardStats] = useState(null);
  const [milestones, setMilestones] = useState([]);
  const [totalCigarettesFromHistory, setTotalCigarettesFromHistory] = useState(0);
  const [totalMoneySavedFromHistory, setTotalMoneySavedFromHistory] = useState(0);

  // L·∫Øng nghe s·ª± ki·ªán c·∫≠p nh·∫≠t t·ªïng s·ªë ƒëi·∫øu ƒë√£ tr√°nh t·ª´ CheckinHistory
  useEffect(() => {
    const handleTotalCigarettesUpdate = (event) => {
      const total = event.detail.totalCigarettesAvoided;
      console.log('üîç ProgressDashboard - Received total cigarettes avoided:', total);
      setTotalCigarettesFromHistory(total);
    };

    const handleTotalMoneySavedUpdate = (event) => {
      const total = event.detail.totalMoneySaved;
      console.log('üîç ProgressDashboard - Received total money saved:', total);
      setTotalMoneySavedFromHistory(total);
    };

    // L·∫Øng nghe s·ª± ki·ªán t·ª´ CheckinHistory
    window.addEventListener('totalCigarettesAvoidedUpdated', handleTotalCigarettesUpdate);
    window.addEventListener('totalMoneySavedUpdated', handleTotalMoneySavedUpdate);

    // ƒê·ªçc gi√° tr·ªã t·ª´ localStorage khi component mount
    const storedCigarettes = localStorage.getItem('totalCigarettesAvoided');
    const storedMoney = localStorage.getItem('totalMoneySaved');

    if (storedCigarettes && !isNaN(parseInt(storedCigarettes))) {
      setTotalCigarettesFromHistory(parseInt(storedCigarettes));
    }

    if (storedMoney && !isNaN(parseInt(storedMoney))) {
      setTotalMoneySavedFromHistory(parseInt(storedMoney));
    }

    return () => {
      window.removeEventListener('totalCigarettesAvoidedUpdated', handleTotalCigarettesUpdate);
      window.removeEventListener('totalMoneySavedUpdated', handleTotalMoneySavedUpdate);
    };
  }, []);

  // T√≠nh to√°n th·ªëng k√™

  // Debug logging ƒë·ªÉ ki·ªÉm tra d·ªØ li·ªáu userPlan nh·∫≠n ƒë∆∞·ª£c
  console.log("üîç ProgressDashboard nh·∫≠n ƒë∆∞·ª£c userPlan:", {
    userPlan: userPlan,
    planName: userPlan?.plan_name || userPlan?.planName,
    planId: userPlan?.id,
    initialCigarettes: userPlan?.initial_cigarettes || userPlan?.initialCigarettes,
    startDate: userPlan?.start_date || userPlan?.startDate,
    totalWeeks: userPlan?.total_weeks || userPlan?.totalWeeks,
    weeks: userPlan?.weeks ? userPlan.weeks.length : 0
  });

  console.log("üîç ProgressDashboard nh·∫≠n ƒë∆∞·ª£c completionDate:", completionDate);
  console.log("üîç ProgressDashboard nh·∫≠n ƒë∆∞·ª£c externalStats:", externalStats);
  console.log("üîç ProgressDashboard nh·∫≠n ƒë∆∞·ª£c actualProgress:", actualProgress);

  // T·∫°o d·ªØ li·ªáu m·∫´u cho bi·ªÉu ƒë·ªì th·ª±c t·∫ø
  const generateSampleActualData = (plan) => {
    if (!plan || !plan.weeks || plan.weeks.length === 0) {
      return [{ date: new Date().toISOString().split('T')[0], actualCigarettes: 0, targetCigarettes: 0 }];
    }

    // T·∫°o d·ªØ li·ªáu m·∫´u d·ª±a tr√™n k·∫ø ho·∫°ch
    const sampleData = [];
    const today = new Date();

    // D√πng v√≤ng l·∫∑p th√¥ng th∆∞·ªùng ƒë·ªÉ t·∫°o d·ªØ li·ªáu m·∫´u
    for (let i = 30; i >= 0; i--) {
      const date = new Date(today);
      date.setDate(date.getDate() - i);
      const dateStr = date.toISOString().split('T')[0];

      // T√≠nh tu·∫ßn t∆∞∆°ng ·ª©ng
      let weekIndex = Math.floor(i / 7);
      weekIndex = Math.min(weekIndex, plan.weeks.length - 1);
      if (weekIndex < 0) weekIndex = 0;

      // L·∫•y m·ª•c ti√™u t·ª´ k·∫ø ho·∫°ch
      const week = plan.weeks[weekIndex];
      const plannedAmount = week.cigarettes || week.amount || 0;

      // Th√™m bi·∫øn ƒë·ªông ng·∫´u nhi√™n ƒë·ªÉ d·ªØ li·ªáu th·ª±c t·∫ø kh√°c m·ªôt ch√∫t so v·ªõi k·∫ø ho·∫°ch
      const randomVariation = Math.floor(Math.random() * 3) - 1; // -1, 0, ho·∫∑c 1
      const actualAmount = Math.max(0, plannedAmount + randomVariation);

      sampleData.push({
        date: dateStr,
        actualCigarettes: actualAmount,
        targetCigarettes: plannedAmount
      });
    }

    console.log("DEBUG: T·∫°o d·ªØ li·ªáu m·∫´u cho bi·ªÉu ƒë·ªì:", sampleData.length, "ng√†y");
    return sampleData;
  };

  // Early return if required props are missing
  if (!userPlan || !completionDate) {
    console.log("üîç ProgressDashboard - Missing required props:", {
      hasUserPlan: !!userPlan,
      hasCompletionDate: !!completionDate,
      userPlan: userPlan,
      completionDate: completionDate
    });
    return (
      <div className="dashboard-error">
        <p>Kh√¥ng th·ªÉ hi·ªÉn th·ªã dashboard - thi·∫øu d·ªØ li·ªáu c·∫ßn thi·∫øt</p>
        <p>UserPlan: {userPlan ? 'C√≥' : 'Kh√¥ng'}</p>
        <p>CompletionDate: {completionDate ? 'C√≥' : 'Kh√¥ng'}</p>
      </div>
    );
  }

  const calculateDashboardStats = useCallback(() => {
    console.log("üîç calculateDashboardStats ƒë∆∞·ª£c g·ªçi v·ªõi:", {
      userPlan: userPlan,
      completionDate: completionDate,
      externalStats: externalStats,
      actualProgress: actualProgress
    });

    if (!userPlan || !completionDate) {
      console.log("üîç calculateDashboardStats - Missing required data, returning");
      return;
    }

    // N·∫øu c√≥ th·ªëng k√™ t·ª´ b√™n ngo√†i, s·ª≠ d·ª•ng n√≥ thay v√¨ t√≠nh to√°n l·∫°i
    if (externalStats && Object.keys(externalStats).length > 0) {
      console.log("üîç S·ª≠ d·ª•ng th·ªëng k√™ t·ª´ Progress.jsx (t·ª´ database):", externalStats);
      setDashboardStats({
        daysSincePlanCreation: externalStats.noSmokingDays || 0,
        cigarettesSaved: externalStats.savedCigarettes || 0,
        moneySaved: externalStats.savedMoney || 0,
        planDuration: userPlan.weeks ? userPlan.weeks.length : 0,
        planName: userPlan.name || 'K·∫ø ho·∫°ch c√° nh√¢n',
        healthProgress: externalStats.healthProgress || 0
      });
      return;
    }

    // T√≠nh to√°n t·ª´ actualProgress n·∫øu c√≥ d·ªØ li·ªáu th·ª±c t·∫ø
    if (actualProgress && actualProgress.length > 0) {
      console.log("T√≠nh to√°n t·ª´ actualProgress:", actualProgress);

      let totalCigarettesSaved = 0;
      let totalMoneySaved = 0;

      // L·∫•y gi√° g√≥i thu·ªëc t·ª´ activePlan
      let packPrice = 25000;
      try {
        const activePlanData = localStorage.getItem('activePlan');
        if (activePlanData) {
          const activePlan = JSON.parse(activePlanData);
          if (activePlan && activePlan.packPrice) {
            packPrice = activePlan.packPrice;
          }
        }
      } catch (error) {
        console.error('L·ªói khi ƒë·ªçc packPrice:', error);
      }

      const pricePerCigarette = packPrice / 20;

      // T√≠nh t·ªïng cigarettes saved t·ª´ d·ªØ li·ªáu th·ª±c t·∫ø
      actualProgress.forEach(dayRecord => {
        const targetForDay = dayRecord.targetCigarettes || dayRecord.target_cigarettes || 0;
        const actualForDay = dayRecord.actualCigarettes || dayRecord.actual_cigarettes || 0;
        const daySaved = Math.max(0, targetForDay - actualForDay);

        totalCigarettesSaved += daySaved;
        totalMoneySaved += daySaved * pricePerCigarette;

        console.log(`Ng√†y ${dayRecord.date}: Target: ${targetForDay}, Actual: ${actualForDay}, Saved: ${daySaved}`);
      });

      console.log(`T·ªïng cigarettes saved t·ª´ actualProgress: ${totalCigarettesSaved}`);

      setDashboardStats({
        daysSincePlanCreation: actualProgress.length,
        cigarettesSaved: totalCigarettesSaved,
        moneySaved: totalMoneySaved,
        planDuration: userPlan.weeks ? userPlan.weeks.length : 0,
        planName: userPlan.name || 'K·∫ø ho·∫°ch c√° nh√¢n',
        healthProgress: 0
      });
      return;
    }

    // T√≠nh to√°n th√¥ng th∆∞·ªùng n·∫øu kh√¥ng c√≥ th·ªëng k√™ t·ª´ b√™n ngo√†i
    console.log("üîç T√≠nh to√°n th√¥ng th∆∞·ªùng - kh√¥ng c√≥ external stats");
    const startDate = new Date(completionDate);
    const today = new Date();
    const daysSinceStart = Math.floor((today - startDate) / (1000 * 60 * 60 * 24));

    console.log("üîç Date calculation:", {
      startDate: startDate,
      today: today,
      daysSinceStart: daysSinceStart
    });

    // T√≠nh to√°n s·ªë ƒëi·∫øu ƒë√£ ti·∫øt ki·ªám ƒë∆∞·ª£c - ƒë·∫£m b·∫£o userPlan.weeks t·ªìn t·∫°i
    const initialCigarettesPerDay = userPlan.weeks && userPlan.weeks.length > 0 ?
      userPlan.weeks[0]?.amount || 20 : 20;
    const estimatedSaved = initialCigarettesPerDay * daysSinceStart;

    console.log("üîç Cigarettes calculation:", {
      initialCigarettesPerDay: initialCigarettesPerDay,
      estimatedSaved: estimatedSaved
    });      // T√≠nh ti·ªÅn ti·∫øt ki·ªám d·ª±a tr√™n gi√° g√≥i thu·ªëc t·ª´ k·∫ø ho·∫°ch c·ªßa ng∆∞·ªùi d√πng
    let packPrice = 25000; // Gi√° m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng t√¨m th·∫•y

    // L·∫•y gi√° g√≥i thu·ªëc t·ª´ activePlan
    try {
      const activePlanData = localStorage.getItem('activePlan');
      if (activePlanData) {
        const activePlan = JSON.parse(activePlanData);
        if (activePlan && activePlan.packPrice) {
          packPrice = activePlan.packPrice;
          console.log(`[Dashboard] L·∫•y gi√° g√≥i thu·ªëc t·ª´ activePlan: ${packPrice.toLocaleString()}ƒë`);
        }
      }
    } catch (error) {
      console.error('[Dashboard] L·ªói khi ƒë·ªçc packPrice t·ª´ activePlan:', error);
    }

    const pricePerCigarette = packPrice / 20; // Gi·∫£ s·ª≠ 1 g√≥i = 20 ƒëi·∫øu
    const moneySaved = externalStats && externalStats.savedMoney ?
      externalStats.savedMoney :
      estimatedSaved * pricePerCigarette;

    console.log("üîç Final calculation:", {
      packPrice: packPrice,
      pricePerCigarette: pricePerCigarette,
      moneySaved: moneySaved
    });

    const finalStats = {
      daysSincePlanCreation: daysSinceStart,
      cigarettesSaved: estimatedSaved,
      moneySaved: moneySaved,
      planDuration: userPlan.weeks ? userPlan.weeks.length : 0,
      planName: userPlan.name || 'K·∫ø ho·∫°ch c√° nh√¢n',
      healthProgress: 0 // Gi√° tr·ªã m·∫∑c ƒë·ªãnh
    };

    console.log("üîç Setting dashboard stats:", finalStats);
    setDashboardStats(finalStats);
  }, [userPlan, completionDate, externalStats, actualProgress]);

  const loadMilestones = useCallback(() => {
    // N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu ƒë·∫ßy ƒë·ªß, kh√¥ng th·ª±c hi·ªán
    if (!userPlan || !completionDate || !dashboardStats) {
      return;
    }


    // Milestone theo th·ªùi gian WHO
    const healthMilestones = [
      { days: 1, title: '24 gi·ªù ƒë·∫ßu ti√™n', description: 'Carbon monoxide ƒë∆∞·ª£c lo·∫°i b·ªè kh·ªèi c∆° th·ªÉ', achieved: false },
      { days: 2, title: '48 gi·ªù', description: 'Nicotine ƒë∆∞·ª£c lo·∫°i b·ªè, v·ªã gi√°c c·∫£i thi·ªán', achieved: false },
      { days: 3, title: '72 gi·ªù', description: 'ƒê∆∞·ªùng h√¥ h·∫•p th∆∞ gi√£n, nƒÉng l∆∞·ª£ng tƒÉng', achieved: false },
      { days: 14, title: '2 tu·∫ßn', description: 'Tu·∫ßn ho√†n m√°u c·∫£i thi·ªán', achieved: false },
      { days: 30, title: '1 th√°ng', description: 'Ch·ª©c nƒÉng ph·ªïi tƒÉng 30%', achieved: false },
      { days: 90, title: '3 th√°ng', description: 'Ho v√† kh√≥ th·ªü gi·∫£m ƒë√°ng k·ªÉ', achieved: false },
      { days: 365, title: '1 nƒÉm', description: 'Nguy c∆° b·ªánh tim gi·∫£m 50%', achieved: false }
    ];

    const updatedMilestones = healthMilestones.map(milestone => ({
      ...milestone,
      achieved: (externalStats?.noSmokingDays || dashboardStats?.daysSincePlanCreation || 0) >= milestone.days
    }));
    setMilestones(updatedMilestones);
  }, [userPlan, completionDate, dashboardStats]);

  // Add useEffect hooks after function declarations
  useEffect(() => {
    if (userPlan && completionDate) {
      calculateDashboardStats();
    }
  }, [userPlan, completionDate, calculateDashboardStats, actualProgress]);

  // T·∫£i milestone sau khi ƒë√£ c√≥ th·ªëng k√™
  useEffect(() => {
    if (dashboardStats) {
      loadMilestones();
    }
  }, [dashboardStats, loadMilestones]); const getAchievementProgress = () => {
    // Lu√¥n t√≠nh to√°n d·ª±a tr√™n s·ªë ng√†y, kh√¥ng d√πng gi√° tr·ªã t·ª´ b√™n ngo√†i
    // T√≠nh to√°n d·ª±a tr√™n (s·ªë ng√†y ƒë√£ cai / s·ªë tu·∫ßn cai * 7) * 100%
    const daysSinceStart = externalStats?.noSmokingDays || dashboardStats?.daysSincePlanCreation || 0;

    // L·∫•y t·ªïng s·ªë tu·∫ßn trong k·∫ø ho·∫°ch
    const totalWeeks = userPlan?.weeks?.length || userPlan?.total_weeks || 8;

    // Chuy·ªÉn ƒë·ªïi s·ªë tu·∫ßn th√†nh s·ªë ng√†y (1 tu·∫ßn = 7 ng√†y)
    const totalDays = totalWeeks * 7;

    // T√≠nh ph·∫ßn trƒÉm ho√†n th√†nh (gi·ªõi h·∫°n t·ªëi ƒëa 100%)
    const progress = Math.min(100, (daysSinceStart / totalDays) * 100);

    return progress;
  };

  // Add some debugging information
  useEffect(() => {
    console.log("Current dashboard stats:", dashboardStats);
    console.log("Current milestones:", milestones);
  }, [dashboardStats, milestones]);

  // Show loading state while dashboardStats is not set
  if (!dashboardStats) {
    console.log("üîç Dashboard stats not set yet, showing loading screen");
    console.log("üîç Current dashboardStats:", dashboardStats);
    return (
      <div className="dashboard-loading">
        <p>ƒêang t·∫£i dashboard...</p>
        <p>Debug: userPlan={userPlan ? 'C√≥' : 'Kh√¥ng'}, completionDate={completionDate ? 'C√≥' : 'Kh√¥ng'}</p>
      </div>
    );
  }

  const achievementProgress = getAchievementProgress();

  // Th√™m reset to√†n b·ªô d·ªØ li·ªáu
  const handleReset = () => {
    if (window.confirm('B·∫°n c√≥ ch·∫Øc mu·ªën reset d·ªØ li·ªáu check-in?')) {
      localStorage.removeItem('actualProgress');
      localStorage.removeItem('dashboardStats');
      if (onDataReset) {
        onDataReset();
      }
      alert('D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c reset');
    }
  };

  return (
    <div className="progress-dashboard">      {/* Key Statistics */}
      <div className="dashboard-stats">
        <div className="stat-card primary">
          <div className="stat-icon">
            <FaCalendarCheck />
          </div>          <div className="stat-content">
            <h3>{(() => {
              const days = externalStats?.noSmokingDays || dashboardStats?.daysSincePlanCreation || 0;
              console.log("üîç ProgressDashboard - Days display:", {
                externalStats: externalStats?.noSmokingDays,
                dashboardStats: dashboardStats?.daysSincePlanCreation,
                final: days
              });
              return days;
            })()}</h3>
            <p>Ng√†y theo d√µi</p>
          </div>
        </div>        <div className="stat-card success">
          <div className="stat-icon">
            <FaLeaf />
          </div>          <div className="stat-content">
            <h3>{(() => {
              // ∆Øu ti√™n hi·ªÉn th·ªã t·ªïng s·ªë ƒëi·∫øu ƒë√£ tr√°nh t·ª´ l·ªãch s·ª≠ check-in
              const savedCigsFromHistory = totalCigarettesFromHistory;
              const savedCigsFromExternal = externalStats?.savedCigarettes;
              const savedCigsFromDashboard = dashboardStats?.cigarettesSaved;

              // ∆Øu ti√™n: History > External > Dashboard > 0
              const finalSavedCigs = savedCigsFromHistory > 0
                ? savedCigsFromHistory
                : (savedCigsFromExternal || savedCigsFromDashboard || 0);

              console.log("üîç ProgressDashboard - Cigarettes saved display:", {
                fromHistory: savedCigsFromHistory,
                fromExternal: savedCigsFromExternal,
                fromDashboard: savedCigsFromDashboard,
                final: finalSavedCigs
              });

              return finalSavedCigs.toLocaleString();
            })()}</h3>
            <p>ƒêi·∫øu thu·ªëc ƒë√£ tr√°nh</p>
          </div>
        </div>

        <div className="stat-card money">
          <div className="stat-icon">
            <FaCoins />
          </div>
          <div className="stat-content">
            <h3>{(() => {
              // ∆Øu ti√™n hi·ªÉn th·ªã t·ªïng s·ªë ti·ªÅn ƒë√£ ti·∫øt ki·ªám t·ª´ l·ªãch s·ª≠ check-in
              const savedMoneyFromHistory = totalMoneySavedFromHistory;
              const savedMoneyFromExternal = externalStats?.savedMoney;
              const savedMoneyFromDashboard = dashboardStats?.moneySaved;

              // ∆Øu ti√™n: History > External > Dashboard > 0
              const finalSavedMoney = savedMoneyFromHistory > 0
                ? savedMoneyFromHistory
                : (savedMoneyFromExternal || savedMoneyFromDashboard || 0);

              console.log("üîç ProgressDashboard - Money saved display:", {
                fromHistory: savedMoneyFromHistory,
                fromExternal: savedMoneyFromExternal,
                fromDashboard: savedMoneyFromDashboard,
                final: finalSavedMoney
              });

              return (finalSavedMoney / 1000).toFixed(0) + "K";
            })()}</h3>
            <p>VNƒê ƒë√£ ti·∫øt ki·ªám</p>
          </div>
        </div>

        <div className="stat-card health">
          <div className="stat-icon">
            <FaHeart />
          </div>
          <div className="stat-content">
            <h3>{achievementProgress.toFixed(0)}%</h3>
            <p>Milestone s·ª©c kh·ªèe</p>
          </div>
        </div>
      </div>      {/* Progress Chart */}
      <div className="maintenance-section">
        <div className="chart-header-container">
          <h2>
            <FaChartLine className="section-icon" />
            K·∫ø ho·∫°ch c·ªßa b·∫°n
          </h2>
          <button
            id="history-button"
            className="toggle-history-button"
            onClick={() => {
              // K√≠ch ho·∫°t s·ª± ki·ªán t√πy ch·ªânh
              const event = new CustomEvent('toggle-checkin-history');
              document.dispatchEvent(event);
            }}
          >
            <FaCalendarAlt style={{ marginRight: '5px', fontSize: '1rem' }} />
            L·ªãch s·ª≠
          </button>
        </div>
        <div className="maintenance-chart">
          <QuitProgressChart
            userPlan={userPlan}
            actualProgress={actualProgress && actualProgress.length > 0 ? actualProgress : generateSampleActualData(userPlan)}
            timeFilter="T·∫•t c·∫£"
            height={250}
          />
        </div>
      </div>

      {/* Health Milestones */}
      <div className="milestones-section">
        <h2>Milestone s·ª©c kh·ªèe</h2>
        <div className="milestones-grid">
          {milestones.map((milestone, index) => (
            <div
              key={index}
              className={`milestone-card ${milestone.achieved ? 'achieved' : 'pending'}`}
            >
              <div className="milestone-indicator">
                {milestone.achieved ? '‚úÖ' : '‚è≥'}
              </div>
              <div className="milestone-content">
                <h4>{milestone.title}</h4>
                <p>{milestone.description}</p>
                {!milestone.achieved && dashboardStats && (
                  <span className="days-remaining">
                    C√≤n {Math.max(0, milestone.days - (externalStats?.noSmokingDays || dashboardStats?.daysSincePlanCreation || 0))} ng√†y
                  </span>
                )}
              </div>
            </div>
          ))}
        </div>
      </div>      {/* Tips section */}
      <div className="maintenance-tips-section">
        <h2>L·ªùi khuy√™n duy tr√¨</h2>

        <div className="maintenance-tips">
          <h3>üí° M·∫πo h·ªØu √≠ch</h3>
          <ul>
            <li>Ti·∫øp t·ª•c tr√°nh xa m√¥i tr∆∞·ªùng c√≥ kh√≥i thu·ªëc</li>
            <li>Duy tr√¨ c√°c ho·∫°t ƒë·ªông th·ªÉ ch·∫•t th∆∞·ªùng xuy√™n</li>
            <li>ƒÇn u·ªëng l√†nh m·∫°nh ƒë·ªÉ tr√°nh tƒÉng c√¢n</li>
            <li>T√¨m ki·∫øm h·ªó tr·ª£ t·ª´ gia ƒë√¨nh v√† b·∫°n b√®</li>
            <li>Nh·∫Øc nh·ªü b·∫£n th√¢n v·ªÅ l·ª£i √≠ch ƒë√£ ƒë·∫°t ƒë∆∞·ª£c</li>
          </ul>
        </div>
      </div>
    </div>
  );
};

export default ProgressDashboard;
