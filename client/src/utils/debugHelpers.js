/**
 * C√°c h√†m tr·ª£ gi√∫p debug API v√† k·∫øt n·ªëi server
 */

// Bi·∫øn ki·ªÉm so√°t vi·ªác ghi log
const DEBUG_MODE = true; // ƒê·∫∑t th√†nh false ƒë·ªÉ t·∫Øt to√†n b·ªô log

/**
 * Ghi log chi ti·∫øt khi g·∫∑p l·ªói API
 */
export const logApiError = (error, context = '') => {
  if (!DEBUG_MODE) return;
  
  console.group(`üîç API Error Details ${context ? `(${context})` : ''}`);
  
  console.error('Error summary:', {
    message: error.message,
    status: error.response?.status,
    statusText: error.response?.statusText
  });
  
  if (error.config) {
    // Ch·ªâ log th√¥ng tin c·∫ßn thi·∫øt c·ªßa config
    console.log('Request config:', {
      url: error.config.url,
      method: error.config.method,
      baseURL: error.config.baseURL,
      timeout: error.config.timeout
    });
  }
  
  if (error.response) {
    console.log('Response data:', error.response.data);
  }
  
  console.groupEnd();
};

/**
 * Ki·ªÉm tra k·∫øt n·ªëi ƒë·∫øn server API
 */
export const checkApiConnection = async () => {
  const token = localStorage.getItem('auth_token') || sessionStorage.getItem('auth_token');
  const results = {
    directApi: { success: false, error: null },
    proxyApi: { success: false, error: null },
    authToken: !!token
  };
  
  // Ki·ªÉm tra k·∫øt n·ªëi tr·ª±c ti·∫øp
  try {
    const directResponse = await fetch('http://localhost:5000/health', {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json'
      },
      timeout: 3000
    });
    
    results.directApi = {
      success: directResponse.ok,
      status: directResponse.status,
      statusText: directResponse.statusText
    };
    
    if (directResponse.ok) {
      const data = await directResponse.json();
      results.directApi.data = data;
    }
  } catch (error) {
    results.directApi.error = error.message;
  }
  
  // Ki·ªÉm tra k·∫øt n·ªëi qua proxy
  try {
    const proxyResponse = await fetch('/api/health', {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json'
      },
      timeout: 3000
    });
    
    results.proxyApi = {
      success: proxyResponse.ok,
      status: proxyResponse.status,
      statusText: proxyResponse.statusText
    };
    
    if (proxyResponse.ok) {
      const data = await proxyResponse.json();
      results.proxyApi.data = data;
    }
  } catch (error) {
    results.proxyApi.error = error.message;
  }
  
  // Log k·∫øt qu·∫£ ki·ªÉm tra
  console.group('üåê API Connection Test Results');
  console.log('Direct API connection:', results.directApi.success ? '‚úÖ Connected' : '‚ùå Failed');
  console.log('Proxy API connection:', results.proxyApi.success ? '‚úÖ Connected' : '‚ùå Failed');
  console.log('Authentication token:', results.authToken ? '‚úÖ Present' : '‚ùå Missing');
  console.groupEnd();
  
  return results;
};

/**
 * Ghi log c√≥ ki·ªÉm so√°t, ch·ªâ hi·ªÉn th·ªã trong ch·∫ø ƒë·ªô DEBUG
 * @param {string} context - Ng·ªØ c·∫£nh c·ªßa log (v√≠ d·ª•: "QuitPlan", "Auth", etc.)
 * @param {string} message - Th√¥ng ƒëi·ªáp log
 * @param {any} data - D·ªØ li·ªáu ƒëi k√®m (t√πy ch·ªçn)
 * @param {boolean} forcePrint - Bu·ªôc hi·ªÉn th·ªã log ngay c·∫£ khi DEBUG_MODE = false (t√πy ch·ªçn)
 */
export const logDebug = (context, message, data = null, forcePrint = false) => {
  if (!DEBUG_MODE && !forcePrint) return;
  
  const timestamp = new Date().toLocaleTimeString();
  const prefix = `[${timestamp}][${context}]`;
  
  if (data === null) {
    console.log(`${prefix} ${message}`);
  } else {
    // Gi·ªõi h·∫°n k√≠ch th∆∞·ªõc d·ªØ li·ªáu log ƒë·ªÉ tr√°nh log qu√° l·ªõn
    const safeData = limitDataSize(data);
    console.log(`${prefix} ${message}`, safeData);
  }
};

/**
 * Gi·ªõi h·∫°n k√≠ch th∆∞·ªõc d·ªØ li·ªáu ƒë·ªÉ tr√°nh log qu√° l·ªõn
 * @param {any} data - D·ªØ li·ªáu c·∫ßn gi·ªõi h·∫°n
 * @returns {any} - D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c gi·ªõi h·∫°n
 */
function limitDataSize(data) {
  if (!data) return data;
  
  // N·∫øu l√† m·∫£ng v√† c√≥ nhi·ªÅu h∆°n 5 ph·∫ßn t·ª≠
  if (Array.isArray(data) && data.length > 5) {
    return [...data.slice(0, 3), `...v√† ${data.length - 3} ph·∫ßn t·ª≠ kh√°c...`];
  }
  
  // N·∫øu l√† object ph·ª©c t·∫°p
  if (typeof data === 'object' && data !== null) {
    // Chuy·ªÉn th√†nh string ƒë·ªÉ ki·ªÉm tra k√≠ch th∆∞·ªõc
    const stringData = JSON.stringify(data);
    if (stringData.length > 1000) {
      return `[Object qu√° l·ªõn - ${stringData.length} k√Ω t·ª±]`;
    }
  }
  
  return data;
}

export default {
  logApiError,
  checkApiConnection,
  logDebug
};
